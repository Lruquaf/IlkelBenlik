{
  "address": "0x57Cc8AF48B6BaaF4479d6A964f08163BCe054C90",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokensForWhitelist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokensForAirdrop",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_whitelistTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountPerMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountPerWhitelist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountPerAccount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_raribleTransferProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_founder1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_founder2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_communityWallet",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRevealed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQueryRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxAmountPerAccountExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxAmountPerMintExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxAmountPerWhitelistExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupplyExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupplyForAirdropExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupplyForWhitelistExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAnAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAnAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPublicSalePhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelistSalePhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StillAirdropPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongStateForReveal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AIRDROP_BASE_URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_WALLET",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FOUNDER_1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FOUNDER_2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AMOUNT_PER_ACCOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AMOUNT_PER_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AMOUNT_PER_WHITELIST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_FOR_AIRDROP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_FOR_WHITELIST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MERKLE_ROOT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_TOKEN_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_TOKEN_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "adminsForExternal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "airdropMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "changeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentState",
      "outputs": [
        {
          "internalType": "enum IlkelBenlik.STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "explicitOwnershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "explicitOwnershipsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "externalPublicSaleMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "externalWhitelistSaleMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAirdropMintCounter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getPublicMintCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getWhitelistMintCounter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRevealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raribleTransferProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseUri",
          "type": "string"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IlkelBenlik.STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "tokensOfOwnerIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa8e41be4b0231b67d234fd2af8f36a6c2fcd403d5d045c2c0f360ab1c126a08e",
  "receipt": {
    "to": null,
    "from": "0xC85C392654B161E9a16f8f8766Db5E75620dD276",
    "contractAddress": "0x57Cc8AF48B6BaaF4479d6A964f08163BCe054C90",
    "transactionIndex": 0,
    "gasUsed": "3978679",
    "logsBloom": "0x
    "blockHash": "0x1860414a47744ec0c8ecc898cd682196b5a7892914b5c05df3883fff8894b38e",
    "transactionHash": "0xa8e41be4b0231b67d234fd2af8f36a6c2fcd403d5d045c2c0f360ab1c126a08e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5652868,
        "transactionHash": "0xa8e41be4b0231b67d234fd2af8f36a6c2fcd403d5d045c2c0f360ab1c126a08e",
        "address": "0x57Cc8AF48B6BaaF4479d6A964f08163BCe054C90",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c85c392654b161e9a16f8f8766db5e75620dd276"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1860414a47744ec0c8ecc898cd682196b5a7892914b5c05df3883fff8894b38e"
      }
    ],
    "blockNumber": 5652868,
    "cumulativeGasUsed": "3978679",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "45",
    "8",
    "5",
    "10000000000000000",
    "11000000000000000",
    "5",
    "5",
    "10",
    "0x21B0B84FfAB5A8c48291f5eC9D9FDb9aef574052",
    "0xF0D3CfBb898A19C1bDbdEdcC22546CEF0768bb97",
    "0x8b162525d54853d5a5a9d7784BE568aE479F0c20",
    "0xCC7f39Ca6C9188eb88E8062d42461Dc7ec05041A",
    "0xa1c002e633f0237d9a4cb590efdf9eeb8d6b0d87cd1f9cc970e3a29aba305756",
    [
      "0xC85C392654B161E9a16f8f8766Db5E75620dD276",
      "0x94cAcf639D5fE43E06585a40f67c5c9Fe94Efc00",
      "0xa3e49a0c23DDecA9f9798A2978208136B4C51F66"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "a77d6f3a6088ee963be502f4d66bcaa5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensForWhitelist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensForAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountPerMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountPerWhitelist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountPerAccount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_raribleTransferProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_founder1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_founder2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityWallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxAmountPerAccountExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxAmountPerMintExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxAmountPerWhitelistExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyForAirdropExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyForWhitelistExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPublicSalePhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelistSalePhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StillAirdropPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongStateForReveal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AIRDROP_BASE_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDER_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDER_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_PER_ACCOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_PER_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_PER_WHITELIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_FOR_AIRDROP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_FOR_WHITELIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_TOKEN_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_TOKEN_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"adminsForExternal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airdropMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"changeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"internalType\":\"enum IlkelBenlik.STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"externalPublicSaleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"externalWhitelistSaleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAirdropMintCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPublicMintCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getWhitelistMintCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raribleTransferProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseUri\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IlkelBenlik.STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"airdropMint(address,uint256)\":{\"details\":\"caller is owner but minter is '_to''_setAirdropMintCounter' increases number of minted tokens of owner in airdrop mint as auxiliary data\",\"params\":{\"_amount\":\"token amount of airdrop\",\"_to\":\"airdrop recipient\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"changeState(uint256)\":{\"details\":\"airdrop phase must be finished to change the state\",\"params\":{\"_index\":\"index of state (0: closed, 1: whitelist, 2: public)\"}},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"externalPublicSaleMint(address,uint256)\":{\"params\":{\"_amount\":\"token amount to mint\"}},\"externalWhitelistSaleMint(address,uint256)\":{\"details\":\"'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data\",\"params\":{\"_amount\":\"token amount to mint\"}},\"getAirdropMintCounter(address)\":{\"details\":\"returns [0..31] bits of '_auxData' ([192..223] bits of '_packedAddressData')\",\"params\":{\"_account\":\"querying address\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getPublicMintCounter(address)\":{\"details\":\"(total minted) - (minted in whitelist sale) - (minted in airdrop)\"},\"getWhitelistMintCounter(address)\":{\"details\":\"returns [32..63] bits of '_auxData' ([224..255] bits of '_packedAddressData')\",\"params\":{\"_account\":\"querying address\"}},\"isApprovedForAll(address,address)\":{\"details\":\"inherits from ERC721A and bypass approval requests from rarible\",\"returns\":{\"_0\":\"true if the operator is rarible\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"publicSaleMint(uint256)\":{\"params\":{\"_amount\":\"token amount to mint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"reveal(string)\":{\"params\":{\"_newBaseUri\":\"actual URI\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"querying token id\"},\"returns\":{\"_0\":\"token URI\"}},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"whitelistSaleMint(uint256,bytes32[])\":{\"details\":\"'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data\",\"params\":{\"_amount\":\"token amount to mint\"}},\"withdrawAll()\":{\"details\":\"calls _withdraw function to withdraw assets\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"airdropMint(address,uint256)\":{\"notice\":\"owner can mint the tokens for airdrop before sale phases\"},\"changeState(uint256)\":{\"notice\":\"owner can changes the sale state\"},\"constructor\":{\"notice\":\"state variables are defined and royalty is set in constructor\"},\"contractBalance()\":{\"notice\":\"returns contract balance\"},\"currentState()\":{\"notice\":\"returns current state of sale\"},\"externalPublicSaleMint(address,uint256)\":{\"notice\":\"any EOA address can mint tokens for a certain ETH within a certain limit during public sale\"},\"externalWhitelistSaleMint(address,uint256)\":{\"notice\":\"whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale\"},\"getAirdropMintCounter(address)\":{\"notice\":\"returns total airdrop amount of an address\"},\"getPublicMintCounter(address)\":{\"notice\":\"returns mint amounts during public sale of addresses\"},\"getWhitelistMintCounter(address)\":{\"notice\":\"returns total airdrop amount of an address\"},\"isWhitelisted(address,bytes32[])\":{\"notice\":\"returns if an address whitelisted or not by verifying merkle proof\"},\"publicSaleMint(uint256)\":{\"notice\":\"any EOA address can mint tokens for a certain ETH within a certain limit during public sale\"},\"reveal(string)\":{\"notice\":\"owner should reveal the metadata after sale phase only for once\"},\"whitelistSaleMint(uint256,bytes32[])\":{\"notice\":\"whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale\"},\"withdrawAll()\":{\"notice\":\"owner can withdraw the all balance to associated accounts at any time\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IlkelBenlik.sol\":\"IlkelBenlik\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u:fDnTOc\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/IlkelBenlik.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title NFTs of ID Series Art Collection\\n * @author Lruquaf ---> github.com/Lruquaf\\n * @notice NFT Minting Contract of ID Series Art Collection by Necmi G\\u00fcrseler\\n */\\n\\npragma solidity 0.8.20;\\n\\nimport {IERC721A} from \\\"erc721a/contracts/IERC721A.sol\\\";\\nimport {ERC721A} from \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport {ERC721AQueryable} from \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\nimport {ERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nerror InvalidInput();\\nerror NotAnAccount();\\nerror NotAWhitelisted();\\nerror NotAnAdmin();\\nerror WrongStateForReveal();\\nerror AlreadyRevealed();\\nerror StillAirdropPhase();\\nerror NotAirdropPhase();\\nerror MaxSupplyForAirdropExceeded();\\nerror NotWhitelistSalePhase();\\nerror MaxSupplyForWhitelistExceeded();\\nerror MaxAmountPerWhitelistExceeded();\\nerror NotPublicSalePhase();\\nerror MaxAmountPerMintExceeded();\\nerror MaxSupplyExceeded();\\nerror MaxAmountPerAccountExceeded();\\nerror InsufficientETH();\\nerror SaleHasStarted();\\nerror TransferFailed();\\n\\ncontract IlkelBenlik is ERC721AQueryable, ERC2981, Ownable {\\n    using Strings for uint256;\\n\\n    // state of sale\\n    enum STATE {\\n        CLOSED,\\n        WHITELIST,\\n        PUBLIC\\n    }\\n    // sale is closed initally\\n    STATE public state = STATE.CLOSED;\\n\\n    // Transfer Proxy address to bypass approval during token listing\\n    address public raribleTransferProxy;\\n\\n    // A placeholder URI as base URI of whitelist and public tokens before reveal\\n    string public BASE_URI =\\n        \\\"ipfs://bafybeihawpmgq5vlku7g2aaocu2e2e7fqzvqe7qtq4kav2ge2jy5ojsqte/\\\";\\n    // URI of airdropped tokens\\n    string public constant AIRDROP_BASE_URI =\\n        \\\"ipfs://bafybeig5mbiinirndd6m43l2no2a46wcnnsihod4oo2hzoir5fyxklwuci/\\\";\\n\\n    // reveal state\\n    bool public isRevealed = false;\\n\\n    //////////////\\n    //WIP/////////\\n    //////////////\\n\\n    mapping(address admin => bool isAdmin) public adminsForExternal;\\n\\n    //////////////\\n    //////////////\\n    //////////////\\n\\n    // max supply\\n    uint256 public immutable MAX_TOKENS;\\n    // reserved supply for whitelist\\n    uint256 public immutable MAX_TOKENS_FOR_WHITELIST;\\n    // reserved supply for airdrop\\n    uint256 public immutable MAX_TOKENS_FOR_AIRDROP;\\n\\n    // token price for whitelist sale\\n    uint256 public immutable WHITELIST_TOKEN_PRICE;\\n    // token price for public sale\\n    uint256 public immutable PUBLIC_TOKEN_PRICE;\\n\\n    // mint limit per transaction (only public sale)\\n    uint256 public immutable MAX_AMOUNT_PER_MINT;\\n\\n    // whitelist mint limit per account\\n    uint256 public immutable MAX_AMOUNT_PER_WHITELIST;\\n    // public mint limit per account\\n    uint256 public immutable MAX_AMOUNT_PER_ACCOUNT;\\n\\n    // receiver of majority of sale income\\n    address public immutable FOUNDER_1;\\n    // receiver of creator earnings\\n    address public immutable FOUNDER_2;\\n    // receiver of remainder of sale income\\n    address public immutable COMMUNITY_WALLET;\\n\\n    // root hash of whitelist's merkle tree\\n    bytes32 public immutable MERKLE_ROOT;\\n\\n    /**\\n     * @notice state variables are defined and royalty is set in constructor\\n     */\\n    constructor(\\n        uint256 _maxTokens,\\n        uint256 _maxTokensForWhitelist,\\n        uint256 _maxTokensForAirdrop,\\n        uint256 _whitelistTokenPrice,\\n        uint256 _publicTokenPrice,\\n        uint256 _maxAmountPerMint,\\n        uint256 _maxAmountPerWhitelist,\\n        uint256 _maxAmountPerAccount,\\n        address _raribleTransferProxy,\\n        address _founder1,\\n        address _founder2,\\n        address _communityWallet,\\n        bytes32 _merkleRoot,\\n        address[] memory _admins\\n    ) ERC721A(\\\"IlkelBenlik\\\", \\\"IB\\\") {\\n        if (_maxTokensForWhitelist + _maxTokensForAirdrop > _maxTokens) {\\n            revert InvalidInput();\\n        }\\n        MAX_TOKENS = _maxTokens;\\n        MAX_TOKENS_FOR_WHITELIST = _maxTokensForWhitelist;\\n        MAX_TOKENS_FOR_AIRDROP = _maxTokensForAirdrop;\\n        WHITELIST_TOKEN_PRICE = _whitelistTokenPrice;\\n        PUBLIC_TOKEN_PRICE = _publicTokenPrice;\\n        MAX_AMOUNT_PER_MINT = _maxAmountPerMint;\\n        MAX_AMOUNT_PER_WHITELIST = _maxAmountPerWhitelist;\\n        MAX_AMOUNT_PER_ACCOUNT = _maxAmountPerAccount;\\n        raribleTransferProxy = _raribleTransferProxy;\\n        FOUNDER_1 = _founder1;\\n        FOUNDER_2 = _founder2;\\n        COMMUNITY_WALLET = _communityWallet;\\n        MERKLE_ROOT = _merkleRoot;\\n        _setDefaultRoyalty(_founder2, 500);\\n        for (uint256 i = 0; i < _admins.length; i++) {\\n            adminsForExternal[_admins[i]] = true;\\n        }\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC721A, ERC2981, ERC721A) returns (bool) {\\n        return\\n            ERC721A.supportsInterface(interfaceId) ||\\n            ERC2981.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice checks if the sender of message is an EOA\\n     */\\n    modifier onlyAccounts() {\\n        if (msg.sender != tx.origin) {\\n            revert NotAnAccount();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice checks if the sender of message is a whitelist\\n     */\\n    modifier onlyWhitelisted(bytes32[] calldata _merkleProof) {\\n        if (!isWhitelisted(msg.sender, _merkleProof)) {\\n            revert NotAWhitelisted();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAdmins() {\\n        if (!adminsForExternal[msg.sender]) {\\n            revert NotAnAdmin();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice owner should reveal the metadata after sale phase only for once\\n     * @param _newBaseUri actual URI\\n     */\\n    function reveal(string memory _newBaseUri) public onlyOwner {\\n        if (state != STATE.PUBLIC) {\\n            revert WrongStateForReveal();\\n        } else if (isRevealed == true) {\\n            revert AlreadyRevealed();\\n        }\\n        isRevealed = true;\\n        BASE_URI = _newBaseUri;\\n    }\\n\\n    /**\\n     * @notice owner can changes the sale state\\n     * @dev airdrop phase must be finished to change the state\\n     * @param _index index of state (0: closed, 1: whitelist, 2: public)\\n     */\\n    function changeState(uint256 _index) public onlyOwner {\\n        if (totalSupply() < MAX_TOKENS_FOR_AIRDROP) {\\n            revert StillAirdropPhase();\\n        }\\n        if (_index == 0) {\\n            state = STATE.CLOSED;\\n        } else if (_index == 1) {\\n            state = STATE.WHITELIST;\\n        } else if (_index == 2) {\\n            state = STATE.PUBLIC;\\n        } else {\\n            revert InvalidInput();\\n        }\\n    }\\n\\n    /**\\n     * @notice owner can mint the tokens for airdrop before sale phases\\n     * @dev caller is owner but minter is '_to'\\n     * @dev '_setAirdropMintCounter' increases number of minted tokens of owner\\n     * in airdrop mint as auxiliary data\\n     * @param _to airdrop recipient\\n     * @param _amount token amount of airdrop\\n     */\\n\\n    function airdropMint(address _to, uint256 _amount) public onlyOwner {\\n        if (totalSupply() + _amount > MAX_TOKENS_FOR_AIRDROP) {\\n            revert MaxSupplyForAirdropExceeded();\\n        }\\n        _setAirdropMintCounter(\\n            _to,\\n            getAirdropMintCounter(_to) + uint32(_amount)\\n        );\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice whitelisted addressses can mint tokens for a certain ETH\\n     * within a certain limit during whitelist sale\\n     * @dev '_setWhitelistMintCounter' increases number of minted tokens of owner\\n     * in whitelist sale as auxiliary data\\n     * @param _amount token amount to mint\\n     */\\n    function whitelistSaleMint(\\n        uint256 _amount,\\n        bytes32[] calldata _merkleProof\\n    ) public payable onlyWhitelisted(_merkleProof) {\\n        if (state != STATE.WHITELIST) {\\n            revert NotWhitelistSalePhase();\\n        } else if (\\n            totalSupply() + _amount >\\n            MAX_TOKENS_FOR_WHITELIST + MAX_TOKENS_FOR_AIRDROP\\n        ) {\\n            revert MaxSupplyForWhitelistExceeded();\\n        } else if (\\n            uint256(getWhitelistMintCounter(msg.sender)) + _amount >\\n            MAX_AMOUNT_PER_WHITELIST\\n        ) {\\n            revert MaxAmountPerWhitelistExceeded();\\n        } else if (msg.value < _amount * WHITELIST_TOKEN_PRICE) {\\n            revert InsufficientETH();\\n        }\\n        _setWhitelistMintCounter(\\n            msg.sender,\\n            getWhitelistMintCounter(msg.sender) + uint32(_amount)\\n        );\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice any EOA address can mint tokens for a certain ETH\\n     * within a certain limit during public sale\\n     * @param _amount token amount to mint\\n     */\\n    function publicSaleMint(uint256 _amount) public payable onlyAccounts {\\n        if (state != STATE.PUBLIC) {\\n            revert NotPublicSalePhase();\\n        } else if (_amount > MAX_AMOUNT_PER_MINT) {\\n            revert MaxAmountPerMintExceeded();\\n        } else if (totalSupply() + _amount > MAX_TOKENS) {\\n            revert MaxSupplyExceeded();\\n        } else if (\\n            getPublicMintCounter(msg.sender) + _amount > MAX_AMOUNT_PER_ACCOUNT\\n        ) {\\n            revert MaxAmountPerAccountExceeded();\\n        } else if (msg.value < _amount * PUBLIC_TOKEN_PRICE) {\\n            revert InsufficientETH();\\n        }\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    ////////////////////////////////////\\n    // WORK IN PROGRESS\\n    ////////////////////////////////////\\n\\n    /**\\n     * @notice whitelisted addressses can mint tokens for a certain ETH\\n     * within a certain limit during whitelist sale\\n     * @dev '_setWhitelistMintCounter' increases number of minted tokens of owner\\n     * in whitelist sale as auxiliary data\\n     * @param _amount token amount to mint\\n     */\\n    function externalWhitelistSaleMint(\\n        address _to,\\n        uint256 _amount\\n    ) public onlyAdmins {\\n        if (state != STATE.WHITELIST) {\\n            revert NotWhitelistSalePhase();\\n        } else if (\\n            totalSupply() + _amount >\\n            MAX_TOKENS_FOR_WHITELIST + MAX_TOKENS_FOR_AIRDROP\\n        ) {\\n            revert MaxSupplyForWhitelistExceeded();\\n        }\\n        if (_to == address(0)) {\\n            _mint(msg.sender, _amount);\\n        } else {\\n            if (\\n                uint256(getWhitelistMintCounter(_to)) + _amount >\\n                MAX_AMOUNT_PER_WHITELIST\\n            ) {\\n                revert MaxAmountPerWhitelistExceeded();\\n            }\\n            _setWhitelistMintCounter(\\n                _to,\\n                getWhitelistMintCounter(_to) + uint32(_amount)\\n            );\\n            _mint(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice any EOA address can mint tokens for a certain ETH\\n     * within a certain limit during public sale\\n     * @param _amount token amount to mint\\n     */\\n    function externalPublicSaleMint(\\n        address _to,\\n        uint256 _amount\\n    ) public onlyAdmins {\\n        if (state != STATE.PUBLIC) {\\n            revert NotPublicSalePhase();\\n        } else if (_amount > MAX_AMOUNT_PER_MINT) {\\n            revert MaxAmountPerMintExceeded();\\n        } else if (totalSupply() + _amount > MAX_TOKENS) {\\n            revert MaxSupplyExceeded();\\n        }\\n        if (_to == address(0)) {\\n            _mint(msg.sender, _amount);\\n        } else {\\n            if (getPublicMintCounter(_to) + _amount > MAX_AMOUNT_PER_ACCOUNT) {\\n                revert MaxAmountPerAccountExceeded();\\n            }\\n            _mint(_to, _amount);\\n        }\\n    }\\n\\n    ///////////////////////////////////////\\n    ///////////////////////////////////////\\n    ///////////////////////////////////////\\n\\n    /**\\n     * @notice owner can withdraw the all balance to associated accounts at any time\\n     * @dev calls _withdraw function to withdraw assets\\n     */\\n    function withdrawAll() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0);\\n\\n        _withdraw(FOUNDER_1, (balance * 950) / 1000);\\n        _withdraw(COMMUNITY_WALLET, (balance * 50) / 1000);\\n\\n        if (address(this).balance > 0) {\\n            _withdraw(owner(), address(this).balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev withdraws the assets by low-level calls\\n     * @param _address destination address\\n     * @param _amount amount of assets\\n     */\\n    function _withdraw(address _address, uint256 _amount) private {\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice sets number of minted tokens of an address during airdrop\\n     * @dev airdrop counter is set at [0..31] bits of '_auxData'\\n     * ([192..223] bits of '_packedAddressData')\\n     * @param _account airdrop recipient\\n     * @param _amount total amount of airdrop\\n     */\\n    function _setAirdropMintCounter(address _account, uint32 _amount) internal {\\n        _setAux(_account, uint64(_amount));\\n    }\\n\\n    /**\\n     * @notice sets number of minted tokens of an address during whitelist mint\\n     * @dev whitelist mint counter is set at [32..63] bits of '_auxData'\\n     * ([224..255] bits of '_packedAddressData')\\n     * @param _account whitelist minter\\n     * @param _amount total amount of whitelist mint of '_account'\\n     */\\n    function _setWhitelistMintCounter(\\n        address _account,\\n        uint32 _amount\\n    ) internal {\\n        uint256 _bitpos = 32;\\n        uint64 _auxData = uint64((uint256(_amount) << _bitpos)) +\\n            uint64(getAirdropMintCounter(_account));\\n        _setAux(_account, _auxData);\\n    }\\n\\n    /**\\n     * @return token id of first token\\n     */\\n    function _startTokenId() internal view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @param _tokenId querying token id\\n     * @return token URI\\n     */\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view virtual override(ERC721A, IERC721A) returns (string memory) {\\n        require(\\n            _exists(_tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        if (_tokenId <= MAX_TOKENS_FOR_AIRDROP) {\\n            return\\n                bytes(AIRDROP_BASE_URI).length > 0\\n                    ? string(\\n                        abi.encodePacked(\\n                            AIRDROP_BASE_URI,\\n                            _tokenId.toString(),\\n                            \\\".json\\\"\\n                        )\\n                    )\\n                    : \\\"\\\";\\n        } else {\\n            if (isRevealed == false) {\\n                return\\n                    bytes(BASE_URI).length > 0\\n                        ? string(abi.encodePacked(BASE_URI, \\\"hidden\\\", \\\".json\\\"))\\n                        : \\\"\\\";\\n            }\\n\\n            return\\n                bytes(BASE_URI).length > 0\\n                    ? string(\\n                        abi.encodePacked(BASE_URI, _tokenId.toString(), \\\".json\\\")\\n                    )\\n                    : \\\"\\\";\\n        }\\n    }\\n\\n    /**\\n     * @dev inherits from ERC721A and bypass approval requests from rarible\\n     * @return true if the operator is rarible\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) public view override(ERC721A, IERC721A) returns (bool) {\\n        if (operator == address(raribleTransferProxy)) {\\n            return true;\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * @notice returns if an address whitelisted or not\\n     * by verifying merkle proof\\n     */\\n    function isWhitelisted(\\n        address _account,\\n        bytes32[] calldata _merkleProof\\n    ) public view returns (bool) {\\n        bytes32 leaf = keccak256(abi.encodePacked(_account));\\n        return MerkleProof.verify(_merkleProof, MERKLE_ROOT, leaf);\\n    }\\n\\n    /**\\n     * @notice returns total airdrop amount of an address\\n     * @dev returns [0..31] bits of '_auxData'\\n     * ([192..223] bits of '_packedAddressData')\\n     * @param _account querying address\\n     */\\n    function getAirdropMintCounter(\\n        address _account\\n    ) public view returns (uint32) {\\n        uint64 _auxData = _getAux(_account);\\n        return uint32(_auxData);\\n    }\\n\\n    /**\\n     * @notice returns total airdrop amount of an address\\n     * @dev returns [32..63] bits of '_auxData'\\n     * ([224..255] bits of '_packedAddressData')\\n     * @param _account querying address\\n     */\\n    function getWhitelistMintCounter(\\n        address _account\\n    ) public view returns (uint32) {\\n        uint64 _auxData = _getAux(_account);\\n        uint256 _bitpos = 32;\\n        return uint32(_auxData >> _bitpos);\\n    }\\n\\n    /**\\n     * @notice returns mint amounts during public sale of addresses\\n     * @dev (total minted) - (minted in whitelist sale) - (minted in airdrop)\\n     */\\n    function getPublicMintCounter(\\n        address _account\\n    ) public view returns (uint256) {\\n        return\\n            _numberMinted(_account) -\\n            uint256(getAirdropMintCounter(_account)) -\\n            uint256(getWhitelistMintCounter(_account));\\n    }\\n\\n    /**\\n     * @notice returns current state of sale\\n     */\\n    function currentState() public view returns (STATE) {\\n        return state;\\n    }\\n\\n    /**\\n     * @notice returns contract balance\\n     */\\n    function contractBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0x544a455aba761674cb7c46b794c2b85bc076d231eb177077347a40fa9caf65a1\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryable.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad83a36e9758f044317e9a5e2903bc49730b6d5de8fbe9a61b2f91fb4c2148c7\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xc14fc938aecdccee7edbd3a3ce60b6171cdc3da3345cfa6d288c268983c48942\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610200604052346200014457620000326200001962000376565b9c9b909b9a919a9992999893989794979695966200074b565b60405161410b62000c72823960805181818161136a0152818161210301526123e5015260a0518181816113bc01528181611ed201526122a9015260c051818181610efa01528181611c2b01528181611d6a01528181611eb10152818161228801526128ba015260e0518181816107150152611f9c015261010051818181610c3701526121c0015261012051818181611331015281816120a301526123a9015261014051818181610dbe01528181611f3f01526123170152610160518181816110ff01528181612163015261244b015261018051818181610e1201526124d001526101a05181610cfd01526101c0518181816112a1015261252501526101e051818181610a420152612d66015261410b90f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90601f01601f191681019081106001600160401b038211176200017e57604052565b62000148565b906200019b6200019360405190565b92836200015c565b565b805b036200014457565b905051906200019b826200019d565b6001600160a01b031690565b90565b6001600160a01b0381166200019f565b905051906200019b82620001c5565b6001600160401b0381116200017e5760208091020190565b90929192620002156200020f82620001e4565b62000184565b93818552602080860192028301928184116200014457915b8383106200023b5750505050565b602080916200024b8486620001d5565b8152019201916200022d565b9080601f8301121562000144578151620001c292602001620001fc565b9190916101c08184031262000144576200028f8382620001a7565b926200029f8160208401620001a7565b92604090620002b183838601620001a7565b93620002c18460608301620001a7565b93620002d18160808401620001a7565b93620002e18260a08501620001a7565b93620002f18360c08601620001a7565b93620003018460e08301620001a7565b9362000312816101008401620001d5565b9362000323826101208501620001d5565b9362000334836101408601620001d5565b9362000345846101608301620001d5565b9362000356816101808401620001a7565b936001806101a0850151921b0381116200014457620001c2920162000257565b6200039962004d7d803803806200038d8162000184565b92833981019062000274565b909192939495969798999a9b9c9d565b6001600160401b0381116200017e57602090601f01601f19160190565b90620003d66200020f83620003a9565b918252565b620003e7600b620003c6565b6a496c6b656c42656e6c696b60a81b602082015290565b620001c2620003db565b620004146002620003c6565b6124a160f11b602082015290565b620001c262000408565b9060ff60a01b9060a01b5b9181191691161790565b634e487b7160e01b5f52602160045260245ffd5b600311156200046057565b62000441565b906200019b8262000455565b620001c29062000466565b9062000491620001c2620004999262000472565b82546200042c565b9055565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015620004d4575b6020831014620004ce57565b6200049d565b91607f1691620004c2565b915f1960089290920291821b911b62000437565b620001c2620001c2620001c29290565b919062000518620001c26200049993620004f3565b908354620004df565b6200019b915f9162000503565b8181106200053a575050565b80620005495f60019362000521565b016200052e565b9190601f81116200056057505050565b620005726200019b935f5260205f2090565b906020601f84018190048301931062000596575b6020601f9091010401906200052e565b909150819062000586565b6002620005d56274652f60e81b92620005c86043620005c18354620004b1565b8362000550565b608781555f5260205f2090565b7f697066733a2f2f62616679626569686177706d677135766c6b7537673261616f81557f6375326532653766717a76716537717471346b6176326765326a79356f6a737160018201550155565b6200019b90620005a1565b9060ff9062000437565b906200064a620001c26200049992151590565b82546200062d565b634e487b7160e01b5f52601160045260245ffd5b919082018092116200067457565b62000652565b906001600160a01b039062000437565b620001c290620001b6906001600160a01b031682565b620001c2906200068a565b620001c290620006a0565b90620006ca620001c26200049992620006ab565b82546200067a565b620006e2620001c2620001c29290565b6001600160601b031690565b5f198114620006745760010190565b634e487b7160e01b5f52603260045260245ffd5b906200071b825190565b8110156200072d576020809102010190565b620006fd565b906200073f90620006ab565b5f5260205260405f2090565b9490999895919b9793620007a69b97939d9e9d620007ad8e6200078262000771620003fe565b6200077b62000422565b9062000885565b5f9e8f6200079281600a6200047d565b6200079e600c62000622565b600d62000637565b8d62000666565b87106200087357620008129d6200080c9c620007e79860805260a05260c05260e05261010052610120526101405261016052600b620006b6565b61018052826101a0526101c0526101e052620008056101f4620006d2565b9062000bcd565b620004f3565b6200081f620001c2845190565b8110156200086e5762000868906200086260016200085c600e6200085562000848868a62000711565b516001600160a01b031690565b9062000733565b62000637565b620006ee565b62000812565b509050565b60405163b4fa3fb360e01b8152600490fd5b9062000891916200089c565b6200019b3362000a07565b6200019b9182918291829182918291829190620009c1565b90620008be815190565b906001600160401b0382116200017e57620008e682620008df8554620004b1565b8562000550565b602090601f831160011462000923576200049992915f918362000917575b50505f19600883021c1916906002021790565b015190505f8062000904565b601f1983169162000937855f5260205f2090565b925f5b81811062000976575091600293918560019694106200095d575b50505002019055565b01515f196008601f8516021c191690555f808062000954565b919360206001819287870151815501950192016200093a565b906200019b91620008b4565b905f199062000437565b90620009b9620001c26200049992620004f3565b82546200099b565b90620009d3620009db9260026200098f565b60036200098f565b6200019b620009e962000c65565b5f620009a5565b620001c290620001b6565b620001c29054620009f0565b62000a13600a620009fb565b9062000a2181600a620006b6565b62000a5862000a517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093620006ab565b91620006ab565b9162000a6360405190565b5f90a3565b1562000a7057565b60405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608490fd5b620001b6620001c2620001c29290565b620001c29062000ac8565b1562000aeb57565b60405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606490fd5b620001c2604062000184565b906001600160a01b03199060a01b62000437565b620001c290620006e2906001600160601b031682565b9062000b7a620001c2620004999262000b50565b825462000b3c565b6200019b9162000bba9060209062000bac62000ba582516001600160a01b031690565b85620006b6565b01516001600160601b031690565b9062000b66565b906200019b9162000b82565b62000c506200019b9262000bfa62000be8620006e262000c58565b6001600160601b038316111562000a68565b62000c405f9362000c2562000c13620001b68762000ad8565b6001600160a01b038316141562000ae3565b62000c2f62000b30565b948501906001600160a01b03169052565b6001600160601b03166020830152565b600862000bc1565b620001c2612710620006d2565b620001c26001620004f356fe60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a714610370578063051bcd691461036b57806306fdde0314610366578063081812fc14610361578063095ea7b31461035c5780630a887cda146103575780630c3f6acf1461035257806318160ddd1461034d5780631dee5cd91461034857806322ad06701461034357806323b872dd1461033e578063271047bc146103395780632a55205a14610334578063314843131461032f57806342842e0e1461032a57806347992844146103255780634c2612471461032057806351e75e8b1461031b57806354214f69146103165780635a23dd99146103115780635bbb21771461030c5780636352211e1461030757806370a0823114610302578063715018a6146102fd578063763f8d12146102f85780638462151c146102f3578063853828b6146102ee57806385660e00146102e95780638b7afe2e146102e45780638da5cb5b146102df5780638ecff037146102da57806391245736146102d557806395d89b41146102d05780639845047b146102cb57806399a2557a146102c65780639b398f84146102c1578063a22cb465146102bc578063a8550e7e146102b7578063b00741cb146102b2578063b3ab66b0146102ad578063b88d4fde146102a8578063c19d93fb146102a3578063c23dc68f1461029e578063c87b56dd14610299578063cf6a374a14610294578063db4bfb641461028f578063dbddb26a1461028a578063e0cad9b114610285578063e985e9c514610280578063f2fde38b1461027b578063f413889714610276578063f47c84c514610271578063f5b0b8081461026c5763fa260355036103a0576113a7565b61138e565b611355565b61131c565b611304565b6112e8565b61128c565b611271565b6110ea565b6110cf565b611053565b61102c565b610fbc565b610f99565b610f36565b610f1e565b610ee5565b610ecc565b610e79565b610e5d565b610dfd565b610de2565b610da9565b610d8e565b610d3c565b610d21565b610ce8565b610cd0565b610ca9565b610c22565b610c0a565b610bef565b610bd4565b610bac565b610abd565b610a8b565b610a2d565b610a15565b610984565b61083d565b610824565b6107f5565b610796565b610782565b610739565b610700565b6106d5565b6106ae565b610632565b6105af565b61054a565b6104fc565b610456565b6103ce565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b036103a057565b5f80fd5b905035906103b182610375565b565b906020828203126103a0576103c7916103a4565b90565b9052565b346103a0576103fc6103e96103e43660046103b3565b611892565b6040515b91829182901515815260200190565b0390f35b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116610399565b905035906103b182610419565b906020828203126103a0576103c791610435565b346103a0576103fc61047161046c366004610442565b612ebb565b6040519182918263ffffffff909116815260200190565b5f9103126103a057565b5f5b8381106104a35750505f910152565b8181015183820152602001610494565b6104d46104dd6020936104e7936104c8815190565b80835293849260200190565b95869101610492565b601f01601f191690565b0190565b60208082526103c7929101906104b3565b346103a05761050c366004610488565b6103fc6105176131a5565b604051918291826104eb565b80610399565b905035906103b182610523565b906020828203126103a0576103c791610529565b346103a0576103fc610565610560366004610536565b613385565b6040519182918273ffffffffffffffffffffffffffffffffffffffff909116815260200190565b91906040838203126103a0576103c7906105a68185610435565b93602001610529565b6105c36105bd36600461058c565b906132bd565b604051005b909182601f830112156103a05781359167ffffffffffffffff83116103a05760200192602083028401116103a057565b9190916040818403126103a05761060f8382610529565b92602082013567ffffffffffffffff81116103a05761062e92016105c8565b9091565b6105c36106403660046105f8565b9161200b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003111561067d57565b610646565b906103b182610673565b6103c790610682565b6103ca9061068c565b6020810192916103b19190610695565b346103a0576106be366004610488565b6103fc6106c9612f17565b6040519182918261069e565b346103a0576106e5366004610488565b6103fc6106f0612f3f565b6040519182918290815260200190565b346103a057610710366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b346103a0576105c361074c36600461058c565b90611de6565b90916060828403126103a0576103c761076b8484610435565b936107798160208601610435565b93604001610529565b6105c3610790366004610752565b916134c9565b346103a0576103fc6104716107ac366004610442565b612e8c565b91906040838203126103a0576103c7906105a68185610529565b73ffffffffffffffffffffffffffffffffffffffff90911681526040810192916103b19160200152565b346103a05761080e6108083660046107b1565b906117a5565b906103fc61081b60405190565b928392836107cb565b346103a0576105c361083736600461058c565b90612488565b6105c361084b366004610752565b91613778565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f01601f1916810190811067ffffffffffffffff8211176108a057604052565b610851565b906103b16108b260405190565b928361087e565b67ffffffffffffffff81116108a057602090601f01601f19160190565b906108e86108e3836108b9565b6108a5565b918252565b6108f760436108d6565b7f697066733a2f2f6261667962656967356d6269696e69726e6464366d34336c3260208201527f6e6f3261343677636e6e7369686f64346f6f32687a6f6972356679786b6c777560408201527f63692f0000000000000000000000000000000000000000000000000000000000606082015290565b6103c76108ed565b6103c761096c565b6103c7610974565b346103a057610994366004610488565b6103fc61051761097c565b90825f939282370152565b909291926109ba6108e3826108b9565b938185526020850190828401116103a0576103b19261099f565b9080601f830112156103a0578160206103c7933591016109aa565b906020828203126103a057813567ffffffffffffffff81116103a0576103c792016109d4565b346103a0576105c3610a283660046109ef565b611bd0565b346103a057610a3d366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b6103c7916008021c5b60ff1690565b906103c79154610a66565b6103c75f600d610a75565b346103a057610a9b366004610488565b6103fc6103e9610a80565b9190916040818403126103a05761060f8382610435565b346103a0576103fc6103e9610ad3366004610aa6565b91612d23565b906020828203126103a057813567ffffffffffffffff81116103a05761062e92016105c8565b90610b1f610b18610b0e845190565b8084529260200190565b9260200190565b905f5b818110610b2f5750505090565b909192610b93610b8c6001928651805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff169082015260800190565b9460200190565b929101610b22565b60208082526103c792910190610aff565b346103a0576103fc610bc8610bc2366004610ad9565b90613d49565b60405191829182610b9b565b346103a0576103fc610565610bea366004610536565b6131b9565b346103a0576103fc6106f0610c05366004610442565b612f7c565b346103a057610c1a366004610488565b6105c3611434565b346103a057610c32366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b90610c6a610b18610b0e845190565b905f5b818110610c7a5750505090565b909192610c90610b8c6001928651815260200190565b929101610c6d565b60208082526103c792910190610c5b565b346103a0576103fc610cc4610cbf366004610442565b613fc9565b60405191829182610c98565b346103a057610ce0366004610488565b6105c361257f565b346103a057610cf8366004610488565b6103fc7f0000000000000000000000000000000000000000000000000000000000000000610565565b346103a057610d31366004610488565b6103fc6106f0612f21565b346103a057610d4c366004610488565b6103fc6105656113f3565b6103c7916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b906103c79154610d57565b6103c75f600b610d78565b346103a057610d9e366004610488565b6103fc610565610d83565b346103a057610db9366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b346103a057610df2366004610488565b6103fc6105176131af565b346103a057610e0d366004610488565b6103fc7f0000000000000000000000000000000000000000000000000000000000000000610565565b90916060828403126103a0576103c7610e4f8484610435565b936107798160208601610529565b346103a0576103fc610cc4610e73366004610e36565b91613db9565b346103a0576103fc6106f0610e8f366004610442565b612ee9565b801515610399565b905035906103b182610e94565b91906040838203126103a0576103c790610ec38185610435565b93602001610e9c565b346103a0576105c3610edf366004610ea9565b906133d5565b346103a057610ef5366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b346103a0576105c3610f31366004610536565b611cff565b6105c3610f44366004610536565b6121f4565b906080828203126103a057610f5e8183610435565b92610f6c8260208501610435565b92610f7a8360408301610529565b92606082013567ffffffffffffffff81116103a0576103c792016109d4565b6105c3610fa7366004610f49565b92919091613788565b6103c76014600a610a75565b346103a057610fcc366004610488565b6103fc6106c9610fb0565b6080810192916103b19190805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff16910152565b346103a0576103fc611047611042366004610536565b613b94565b60405191829182610fd7565b346103a0576103fc610517611069366004610536565b6128a7565b6104006103c76103c79273ffffffffffffffffffffffffffffffffffffffff1690565b6103c79061106e565b6103c790611091565b906110ad9061109a565b5f5260205260405f2090565b6103c7906110ca600e915f926110a3565b610a75565b346103a0576103fc6103e96110e5366004610442565b6110b9565b346103a0576110fa366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b906001600283049216801561119c575b602083101461119757565b61114f565b91607f169161118c565b80545f9392916111c26111b88361117c565b8085529360200190565b916001811690811561121157506001146111db57505050565b6111ec91929394505f5260205f2090565b915f925b8184106111fd5750500190565b8054848401526020909301926001016111f0565b92949550505060ff1916825215156020020190565b906103c7916111a6565b906103b161124a9261124160405190565b93848092611226565b038361087e565b905f10611261576103c790611230565b611123565b6103c75f600c611251565b346103a057611281366004610488565b6103fc610517611266565b346103a05761129c366004610488565b6103fc7f0000000000000000000000000000000000000000000000000000000000000000610565565b91906040838203126103a0576103c7906112df8185610435565b93602001610435565b346103a0576103fc6103e96112fe3660046112c5565b90612c4d565b346103a0576105c3611317366004610442565b6115af565b346103a05761132c366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b346103a057611365366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b346103a0576105c36113a136600461058c565b9061235e565b346103a0576113b7366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b6103c790610400565b6103c790546113e0565b6103c7600a6113e9565b6114056114aa565b6103b1611423565b6104006103c76103c79290565b6103c79061140d565b6103b161142f5f61141a565b6115f5565b6103b16113fd565b1561144357565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152806114a6600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6103b16114b56113f3565b6114db6114c133610400565b9173ffffffffffffffffffffffffffffffffffffffff1690565b1461143c565b6103b1906114ed6114aa565b61157e565b156114f957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b6103b19061142f6115916104005f61141a565b73ffffffffffffffffffffffffffffffffffffffff831614156114f2565b6103b1906114e1565b9073ffffffffffffffffffffffffffffffffffffffff905b9181191691161790565b906115ea6103c76115f19261109a565b82546115b8565b9055565b6115ff600a6113e9565b9061160b81600a6115da565b61163e6116387f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361109a565b9161109a565b9161164860405190565b80805b0390a3565b6103c76103c76103c79290565b906110ad90611650565b6103c79060a01c5b6bffffffffffffffffffffffff1690565b6103c79054611667565b6103c760406108a5565b906103b16116d55f6116a461168a565b946116cf6116b38383016113e9565b73ffffffffffffffffffffffffffffffffffffffff1687840152565b01611680565b6bffffffffffffffffffffffff166020840152565b6103c790611694565b6103c76103c76103c7926bffffffffffffffffffffffff1690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9190611746565b9290565b9180830292818404149015171561175957565b61170e565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b90611795565b9190565b9081156117a0570490565b61175e565b6117be6117c3919392936117b65f90565b50600961165d565b6116ea565b916117e2835173ffffffffffffffffffffffffffffffffffffffff1690565b905f916117f46114c16104008561141a565b14611859575b9061183d61182c6117919361182661182160208901516bffffffffffffffffffffffff1690565b6116f3565b9061173b565b611837611821611887565b9061178b565b93015173ffffffffffffffffffffffffffffffffffffffff1690565b92506117919061183d61182c61186f60086116ea565b9592935050506117fa565b61166f6103c76103c79290565b6103c761271061187a565b61189b8161310e565b9081156118a6575090565b6103c791507f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216149081156118fb575090565b6103c7915061194b7f01ffc9a7000000000000000000000000000000000000000000000000000000005b917fffffffff000000000000000000000000000000000000000000000000000000001690565b1490565b6103b19061195b6114aa565b611b26565b6103c79060a01c610a6f565b6103c79054611960565b6103c790610a6f565b6103c79054611976565b9060ff906115d0565b906119a26103c76115f192151590565b8254611989565b919060086115d09102916119bd5f19841b90565b921b90565b91906119d36103c76115f193611650565b9083546119a9565b6103b1915f916119c2565b8181106119f1575050565b806119fe5f6001936119db565b016119e6565b9190601f8111611a1357505050565b611a236103b1935f5260205f2090565b906020601f840181900483019310611a45575b6020601f9091010401906119e6565b9091508190611a36565b90611a58815190565b9067ffffffffffffffff82116108a057611a7c82611a76855461117c565b85611a04565b602090601f8311600114611ab5576115f192915f9183611aaa575b50505f19600883021c1916906002021790565b015190505f80611a97565b601f19831691611ac8855f5260205f2090565b925f5b818110611b0457509160029391856001969410611aec575b50505002019055565b01515f196008601f8516021c191690555f8080611ae3565b91936020600181928787015181550195019201611acb565b906103b191611a4f565b611b30600a61196c565b611b43611b3d6002610682565b91610682565b14611b73576040517fede69771000000000000000000000000000000000000000000000000000000008152600490fd5b611b7d600d61197f565b611b8960015b91151590565b14611ba5576103b190611b9e6001600d611992565b600c611b1c565b6040517fa89ac151000000000000000000000000000000000000000000000000000000008152600490fd5b6103b19061194f565b6103b190611be56114aa565b611c21565b9074ff00000000000000000000000000000000000000009060a01b6115d0565b90611c1a6103c76115f19261068c565b8254611bea565b611c29612f3f565b7f000000000000000000000000000000000000000000000000000000000000000011611cd4575f611c5981611650565b8203611c6b576103b19150600a611c0a565b506001611c7781611650565b8203611c89576103b19150600a611c0a565b50600290611c9961179183611650565b03611ca9576103b190600a611c0a565b6040517fb4fa3fb3000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fec2c6727000000000000000000000000000000000000000000000000000000008152600490fd5b6103b190611bd9565b906103b191611d156114aa565b611d56565b9190820180921161175957565b611d346103c76103c79290565b63ffffffff1690565b63ffffffff9081169116019063ffffffff821161175957565b90611d6881611d63612f3f565b611d1a565b7f000000000000000000000000000000000000000000000000000000000000000010611dbb5781611db6611db0611da16103b195612e8c565b611daa85611d27565b90611d3d565b8261261a565b61393b565b6040517fca586aa8000000000000000000000000000000000000000000000000000000008152600490fd5b906103b191611d08565b9190611e04611e00838333612d23565b1590565b611e11576103b192611e4f565b6040517f48df50e8000000000000000000000000000000000000000000000000000000008152600490fd5b6103c76103c76103c79263ffffffff1690565b915050611e5c600a61196c565b611e69611b3d6001610682565b14611e9a576040515b7f5b77ceac000000000000000000000000000000000000000000000000000000008152600490fd5b611ea681611d63612f3f565b611ef66117916103c77f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611d1a565b1115611f28576040515b7fde42be6c000000000000000000000000000000000000000000000000000000008152600490fd5b611f3d81611d63611f3833612ebb565b611e3c565b7f00000000000000000000000000000000000000000000000000000000000000001015611f90576040515b7f37ac80a2000000000000000000000000000000000000000000000000000000008152600490fd5b34611fc16117916103c77f00000000000000000000000000000000000000000000000000000000000000008561173b565b10611fe0576103b19033611db6611fda611da183612ebb565b8261267f565b6040517f6a12f104000000000000000000000000000000000000000000000000000000008152600490fd5b906103b19291611df0565b33612020326114c1565b0361202e576103b190612059565b6040517fea8370b0000000000000000000000000000000000000000000000000000000008152600490fd5b612063600a61196c565b612070611b3d6002610682565b146120a1576040515b7faf1fd675000000000000000000000000000000000000000000000000000000008152600490fd5b7f00000000000000000000000000000000000000000000000000000000000000008111156120f5576040515b7f6b350169000000000000000000000000000000000000000000000000000000008152600490fd5b61210181611d63612f3f565b7f00000000000000000000000000000000000000000000000000000000000000001015612154576040515b7f8a164f63000000000000000000000000000000000000000000000000000000008152600490fd5b61216181611d6333612ee9565b7f000000000000000000000000000000000000000000000000000000000000000010156121b4576040515b7f2fa72bd8000000000000000000000000000000000000000000000000000000008152600490fd5b346121e56117916103c77f00000000000000000000000000000000000000000000000000000000000000008561173b565b10611fe0576103b1903361393b565b6103b190612016565b90612214611e0061220f33600e6110a3565b61197f565b612221576103b19161224c565b6040517f55098f27000000000000000000000000000000000000000000000000000000008152600490fd5b90612257600a61196c565b612264611b3d6001610682565b1461227157604051611e72565b61227d81611d63612f3f565b6122cd6117916103c77f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611d1a565b11612356576122de6104005f61141a565b73ffffffffffffffffffffffffffffffffffffffff831603612305576103b191503361393b565b61231581611d63611f3885612ebb565b7f00000000000000000000000000000000000000000000000000000000000000001061234e5781611db6611fda611da16103b195612ebb565b604051611f68565b604051611f00565b906103b1916121fd565b9061237a611e0061220f33600e6110a3565b612221576103b1919061238d600a61196c565b61239a611b3d6002610682565b146123a757604051612079565b7f00000000000000000000000000000000000000000000000000000000000000008111156123d7576040516120cd565b6123e381611d63612f3f565b7f000000000000000000000000000000000000000000000000000000000000000010612480576124156104005f61141a565b73ffffffffffffffffffffffffffffffffffffffff83160361243c576103b191503361393b565b61244981611d6384612ee9565b7f000000000000000000000000000000000000000000000000000000000000000010612478576103b19161393b565b60405161218c565b60405161212c565b906103b191612368565b61249a6114aa565b6103b16124a9565b156103a057565b6124b23061109a565b5f61255582316124cb6124c484611650565b82116124a2565b6125177f000000000000000000000000000000000000000000000000000000000000000061251d6125066125006103b6611650565b8561173b565b916125176103e89361183785611650565b906125a5565b61183761254f7f0000000000000000000000000000000000000000000000000000000000000000946118266032611650565b91611650565b612563611791833192611650565b1161256b5750565b6103b1906125776113f3565b9031906125a5565b6103b1612492565b3d156125a0576125963d6108d6565b903d5f602084013e565b606090565b5f80916125c9936125b560405190565b90818003925af16125c4612587565b501590565b6125cf57565b6040517f90b8ec18000000000000000000000000000000000000000000000000000000008152600490fd5b61260d6103c76103c79263ffffffff1690565b67ffffffffffffffff1690565b6126266103b1926125fa565b90613097565b6103c79061263d6117916103c79490565b901b90565b61260d6103c76103c79290565b61266c9067ffffffffffffffff165b9167ffffffffffffffff1690565b019067ffffffffffffffff821161175957565b6126266126a96126a46103b19461269f6126996020611650565b91611e3c565b61262c565b612642565b6126ba6126b584612e8c565b6125fa565b9061264f565b156126c757565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b6103c7905461117c565b6103c75f6108d6565b6103c7612756565b80545f93929161277d6127798361117c565b9390565b91600181169081156127cb575060011461279657505050565b6127a791929394505f5260205f2090565b5f905b8382106127b75750500190565b6001816020925484860152019101906127aa565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001683525050811515909102019150565b61280c612835916103c793612767565b7f68696464656e0000000000000000000000000000000000000000000000000000815260060190565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000815260050190565b6104e761287692602092612870815190565b94859290565b93849101610492565b916128906103c79361283593612767565b9061285e565b916128906103c7936128359361285e565b6128b86128b38261344d565b6126c0565b7f0000000000000000000000000000000000000000000000000000000000000000811161294b576128f16128ed6103c7610974565b5190565b6128fd6117915f611650565b1115612942576129366103c76103c79261291e612918610974565b91612a19565b9061292860405190565b938492602084019283612896565b9081038252038261087e565b506103c761275f565b612955600d61197f565b5f9061296082611b83565b146129b857600c9061297d6117916129778461274c565b92611650565b11156129ae576103c7612936916129966103c794612a19565b906129a060405190565b93849260208401928361287f565b50506103c761275f565b600c91506129cb6117916129778461274c565b1115612942576103c7906103c76129e160405190565b80926129366020830191826127fc565b369037565b906103b1612a0c612a06846108d6565b936108b9565b601f1901602084016129f1565b612a2281612aaa565b90612a326001926104e784611650565b9180612a3d846129f6565b936020018401905b612a50575b50505090565b612a8a905f1901927f3031323334353637383961626364656600000000000000000000000000000000600a82061a8453611837600a611650565b9081612a986117915f611650565b14612aa557909181612a45565b612a4a565b612ab35f611650565b907a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000612ad981611650565b821015612c2b575b506d04ee2d6d415b85acef8100000000612afa81611650565b821015612c09575b50662386f26fc10000612b1481611650565b821015612be7575b506305f5e100612b2b81611650565b821015612bc5575b50612710612b4081611650565b821015612ba3575b506064612b5481611650565b821015612b81575b50612b6a611791600a611650565b1015612b735790565b6103c7906104e76001611650565b612b9c91611837612b9192611650565b916104e76002611650565b905f612b5c565b612bbe91611837612bb392611650565b916104e76004611650565b905f612b48565b612be091611837612bd592611650565b916104e76008611650565b905f612b33565b612c0291611837612bf792611650565b916104e76010611650565b905f612b1c565b612c2491611837612c1992611650565b916104e76020611650565b905f612b02565b612c4691611837612c3b92611650565b916104e76040611650565b905f612ae1565b90612c5b610400600b6113e9565b73ffffffffffffffffffffffffffffffffffffffff821614612c80576103c791613433565b5050600190565b6103ca9073ffffffffffffffffffffffffffffffffffffffff1660601b90565b6104e781601493612c87565b67ffffffffffffffff81116108a05760208091020190565b90929192612cdb6108e382612cb3565b93818552602080860192028301928184116103a057915b838310612cff5750505050565b60208091612d0d8486610529565b815201920191612cf2565b6103c7913691612ccb565b90612d8b6103c79392612d335f90565b50612d50612d4060405190565b8092612936602083019182612ca7565b612d62612d5b825190565b9160200190565b20927f000000000000000000000000000000000000000000000000000000000000000092612d18565b61174261194b929361179192612d9e5f90565b50612dfe565b5f1981146117595760010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b90612de8825190565b811015612df9576020809102010190565b612db2565b612e075f611650565b915b612e146103c7835190565b831015612e4657612e3a612e4091612e34612e2f8686612ddf565b6128ed565b90612e4c565b92612da4565b91612e09565b91505090565b81811015612e6557906103c7915f5260205260405f2090565b6103c7915f5260205260405f2090565b611d346103c76103c79267ffffffffffffffff1690565b612ea06103c791612e9a5f90565b5061303a565b612e75565b61260d90612eb661265e6103c79490565b901c90565b612ea0612ecc6103c792612e9a5f90565b612ed66020611650565b90612ea5565b9190820391821161175957565b6103c790612f0b611f38612f11612eff84613009565b612f0b611f3886612e8c565b90612edc565b92612ebb565b6103c7600a61196c565b612f2a3061109a565b3190565b6103c79081565b6103c79054612f2e565b6103c7612f5d612f4e5f612f35565b612f586001612f35565b900390565b612f585b6103c76001611650565b6103c767ffffffffffffffff611650565b612f886104005f61141a565b73ffffffffffffffffffffffffffffffffffffffff821614612fc357612fb2612fb79160056110a3565b612f35565b612fbf612f6b565b1690565b6040517f8f4eb604000000000000000000000000000000000000000000000000000000008152600490fd5b6103c76040611650565b6103c790612eb66117916103c79490565b613022612fb2612fb79261301a5f90565b5060056110a3565b61302a612fee565b90612ff8565b6103c760c0611650565b6126a461304e612fb26103c79361301a5f90565b61302a613030565b6103c777ffffffffffffffffffffffffffffffffffffffffffffffff611650565b905f19906115d0565b906130906103c76115f192611650565b8254613077565b906130d16103b1926005926130ca6130b2612fb284876110a3565b6130ba613056565b16916130c4613030565b9061262c565b17926110a3565b613080565b6130e96130e36103c79290565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61311b6301ffc9a76130d6565b7fffffffff00000000000000000000000000000000000000000000000000000000821614908115613163575b8115613151575090565b905061194b611925635b5e139f6130d6565b90506131726380ac58cd6130d6565b7fffffffff0000000000000000000000000000000000000000000000000000000082161490613147565b6103c790611230565b6103c7600261319c565b6103c7600361319c565b6131d56131d06103c7926131ca5f90565b50613200565b61140d565b611091565b6103c77c0100000000000000000000000000000000000000000000000000000000611650565b90819061320b612f61565b83101561323e575b6040517fdf2d9b42000000000000000000000000000000000000000000000000000000008152600490fd5b61324a6103c75f612f35565b83101561321357613260612fb26004948561165d565b806132696131da565b165f9061327861179183611650565b14613284575050613213565b92905b61329084611650565b81036132b557505f1901916132906132ab612fb2858761165d565b9193919050613287565b925050915090565b906132c7816131b9565b913373ffffffffffffffffffffffffffffffffffffffff84168103613343575b506132fe815f6132f885600661165d565b016115da565b61333461297761332e7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259561109a565b9261109a565b9261333e60405190565b5f90a4565b611e006133509185612c4d565b61335a575f6132e7565b6040517fcfb3b942000000000000000000000000000000000000000000000000000000008152600490fd5b613391611e008261344d565b6133aa575f6133a46103c792600661165d565b016113e9565b6040517fcf4700e4000000000000000000000000000000000000000000000000000000008152600490fd5b336133f3836133ee846133e98560076110a3565b6110a3565b611992565b61164b6134296134237f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319361109a565b9361109a565b936103ed60405190565b6103c7916133e961220f926134455f90565b5060076110a3565b613455612f61565b811015908161348d575b81613468575090565b6134789150612fb290600461165d565b6134806131da565b1661194b6117915f611650565b905061349b6103c75f612f35565b81109061345f565b6103c77c0200000000000000000000000000000000000000000000000000000000611650565b91906134d482613200565b6134e06131d58261140d565b6134ff73ffffffffffffffffffffffffffffffffffffffff86166114c1565b036137045761350d8361375c565b9091903361351f611e0082898561372f565b6136c2575b505f926135336104008561141a565b73ffffffffffffffffffffffffffffffffffffffff86161461369757839161368f575b50506135986135868460056133e961356e8a836110a3565b61358061357a82612f35565b5f190190565b90613080565b61358061359282612f35565b60010190565b6135a06134a3565b6135d16135ae838689613b1d565b82178573ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b906135e26004926130d1888561165d565b82166135f061179185611650565b14613629575b50505061333461297761332e7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9561109a565b61363b6136366001611650565b860190565b92613649612fb2858461165d565b61365561179183611650565b14613661575b506135f6565b6103c761366d91612f35565b830361367a575b8061365b565b613687926130d19161165d565b5f8080613674565b55815f613556565b6040517fea553b34000000000000000000000000000000000000000000000000000000008152600490fd5b611e006136cf9188612c4d565b6136d9575f613524565b6040517f59c896be000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fa1148100000000000000000000000000000000000000000000000000000000008152600490fd5b919073ffffffffffffffffffffffffffffffffffffffff809161374f5f90565b5016911691821491141790565b6103c76137729161376a5f90565b50600661165d565b90815490565b90916103b19261378661275f565b925b919290926137978185856134c9565b833b6137a56117915f611650565b036137b1575b50505050565b6137be93611e0093613869565b6137cb575f8080806137ab565b6040515b7fd1a57ed6000000000000000000000000000000000000000000000000000000008152600490fd5b905051906103b182610375565b906020828203126103a0576103c7916137f7565b73ffffffffffffffffffffffffffffffffffffffff91821681529116602082015260408101919091526080606082018190526103c7929101906104b3565b6130e96130e36103c79263ffffffff1690565b9093929160209061388261387d5f9761109a565b61109a565b63150b7a02935f336138b261389660405190565b988996879586946138a78c60e01b90565b865260048601613818565b03925af15f928161390b575b506138f857505060016138cd57565b6138d5612587565b80516138e36117915f611650565b036138f0576040516137cf565b805190602001fd5b61194b919293506130e961192591613856565b61392d91935060203d8111613934575b613925818361087e565b810190613804565b915f6138be565b503d61391b565b9190916139475f612f35565b925f9061395382611650565b8114613ac15784613a15849273ffffffffffffffffffffffffffffffffffffffff60019283926139b86139a0613987612fee565b61399a61399388611650565b918261262c565b17830290565b6135806139ae8a60056110a3565b916104e783612f35565b613a10613a046001831460e11b6139e26139d18c61141a565b6139da8d611650565b9b8c91613b1d565b178b73ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b6130d160049d8e61165d565b850190565b9616928084877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4015b858103613a9257505014613a5a576103b1929350613080565b6114a684613a6760405190565b7f2e076300000000000000000000000000000000000000000000000000000000008152918291820190565b80829184877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a401613a41565b6040517fb562e8dd000000000000000000000000000000000000000000000000000000008152600490fd5b6103c760e8611650565b613b036103c76103c79290565b62ffffff1690565b6103c76103c76103c79262ffffff1690565b613b5161269f916103c79493613b305f90565b50613b4b613b46613b3f613aec565b8097612ff8565b613af6565b91613b56565b613b0b565b5050506103c75f90565b6103c760806108a5565b613b72613b60565b5f8082526020820181905260408201819052606082015290565b6103c7613b6a565b613b9c613b8c565b50613ba5613b8c565b613bb06103c7612f61565b82108015613bec575b613be75750613bc781613c1d565b90613bd56040830151151590565b613be3576103c79150613c09565b5090565b905090565b50613bf86103c7613c00565b821015613bb9565b6103c75f612f35565b613c186103c7916131ca613b8c565b613c41565b613c18612fb26103c792613c2f613b8c565b50600461165d565b6103c760a0611650565b906103b1613c4d613b8c565b6060613cd2613b468396613c80613c666131d58361140d565b73ffffffffffffffffffffffffffffffffffffffff168652565b613ca8613c976126a4613c91613c37565b84612ff8565b67ffffffffffffffff166020870152565b613cca613cb36131da565b8216613cc16117915f611650565b14156040870152565b61302a613aec565b62ffffff16910152565b906108e86108e383612cb3565b5f5b828110613cf757505050565b602090613d02613b8c565b8184015201613ceb565b906103b1613d22613d1c84613cdc565b93612cb3565b601f190160208401613ce9565b9190811015612df9576020020190565b356103c781610523565b91908092613d5684613d0c565b925f5b855b8114613da157613d9a81613d7e611042613d79613d5b958989613d2f565b613d3f565b613d888289612ddf565b52613d938188612ddf565b5060010190565b9050613d59565b509350505090565b906103b1612a0c613d1c84613cdc565b9082811015613f9e575f91613dcc613c00565b613dd4612f61565b808410613f96575b50808511613f8e575b50613def81612f7c565b84831015613f7f57828503818110613f77575b505b613e0d81613da9565b955f91613e1983611650565b8114613f6e57613e2885613b94565b945f95613e3b611e006040830151151590565b613f4b575b505b875b81141580613f41575b15613f345783613e5c82613c1d565b6040810151613f255701805173ffffffffffffffffffffffffffffffffffffffff16613e8d6114c16104008861141a565b03613f06575b508873ffffffffffffffffffffffffffffffffffffffff861673ffffffffffffffffffffffffffffffffffffffff881614613ed9575b50613e44906001015b9050613e42565b9681613efd613e4493613efa84613ef4613ed2969160010190565b9c612ddf565b52565b91505088613ec9565b5173ffffffffffffffffffffffffffffffffffffffff1695505f613e93565b5050613ed2613e449160010190565b5050959450505050815290565b5081871415613e4d565b84015173ffffffffffffffffffffffffffffffffffffffff169550613e44613e40565b50945050505050565b90505f613e02565b50613f895f611650565b613e04565b93505f613de5565b92505f613ddc565b6040517f32c1995a000000000000000000000000000000000000000000000000000000008152600490fd5b5f80613fd483612f7c565b92613fde84613da9565b94613fe7613b8c565b50613ff0612f61565b855b85146140cd5761400181613c1d565b60408101516140c057805173ffffffffffffffffffffffffffffffffffffffff16905f916140346114c16104008561141a565b0361409b575b5050614082613ff2916140608573ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8716146140895760010190565b9050613ff0565b61359281613efa60018a01998c612ddf565b015173ffffffffffffffffffffffffffffffffffffffff169350614082613ff261403a565b50613ff290600101614082565b50935050505056fea26469706673582212205eb9ba1265eed78e1baa596fe692e5fbd140aa928ba00a6dbd0e3f84a409516a64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a714610370578063051bcd691461036b57806306fdde0314610366578063081812fc14610361578063095ea7b31461035c5780630a887cda146103575780630c3f6acf1461035257806318160ddd1461034d5780631dee5cd91461034857806322ad06701461034357806323b872dd1461033e578063271047bc146103395780632a55205a14610334578063314843131461032f57806342842e0e1461032a57806347992844146103255780634c2612471461032057806351e75e8b1461031b57806354214f69146103165780635a23dd99146103115780635bbb21771461030c5780636352211e1461030757806370a0823114610302578063715018a6146102fd578063763f8d12146102f85780638462151c146102f3578063853828b6146102ee57806385660e00146102e95780638b7afe2e146102e45780638da5cb5b146102df5780638ecff037146102da57806391245736146102d557806395d89b41146102d05780639845047b146102cb57806399a2557a146102c65780639b398f84146102c1578063a22cb465146102bc578063a8550e7e146102b7578063b00741cb146102b2578063b3ab66b0146102ad578063b88d4fde146102a8578063c19d93fb146102a3578063c23dc68f1461029e578063c87b56dd14610299578063cf6a374a14610294578063db4bfb641461028f578063dbddb26a1461028a578063e0cad9b114610285578063e985e9c514610280578063f2fde38b1461027b578063f413889714610276578063f47c84c514610271578063f5b0b8081461026c5763fa260355036103a0576113a7565b61138e565b611355565b61131c565b611304565b6112e8565b61128c565b611271565b6110ea565b6110cf565b611053565b61102c565b610fbc565b610f99565b610f36565b610f1e565b610ee5565b610ecc565b610e79565b610e5d565b610dfd565b610de2565b610da9565b610d8e565b610d3c565b610d21565b610ce8565b610cd0565b610ca9565b610c22565b610c0a565b610bef565b610bd4565b610bac565b610abd565b610a8b565b610a2d565b610a15565b610984565b61083d565b610824565b6107f5565b610796565b610782565b610739565b610700565b6106d5565b6106ae565b610632565b6105af565b61054a565b6104fc565b610456565b6103ce565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b036103a057565b5f80fd5b905035906103b182610375565b565b906020828203126103a0576103c7916103a4565b90565b9052565b346103a0576103fc6103e96103e43660046103b3565b611892565b6040515b91829182901515815260200190565b0390f35b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116610399565b905035906103b182610419565b906020828203126103a0576103c791610435565b346103a0576103fc61047161046c366004610442565b612ebb565b6040519182918263ffffffff909116815260200190565b5f9103126103a057565b5f5b8381106104a35750505f910152565b8181015183820152602001610494565b6104d46104dd6020936104e7936104c8815190565b80835293849260200190565b95869101610492565b601f01601f191690565b0190565b60208082526103c7929101906104b3565b346103a05761050c366004610488565b6103fc6105176131a5565b604051918291826104eb565b80610399565b905035906103b182610523565b906020828203126103a0576103c791610529565b346103a0576103fc610565610560366004610536565b613385565b6040519182918273ffffffffffffffffffffffffffffffffffffffff909116815260200190565b91906040838203126103a0576103c7906105a68185610435565b93602001610529565b6105c36105bd36600461058c565b906132bd565b604051005b909182601f830112156103a05781359167ffffffffffffffff83116103a05760200192602083028401116103a057565b9190916040818403126103a05761060f8382610529565b92602082013567ffffffffffffffff81116103a05761062e92016105c8565b9091565b6105c36106403660046105f8565b9161200b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003111561067d57565b610646565b906103b182610673565b6103c790610682565b6103ca9061068c565b6020810192916103b19190610695565b346103a0576106be366004610488565b6103fc6106c9612f17565b6040519182918261069e565b346103a0576106e5366004610488565b6103fc6106f0612f3f565b6040519182918290815260200190565b346103a057610710366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b346103a0576105c361074c36600461058c565b90611de6565b90916060828403126103a0576103c761076b8484610435565b936107798160208601610435565b93604001610529565b6105c3610790366004610752565b916134c9565b346103a0576103fc6104716107ac366004610442565b612e8c565b91906040838203126103a0576103c7906105a68185610529565b73ffffffffffffffffffffffffffffffffffffffff90911681526040810192916103b19160200152565b346103a05761080e6108083660046107b1565b906117a5565b906103fc61081b60405190565b928392836107cb565b346103a0576105c361083736600461058c565b90612488565b6105c361084b366004610752565b91613778565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f01601f1916810190811067ffffffffffffffff8211176108a057604052565b610851565b906103b16108b260405190565b928361087e565b67ffffffffffffffff81116108a057602090601f01601f19160190565b906108e86108e3836108b9565b6108a5565b918252565b6108f760436108d6565b7f697066733a2f2f6261667962656967356d6269696e69726e6464366d34336c3260208201527f6e6f3261343677636e6e7369686f64346f6f32687a6f6972356679786b6c777560408201527f63692f0000000000000000000000000000000000000000000000000000000000606082015290565b6103c76108ed565b6103c761096c565b6103c7610974565b346103a057610994366004610488565b6103fc61051761097c565b90825f939282370152565b909291926109ba6108e3826108b9565b938185526020850190828401116103a0576103b19261099f565b9080601f830112156103a0578160206103c7933591016109aa565b906020828203126103a057813567ffffffffffffffff81116103a0576103c792016109d4565b346103a0576105c3610a283660046109ef565b611bd0565b346103a057610a3d366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b6103c7916008021c5b60ff1690565b906103c79154610a66565b6103c75f600d610a75565b346103a057610a9b366004610488565b6103fc6103e9610a80565b9190916040818403126103a05761060f8382610435565b346103a0576103fc6103e9610ad3366004610aa6565b91612d23565b906020828203126103a057813567ffffffffffffffff81116103a05761062e92016105c8565b90610b1f610b18610b0e845190565b8084529260200190565b9260200190565b905f5b818110610b2f5750505090565b909192610b93610b8c6001928651805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff169082015260800190565b9460200190565b929101610b22565b60208082526103c792910190610aff565b346103a0576103fc610bc8610bc2366004610ad9565b90613d49565b60405191829182610b9b565b346103a0576103fc610565610bea366004610536565b6131b9565b346103a0576103fc6106f0610c05366004610442565b612f7c565b346103a057610c1a366004610488565b6105c3611434565b346103a057610c32366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b90610c6a610b18610b0e845190565b905f5b818110610c7a5750505090565b909192610c90610b8c6001928651815260200190565b929101610c6d565b60208082526103c792910190610c5b565b346103a0576103fc610cc4610cbf366004610442565b613fc9565b60405191829182610c98565b346103a057610ce0366004610488565b6105c361257f565b346103a057610cf8366004610488565b6103fc7f0000000000000000000000000000000000000000000000000000000000000000610565565b346103a057610d31366004610488565b6103fc6106f0612f21565b346103a057610d4c366004610488565b6103fc6105656113f3565b6103c7916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b906103c79154610d57565b6103c75f600b610d78565b346103a057610d9e366004610488565b6103fc610565610d83565b346103a057610db9366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b346103a057610df2366004610488565b6103fc6105176131af565b346103a057610e0d366004610488565b6103fc7f0000000000000000000000000000000000000000000000000000000000000000610565565b90916060828403126103a0576103c7610e4f8484610435565b936107798160208601610529565b346103a0576103fc610cc4610e73366004610e36565b91613db9565b346103a0576103fc6106f0610e8f366004610442565b612ee9565b801515610399565b905035906103b182610e94565b91906040838203126103a0576103c790610ec38185610435565b93602001610e9c565b346103a0576105c3610edf366004610ea9565b906133d5565b346103a057610ef5366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b346103a0576105c3610f31366004610536565b611cff565b6105c3610f44366004610536565b6121f4565b906080828203126103a057610f5e8183610435565b92610f6c8260208501610435565b92610f7a8360408301610529565b92606082013567ffffffffffffffff81116103a0576103c792016109d4565b6105c3610fa7366004610f49565b92919091613788565b6103c76014600a610a75565b346103a057610fcc366004610488565b6103fc6106c9610fb0565b6080810192916103b19190805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff16910152565b346103a0576103fc611047611042366004610536565b613b94565b60405191829182610fd7565b346103a0576103fc610517611069366004610536565b6128a7565b6104006103c76103c79273ffffffffffffffffffffffffffffffffffffffff1690565b6103c79061106e565b6103c790611091565b906110ad9061109a565b5f5260205260405f2090565b6103c7906110ca600e915f926110a3565b610a75565b346103a0576103fc6103e96110e5366004610442565b6110b9565b346103a0576110fa366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b906001600283049216801561119c575b602083101461119757565b61114f565b91607f169161118c565b80545f9392916111c26111b88361117c565b8085529360200190565b916001811690811561121157506001146111db57505050565b6111ec91929394505f5260205f2090565b915f925b8184106111fd5750500190565b8054848401526020909301926001016111f0565b92949550505060ff1916825215156020020190565b906103c7916111a6565b906103b161124a9261124160405190565b93848092611226565b038361087e565b905f10611261576103c790611230565b611123565b6103c75f600c611251565b346103a057611281366004610488565b6103fc610517611266565b346103a05761129c366004610488565b6103fc7f0000000000000000000000000000000000000000000000000000000000000000610565565b91906040838203126103a0576103c7906112df8185610435565b93602001610435565b346103a0576103fc6103e96112fe3660046112c5565b90612c4d565b346103a0576105c3611317366004610442565b6115af565b346103a05761132c366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b346103a057611365366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b346103a0576105c36113a136600461058c565b9061235e565b346103a0576113b7366004610488565b6103fc7f00000000000000000000000000000000000000000000000000000000000000006106f0565b6103c790610400565b6103c790546113e0565b6103c7600a6113e9565b6114056114aa565b6103b1611423565b6104006103c76103c79290565b6103c79061140d565b6103b161142f5f61141a565b6115f5565b6103b16113fd565b1561144357565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152806114a6600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6103b16114b56113f3565b6114db6114c133610400565b9173ffffffffffffffffffffffffffffffffffffffff1690565b1461143c565b6103b1906114ed6114aa565b61157e565b156114f957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b6103b19061142f6115916104005f61141a565b73ffffffffffffffffffffffffffffffffffffffff831614156114f2565b6103b1906114e1565b9073ffffffffffffffffffffffffffffffffffffffff905b9181191691161790565b906115ea6103c76115f19261109a565b82546115b8565b9055565b6115ff600a6113e9565b9061160b81600a6115da565b61163e6116387f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361109a565b9161109a565b9161164860405190565b80805b0390a3565b6103c76103c76103c79290565b906110ad90611650565b6103c79060a01c5b6bffffffffffffffffffffffff1690565b6103c79054611667565b6103c760406108a5565b906103b16116d55f6116a461168a565b946116cf6116b38383016113e9565b73ffffffffffffffffffffffffffffffffffffffff1687840152565b01611680565b6bffffffffffffffffffffffff166020840152565b6103c790611694565b6103c76103c76103c7926bffffffffffffffffffffffff1690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9190611746565b9290565b9180830292818404149015171561175957565b61170e565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b90611795565b9190565b9081156117a0570490565b61175e565b6117be6117c3919392936117b65f90565b50600961165d565b6116ea565b916117e2835173ffffffffffffffffffffffffffffffffffffffff1690565b905f916117f46114c16104008561141a565b14611859575b9061183d61182c6117919361182661182160208901516bffffffffffffffffffffffff1690565b6116f3565b9061173b565b611837611821611887565b9061178b565b93015173ffffffffffffffffffffffffffffffffffffffff1690565b92506117919061183d61182c61186f60086116ea565b9592935050506117fa565b61166f6103c76103c79290565b6103c761271061187a565b61189b8161310e565b9081156118a6575090565b6103c791507f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216149081156118fb575090565b6103c7915061194b7f01ffc9a7000000000000000000000000000000000000000000000000000000005b917fffffffff000000000000000000000000000000000000000000000000000000001690565b1490565b6103b19061195b6114aa565b611b26565b6103c79060a01c610a6f565b6103c79054611960565b6103c790610a6f565b6103c79054611976565b9060ff906115d0565b906119a26103c76115f192151590565b8254611989565b919060086115d09102916119bd5f19841b90565b921b90565b91906119d36103c76115f193611650565b9083546119a9565b6103b1915f916119c2565b8181106119f1575050565b806119fe5f6001936119db565b016119e6565b9190601f8111611a1357505050565b611a236103b1935f5260205f2090565b906020601f840181900483019310611a45575b6020601f9091010401906119e6565b9091508190611a36565b90611a58815190565b9067ffffffffffffffff82116108a057611a7c82611a76855461117c565b85611a04565b602090601f8311600114611ab5576115f192915f9183611aaa575b50505f19600883021c1916906002021790565b015190505f80611a97565b601f19831691611ac8855f5260205f2090565b925f5b818110611b0457509160029391856001969410611aec575b50505002019055565b01515f196008601f8516021c191690555f8080611ae3565b91936020600181928787015181550195019201611acb565b906103b191611a4f565b611b30600a61196c565b611b43611b3d6002610682565b91610682565b14611b73576040517fede69771000000000000000000000000000000000000000000000000000000008152600490fd5b611b7d600d61197f565b611b8960015b91151590565b14611ba5576103b190611b9e6001600d611992565b600c611b1c565b6040517fa89ac151000000000000000000000000000000000000000000000000000000008152600490fd5b6103b19061194f565b6103b190611be56114aa565b611c21565b9074ff00000000000000000000000000000000000000009060a01b6115d0565b90611c1a6103c76115f19261068c565b8254611bea565b611c29612f3f565b7f000000000000000000000000000000000000000000000000000000000000000011611cd4575f611c5981611650565b8203611c6b576103b19150600a611c0a565b506001611c7781611650565b8203611c89576103b19150600a611c0a565b50600290611c9961179183611650565b03611ca9576103b190600a611c0a565b6040517fb4fa3fb3000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fec2c6727000000000000000000000000000000000000000000000000000000008152600490fd5b6103b190611bd9565b906103b191611d156114aa565b611d56565b9190820180921161175957565b611d346103c76103c79290565b63ffffffff1690565b63ffffffff9081169116019063ffffffff821161175957565b90611d6881611d63612f3f565b611d1a565b7f000000000000000000000000000000000000000000000000000000000000000010611dbb5781611db6611db0611da16103b195612e8c565b611daa85611d27565b90611d3d565b8261261a565b61393b565b6040517fca586aa8000000000000000000000000000000000000000000000000000000008152600490fd5b906103b191611d08565b9190611e04611e00838333612d23565b1590565b611e11576103b192611e4f565b6040517f48df50e8000000000000000000000000000000000000000000000000000000008152600490fd5b6103c76103c76103c79263ffffffff1690565b915050611e5c600a61196c565b611e69611b3d6001610682565b14611e9a576040515b7f5b77ceac000000000000000000000000000000000000000000000000000000008152600490fd5b611ea681611d63612f3f565b611ef66117916103c77f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611d1a565b1115611f28576040515b7fde42be6c000000000000000000000000000000000000000000000000000000008152600490fd5b611f3d81611d63611f3833612ebb565b611e3c565b7f00000000000000000000000000000000000000000000000000000000000000001015611f90576040515b7f37ac80a2000000000000000000000000000000000000000000000000000000008152600490fd5b34611fc16117916103c77f00000000000000000000000000000000000000000000000000000000000000008561173b565b10611fe0576103b19033611db6611fda611da183612ebb565b8261267f565b6040517f6a12f104000000000000000000000000000000000000000000000000000000008152600490fd5b906103b19291611df0565b33612020326114c1565b0361202e576103b190612059565b6040517fea8370b0000000000000000000000000000000000000000000000000000000008152600490fd5b612063600a61196c565b612070611b3d6002610682565b146120a1576040515b7faf1fd675000000000000000000000000000000000000000000000000000000008152600490fd5b7f00000000000000000000000000000000000000000000000000000000000000008111156120f5576040515b7f6b350169000000000000000000000000000000000000000000000000000000008152600490fd5b61210181611d63612f3f565b7f00000000000000000000000000000000000000000000000000000000000000001015612154576040515b7f8a164f63000000000000000000000000000000000000000000000000000000008152600490fd5b61216181611d6333612ee9565b7f000000000000000000000000000000000000000000000000000000000000000010156121b4576040515b7f2fa72bd8000000000000000000000000000000000000000000000000000000008152600490fd5b346121e56117916103c77f00000000000000000000000000000000000000000000000000000000000000008561173b565b10611fe0576103b1903361393b565b6103b190612016565b90612214611e0061220f33600e6110a3565b61197f565b612221576103b19161224c565b6040517f55098f27000000000000000000000000000000000000000000000000000000008152600490fd5b90612257600a61196c565b612264611b3d6001610682565b1461227157604051611e72565b61227d81611d63612f3f565b6122cd6117916103c77f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611d1a565b11612356576122de6104005f61141a565b73ffffffffffffffffffffffffffffffffffffffff831603612305576103b191503361393b565b61231581611d63611f3885612ebb565b7f00000000000000000000000000000000000000000000000000000000000000001061234e5781611db6611fda611da16103b195612ebb565b604051611f68565b604051611f00565b906103b1916121fd565b9061237a611e0061220f33600e6110a3565b612221576103b1919061238d600a61196c565b61239a611b3d6002610682565b146123a757604051612079565b7f00000000000000000000000000000000000000000000000000000000000000008111156123d7576040516120cd565b6123e381611d63612f3f565b7f000000000000000000000000000000000000000000000000000000000000000010612480576124156104005f61141a565b73ffffffffffffffffffffffffffffffffffffffff83160361243c576103b191503361393b565b61244981611d6384612ee9565b7f000000000000000000000000000000000000000000000000000000000000000010612478576103b19161393b565b60405161218c565b60405161212c565b906103b191612368565b61249a6114aa565b6103b16124a9565b156103a057565b6124b23061109a565b5f61255582316124cb6124c484611650565b82116124a2565b6125177f000000000000000000000000000000000000000000000000000000000000000061251d6125066125006103b6611650565b8561173b565b916125176103e89361183785611650565b906125a5565b61183761254f7f0000000000000000000000000000000000000000000000000000000000000000946118266032611650565b91611650565b612563611791833192611650565b1161256b5750565b6103b1906125776113f3565b9031906125a5565b6103b1612492565b3d156125a0576125963d6108d6565b903d5f602084013e565b606090565b5f80916125c9936125b560405190565b90818003925af16125c4612587565b501590565b6125cf57565b6040517f90b8ec18000000000000000000000000000000000000000000000000000000008152600490fd5b61260d6103c76103c79263ffffffff1690565b67ffffffffffffffff1690565b6126266103b1926125fa565b90613097565b6103c79061263d6117916103c79490565b901b90565b61260d6103c76103c79290565b61266c9067ffffffffffffffff165b9167ffffffffffffffff1690565b019067ffffffffffffffff821161175957565b6126266126a96126a46103b19461269f6126996020611650565b91611e3c565b61262c565b612642565b6126ba6126b584612e8c565b6125fa565b9061264f565b156126c757565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b6103c7905461117c565b6103c75f6108d6565b6103c7612756565b80545f93929161277d6127798361117c565b9390565b91600181169081156127cb575060011461279657505050565b6127a791929394505f5260205f2090565b5f905b8382106127b75750500190565b6001816020925484860152019101906127aa565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001683525050811515909102019150565b61280c612835916103c793612767565b7f68696464656e0000000000000000000000000000000000000000000000000000815260060190565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000815260050190565b6104e761287692602092612870815190565b94859290565b93849101610492565b916128906103c79361283593612767565b9061285e565b916128906103c7936128359361285e565b6128b86128b38261344d565b6126c0565b7f0000000000000000000000000000000000000000000000000000000000000000811161294b576128f16128ed6103c7610974565b5190565b6128fd6117915f611650565b1115612942576129366103c76103c79261291e612918610974565b91612a19565b9061292860405190565b938492602084019283612896565b9081038252038261087e565b506103c761275f565b612955600d61197f565b5f9061296082611b83565b146129b857600c9061297d6117916129778461274c565b92611650565b11156129ae576103c7612936916129966103c794612a19565b906129a060405190565b93849260208401928361287f565b50506103c761275f565b600c91506129cb6117916129778461274c565b1115612942576103c7906103c76129e160405190565b80926129366020830191826127fc565b369037565b906103b1612a0c612a06846108d6565b936108b9565b601f1901602084016129f1565b612a2281612aaa565b90612a326001926104e784611650565b9180612a3d846129f6565b936020018401905b612a50575b50505090565b612a8a905f1901927f3031323334353637383961626364656600000000000000000000000000000000600a82061a8453611837600a611650565b9081612a986117915f611650565b14612aa557909181612a45565b612a4a565b612ab35f611650565b907a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000612ad981611650565b821015612c2b575b506d04ee2d6d415b85acef8100000000612afa81611650565b821015612c09575b50662386f26fc10000612b1481611650565b821015612be7575b506305f5e100612b2b81611650565b821015612bc5575b50612710612b4081611650565b821015612ba3575b506064612b5481611650565b821015612b81575b50612b6a611791600a611650565b1015612b735790565b6103c7906104e76001611650565b612b9c91611837612b9192611650565b916104e76002611650565b905f612b5c565b612bbe91611837612bb392611650565b916104e76004611650565b905f612b48565b612be091611837612bd592611650565b916104e76008611650565b905f612b33565b612c0291611837612bf792611650565b916104e76010611650565b905f612b1c565b612c2491611837612c1992611650565b916104e76020611650565b905f612b02565b612c4691611837612c3b92611650565b916104e76040611650565b905f612ae1565b90612c5b610400600b6113e9565b73ffffffffffffffffffffffffffffffffffffffff821614612c80576103c791613433565b5050600190565b6103ca9073ffffffffffffffffffffffffffffffffffffffff1660601b90565b6104e781601493612c87565b67ffffffffffffffff81116108a05760208091020190565b90929192612cdb6108e382612cb3565b93818552602080860192028301928184116103a057915b838310612cff5750505050565b60208091612d0d8486610529565b815201920191612cf2565b6103c7913691612ccb565b90612d8b6103c79392612d335f90565b50612d50612d4060405190565b8092612936602083019182612ca7565b612d62612d5b825190565b9160200190565b20927f000000000000000000000000000000000000000000000000000000000000000092612d18565b61174261194b929361179192612d9e5f90565b50612dfe565b5f1981146117595760010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b90612de8825190565b811015612df9576020809102010190565b612db2565b612e075f611650565b915b612e146103c7835190565b831015612e4657612e3a612e4091612e34612e2f8686612ddf565b6128ed565b90612e4c565b92612da4565b91612e09565b91505090565b81811015612e6557906103c7915f5260205260405f2090565b6103c7915f5260205260405f2090565b611d346103c76103c79267ffffffffffffffff1690565b612ea06103c791612e9a5f90565b5061303a565b612e75565b61260d90612eb661265e6103c79490565b901c90565b612ea0612ecc6103c792612e9a5f90565b612ed66020611650565b90612ea5565b9190820391821161175957565b6103c790612f0b611f38612f11612eff84613009565b612f0b611f3886612e8c565b90612edc565b92612ebb565b6103c7600a61196c565b612f2a3061109a565b3190565b6103c79081565b6103c79054612f2e565b6103c7612f5d612f4e5f612f35565b612f586001612f35565b900390565b612f585b6103c76001611650565b6103c767ffffffffffffffff611650565b612f886104005f61141a565b73ffffffffffffffffffffffffffffffffffffffff821614612fc357612fb2612fb79160056110a3565b612f35565b612fbf612f6b565b1690565b6040517f8f4eb604000000000000000000000000000000000000000000000000000000008152600490fd5b6103c76040611650565b6103c790612eb66117916103c79490565b613022612fb2612fb79261301a5f90565b5060056110a3565b61302a612fee565b90612ff8565b6103c760c0611650565b6126a461304e612fb26103c79361301a5f90565b61302a613030565b6103c777ffffffffffffffffffffffffffffffffffffffffffffffff611650565b905f19906115d0565b906130906103c76115f192611650565b8254613077565b906130d16103b1926005926130ca6130b2612fb284876110a3565b6130ba613056565b16916130c4613030565b9061262c565b17926110a3565b613080565b6130e96130e36103c79290565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61311b6301ffc9a76130d6565b7fffffffff00000000000000000000000000000000000000000000000000000000821614908115613163575b8115613151575090565b905061194b611925635b5e139f6130d6565b90506131726380ac58cd6130d6565b7fffffffff0000000000000000000000000000000000000000000000000000000082161490613147565b6103c790611230565b6103c7600261319c565b6103c7600361319c565b6131d56131d06103c7926131ca5f90565b50613200565b61140d565b611091565b6103c77c0100000000000000000000000000000000000000000000000000000000611650565b90819061320b612f61565b83101561323e575b6040517fdf2d9b42000000000000000000000000000000000000000000000000000000008152600490fd5b61324a6103c75f612f35565b83101561321357613260612fb26004948561165d565b806132696131da565b165f9061327861179183611650565b14613284575050613213565b92905b61329084611650565b81036132b557505f1901916132906132ab612fb2858761165d565b9193919050613287565b925050915090565b906132c7816131b9565b913373ffffffffffffffffffffffffffffffffffffffff84168103613343575b506132fe815f6132f885600661165d565b016115da565b61333461297761332e7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259561109a565b9261109a565b9261333e60405190565b5f90a4565b611e006133509185612c4d565b61335a575f6132e7565b6040517fcfb3b942000000000000000000000000000000000000000000000000000000008152600490fd5b613391611e008261344d565b6133aa575f6133a46103c792600661165d565b016113e9565b6040517fcf4700e4000000000000000000000000000000000000000000000000000000008152600490fd5b336133f3836133ee846133e98560076110a3565b6110a3565b611992565b61164b6134296134237f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319361109a565b9361109a565b936103ed60405190565b6103c7916133e961220f926134455f90565b5060076110a3565b613455612f61565b811015908161348d575b81613468575090565b6134789150612fb290600461165d565b6134806131da565b1661194b6117915f611650565b905061349b6103c75f612f35565b81109061345f565b6103c77c0200000000000000000000000000000000000000000000000000000000611650565b91906134d482613200565b6134e06131d58261140d565b6134ff73ffffffffffffffffffffffffffffffffffffffff86166114c1565b036137045761350d8361375c565b9091903361351f611e0082898561372f565b6136c2575b505f926135336104008561141a565b73ffffffffffffffffffffffffffffffffffffffff86161461369757839161368f575b50506135986135868460056133e961356e8a836110a3565b61358061357a82612f35565b5f190190565b90613080565b61358061359282612f35565b60010190565b6135a06134a3565b6135d16135ae838689613b1d565b82178573ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b906135e26004926130d1888561165d565b82166135f061179185611650565b14613629575b50505061333461297761332e7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9561109a565b61363b6136366001611650565b860190565b92613649612fb2858461165d565b61365561179183611650565b14613661575b506135f6565b6103c761366d91612f35565b830361367a575b8061365b565b613687926130d19161165d565b5f8080613674565b55815f613556565b6040517fea553b34000000000000000000000000000000000000000000000000000000008152600490fd5b611e006136cf9188612c4d565b6136d9575f613524565b6040517f59c896be000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fa1148100000000000000000000000000000000000000000000000000000000008152600490fd5b919073ffffffffffffffffffffffffffffffffffffffff809161374f5f90565b5016911691821491141790565b6103c76137729161376a5f90565b50600661165d565b90815490565b90916103b19261378661275f565b925b919290926137978185856134c9565b833b6137a56117915f611650565b036137b1575b50505050565b6137be93611e0093613869565b6137cb575f8080806137ab565b6040515b7fd1a57ed6000000000000000000000000000000000000000000000000000000008152600490fd5b905051906103b182610375565b906020828203126103a0576103c7916137f7565b73ffffffffffffffffffffffffffffffffffffffff91821681529116602082015260408101919091526080606082018190526103c7929101906104b3565b6130e96130e36103c79263ffffffff1690565b9093929160209061388261387d5f9761109a565b61109a565b63150b7a02935f336138b261389660405190565b988996879586946138a78c60e01b90565b865260048601613818565b03925af15f928161390b575b506138f857505060016138cd57565b6138d5612587565b80516138e36117915f611650565b036138f0576040516137cf565b805190602001fd5b61194b919293506130e961192591613856565b61392d91935060203d8111613934575b613925818361087e565b810190613804565b915f6138be565b503d61391b565b9190916139475f612f35565b925f9061395382611650565b8114613ac15784613a15849273ffffffffffffffffffffffffffffffffffffffff60019283926139b86139a0613987612fee565b61399a61399388611650565b918261262c565b17830290565b6135806139ae8a60056110a3565b916104e783612f35565b613a10613a046001831460e11b6139e26139d18c61141a565b6139da8d611650565b9b8c91613b1d565b178b73ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b6130d160049d8e61165d565b850190565b9616928084877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4015b858103613a9257505014613a5a576103b1929350613080565b6114a684613a6760405190565b7f2e076300000000000000000000000000000000000000000000000000000000008152918291820190565b80829184877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a401613a41565b6040517fb562e8dd000000000000000000000000000000000000000000000000000000008152600490fd5b6103c760e8611650565b613b036103c76103c79290565b62ffffff1690565b6103c76103c76103c79262ffffff1690565b613b5161269f916103c79493613b305f90565b50613b4b613b46613b3f613aec565b8097612ff8565b613af6565b91613b56565b613b0b565b5050506103c75f90565b6103c760806108a5565b613b72613b60565b5f8082526020820181905260408201819052606082015290565b6103c7613b6a565b613b9c613b8c565b50613ba5613b8c565b613bb06103c7612f61565b82108015613bec575b613be75750613bc781613c1d565b90613bd56040830151151590565b613be3576103c79150613c09565b5090565b905090565b50613bf86103c7613c00565b821015613bb9565b6103c75f612f35565b613c186103c7916131ca613b8c565b613c41565b613c18612fb26103c792613c2f613b8c565b50600461165d565b6103c760a0611650565b906103b1613c4d613b8c565b6060613cd2613b468396613c80613c666131d58361140d565b73ffffffffffffffffffffffffffffffffffffffff168652565b613ca8613c976126a4613c91613c37565b84612ff8565b67ffffffffffffffff166020870152565b613cca613cb36131da565b8216613cc16117915f611650565b14156040870152565b61302a613aec565b62ffffff16910152565b906108e86108e383612cb3565b5f5b828110613cf757505050565b602090613d02613b8c565b8184015201613ceb565b906103b1613d22613d1c84613cdc565b93612cb3565b601f190160208401613ce9565b9190811015612df9576020020190565b356103c781610523565b91908092613d5684613d0c565b925f5b855b8114613da157613d9a81613d7e611042613d79613d5b958989613d2f565b613d3f565b613d888289612ddf565b52613d938188612ddf565b5060010190565b9050613d59565b509350505090565b906103b1612a0c613d1c84613cdc565b9082811015613f9e575f91613dcc613c00565b613dd4612f61565b808410613f96575b50808511613f8e575b50613def81612f7c565b84831015613f7f57828503818110613f77575b505b613e0d81613da9565b955f91613e1983611650565b8114613f6e57613e2885613b94565b945f95613e3b611e006040830151151590565b613f4b575b505b875b81141580613f41575b15613f345783613e5c82613c1d565b6040810151613f255701805173ffffffffffffffffffffffffffffffffffffffff16613e8d6114c16104008861141a565b03613f06575b508873ffffffffffffffffffffffffffffffffffffffff861673ffffffffffffffffffffffffffffffffffffffff881614613ed9575b50613e44906001015b9050613e42565b9681613efd613e4493613efa84613ef4613ed2969160010190565b9c612ddf565b52565b91505088613ec9565b5173ffffffffffffffffffffffffffffffffffffffff1695505f613e93565b5050613ed2613e449160010190565b5050959450505050815290565b5081871415613e4d565b84015173ffffffffffffffffffffffffffffffffffffffff169550613e44613e40565b50945050505050565b90505f613e02565b50613f895f611650565b613e04565b93505f613de5565b92505f613ddc565b6040517f32c1995a000000000000000000000000000000000000000000000000000000008152600490fd5b5f80613fd483612f7c565b92613fde84613da9565b94613fe7613b8c565b50613ff0612f61565b855b85146140cd5761400181613c1d565b60408101516140c057805173ffffffffffffffffffffffffffffffffffffffff16905f916140346114c16104008561141a565b0361409b575b5050614082613ff2916140608573ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8716146140895760010190565b9050613ff0565b61359281613efa60018a01998c612ddf565b015173ffffffffffffffffffffffffffffffffffffffff169350614082613ff261403a565b50613ff290600101614082565b50935050505056fea26469706673582212205eb9ba1265eed78e1baa596fe692e5fbd140aa928ba00a6dbd0e3f84a409516a64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ConsecutiveTransfer(uint256,uint256,address,address)": {
        "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "airdropMint(address,uint256)": {
        "details": "caller is owner but minter is '_to''_setAirdropMintCounter' increases number of minted tokens of owner in airdrop mint as auxiliary data",
        "params": {
          "_amount": "token amount of airdrop",
          "_to": "airdrop recipient"
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "changeState(uint256)": {
        "details": "airdrop phase must be finished to change the state",
        "params": {
          "_index": "index of state (0: closed, 1: whitelist, 2: public)"
        }
      },
      "explicitOwnershipOf(uint256)": {
        "details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"
      },
      "explicitOwnershipsOf(uint256[])": {
        "details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
      },
      "externalPublicSaleMint(address,uint256)": {
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "externalWhitelistSaleMint(address,uint256)": {
        "details": "'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data",
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "getAirdropMintCounter(address)": {
        "details": "returns [0..31] bits of '_auxData' ([192..223] bits of '_packedAddressData')",
        "params": {
          "_account": "querying address"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getPublicMintCounter(address)": {
        "details": "(total minted) - (minted in whitelist sale) - (minted in airdrop)"
      },
      "getWhitelistMintCounter(address)": {
        "details": "returns [32..63] bits of '_auxData' ([224..255] bits of '_packedAddressData')",
        "params": {
          "_account": "querying address"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "inherits from ERC721A and bypass approval requests from rarible",
        "returns": {
          "_0": "true if the operator is rarible"
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "publicSaleMint(uint256)": {
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "reveal(string)": {
        "params": {
          "_newBaseUri": "actual URI"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "params": {
          "_tokenId": "querying token id"
        },
        "returns": {
          "_0": "token URI"
        }
      },
      "tokensOfOwner(address)": {
        "details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."
      },
      "tokensOfOwnerIn(address,uint256,uint256)": {
        "details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "whitelistSaleMint(uint256,bytes32[])": {
        "details": "'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data",
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "withdrawAll()": {
        "details": "calls _withdraw function to withdraw assets"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "InvalidQueryRange()": [
        {
          "notice": "Invalid query range (`start` >= `stop`)."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "airdropMint(address,uint256)": {
        "notice": "owner can mint the tokens for airdrop before sale phases"
      },
      "changeState(uint256)": {
        "notice": "owner can changes the sale state"
      },
      "constructor": {
        "notice": "state variables are defined and royalty is set in constructor"
      },
      "contractBalance()": {
        "notice": "returns contract balance"
      },
      "currentState()": {
        "notice": "returns current state of sale"
      },
      "externalPublicSaleMint(address,uint256)": {
        "notice": "any EOA address can mint tokens for a certain ETH within a certain limit during public sale"
      },
      "externalWhitelistSaleMint(address,uint256)": {
        "notice": "whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale"
      },
      "getAirdropMintCounter(address)": {
        "notice": "returns total airdrop amount of an address"
      },
      "getPublicMintCounter(address)": {
        "notice": "returns mint amounts during public sale of addresses"
      },
      "getWhitelistMintCounter(address)": {
        "notice": "returns total airdrop amount of an address"
      },
      "isWhitelisted(address,bytes32[])": {
        "notice": "returns if an address whitelisted or not by verifying merkle proof"
      },
      "publicSaleMint(uint256)": {
        "notice": "any EOA address can mint tokens for a certain ETH within a certain limit during public sale"
      },
      "reveal(string)": {
        "notice": "owner should reveal the metadata after sale phase only for once"
      },
      "whitelistSaleMint(uint256,bytes32[])": {
        "notice": "whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale"
      },
      "withdrawAll()": {
        "notice": "owner can withdraw the all balance to associated accounts at any time"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3335,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3337,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3339,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3341,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3345,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3349,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3354,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)3267_storage)"
      },
      {
        "astId": 3360,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 148,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(RoyaltyInfo)145_storage"
      },
      {
        "astId": 153,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2187,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "state",
        "offset": 20,
        "slot": "10",
        "type": "t_enum(STATE)2182"
      },
      {
        "astId": 2189,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "raribleTransferProxy",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2192,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "BASE_URI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2198,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "isRevealed",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2202,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "adminsForExternal",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(STATE)2182": {
        "encoding": "inplace",
        "label": "enum IlkelBenlik.STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)145_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)3267_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)3267_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)145_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 142,
            "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 144,
            "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenApprovalRef)3267_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 3266,
            "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}