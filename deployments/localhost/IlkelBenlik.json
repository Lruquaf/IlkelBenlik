{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokensForWhitelist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokensForAirdrop",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_whitelistTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountPerMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountPerWhitelist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountPerAccount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_raribleTransferProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_founder1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_founder2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_communityWallet",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRevealed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQueryRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxAmountPerAccountExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxAmountPerMintExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxAmountPerWhitelistExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupplyExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupplyForAirdropExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupplyForWhitelistExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAnAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAnAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPublicSalePhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelistSalePhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StillAirdropPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongStateForReveal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AIRDROP_BASE_URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_WALLET",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FOUNDER_1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FOUNDER_2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AMOUNT_PER_ACCOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AMOUNT_PER_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AMOUNT_PER_WHITELIST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_FOR_AIRDROP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_FOR_WHITELIST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MERKLE_ROOT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_TOKEN_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_TOKEN_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "adminsForExternal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "airdropMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "changeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentState",
      "outputs": [
        {
          "internalType": "enum IlkelBenlik.STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "explicitOwnershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "explicitOwnershipsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "externalPublicSaleMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "externalWhitelistSaleMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAirdropMintCounter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getPublicMintCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getWhitelistMintCounter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRevealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raribleTransferProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseUri",
          "type": "string"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IlkelBenlik.STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "tokensOfOwnerIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd2ac679799582f917b89d50ddc48ef11ee071534d5d66e9e54dc04572ec612f5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3847738",
    "logsBloom": "0x
    "blockHash": "0x6ea58f04222166466316d7359de40d9cc6e58457cfd83ec34265fd6fa5050223",
    "transactionHash": "0xd2ac679799582f917b89d50ddc48ef11ee071534d5d66e9e54dc04572ec612f5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xd2ac679799582f917b89d50ddc48ef11ee071534d5d66e9e54dc04572ec612f5",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6ea58f04222166466316d7359de40d9cc6e58457cfd83ec34265fd6fa5050223"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "3847738",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "210",
    "50",
    "10",
    "1000000000000000000",
    "1100000000000000000",
    "30",
    "20",
    "50",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x71bE63f3384f5fb98995898A86B02Fb2426c5788",
    "0xFABB0ac9d68B0B445fB7357272Ff202C5651694a",
    "0x1CBd3b2770909D4e10f157cABC84C7264073C9Ec",
    "0xa1c002e633f0237d9a4cb590efdf9eeb8d6b0d87cd1f9cc970e3a29aba305756",
    [
      "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
      "0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199",
      "0xdD2FD4581271e230360230F9337D5c0430Bf44C0"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "a9bc3961c263ed25de9e86d0f938be85",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensForWhitelist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensForAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountPerMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountPerWhitelist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountPerAccount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_raribleTransferProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_founder1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_founder2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityWallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxAmountPerAccountExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxAmountPerMintExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxAmountPerWhitelistExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyForAirdropExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyForWhitelistExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPublicSalePhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelistSalePhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StillAirdropPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongStateForReveal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AIRDROP_BASE_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDER_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDER_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_PER_ACCOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_PER_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_PER_WHITELIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_FOR_AIRDROP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_FOR_WHITELIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_TOKEN_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_TOKEN_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"adminsForExternal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airdropMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"changeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"internalType\":\"enum IlkelBenlik.STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"externalPublicSaleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"externalWhitelistSaleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAirdropMintCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPublicMintCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getWhitelistMintCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raribleTransferProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseUri\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IlkelBenlik.STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"airdropMint(address,uint256)\":{\"details\":\"caller is owner but minter is '_to''_setAirdropMintCounter' increases number of minted tokens of owner in airdrop mint as auxiliary data\",\"params\":{\"_amount\":\"token amount of airdrop\",\"_to\":\"airdrop recipient\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"changeState(uint256)\":{\"details\":\"airdrop phase must be finished to change the state\",\"params\":{\"_index\":\"index of state (0: closed, 1: whitelist, 2: public)\"}},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"externalPublicSaleMint(address,uint256)\":{\"params\":{\"_amount\":\"token amount to mint\"}},\"externalWhitelistSaleMint(address,uint256)\":{\"details\":\"'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data\",\"params\":{\"_amount\":\"token amount to mint\"}},\"getAirdropMintCounter(address)\":{\"details\":\"returns [0..31] bits of '_auxData' ([192..223] bits of '_packedAddressData')\",\"params\":{\"_account\":\"querying address\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getPublicMintCounter(address)\":{\"details\":\"(total minted) - (minted in whitelist sale) - (minted in airdrop)\"},\"getWhitelistMintCounter(address)\":{\"details\":\"returns [32..63] bits of '_auxData' ([224..255] bits of '_packedAddressData')\",\"params\":{\"_account\":\"querying address\"}},\"isApprovedForAll(address,address)\":{\"details\":\"inherits from ERC721A and bypass approval requests from rarible\",\"returns\":{\"_0\":\"true if the operator is rarible\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"publicSaleMint(uint256)\":{\"params\":{\"_amount\":\"token amount to mint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"reveal(string)\":{\"params\":{\"_newBaseUri\":\"actual URI\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"querying token id\"},\"returns\":{\"_0\":\"token URI\"}},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"whitelistSaleMint(uint256,bytes32[])\":{\"details\":\"'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data\",\"params\":{\"_amount\":\"token amount to mint\"}},\"withdrawAll()\":{\"details\":\"calls _withdraw function to withdraw assets\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"airdropMint(address,uint256)\":{\"notice\":\"owner can mint the tokens for airdrop before sale phases\"},\"changeState(uint256)\":{\"notice\":\"owner can changes the sale state\"},\"constructor\":{\"notice\":\"state variables are defined and royalty is set in constructor\"},\"contractBalance()\":{\"notice\":\"returns contract balance\"},\"currentState()\":{\"notice\":\"returns current state of sale\"},\"externalPublicSaleMint(address,uint256)\":{\"notice\":\"any EOA address can mint tokens for a certain ETH within a certain limit during public sale\"},\"externalWhitelistSaleMint(address,uint256)\":{\"notice\":\"whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale\"},\"getAirdropMintCounter(address)\":{\"notice\":\"returns total airdrop amount of an address\"},\"getPublicMintCounter(address)\":{\"notice\":\"returns mint amounts during public sale of addresses\"},\"getWhitelistMintCounter(address)\":{\"notice\":\"returns total airdrop amount of an address\"},\"isWhitelisted(address,bytes32[])\":{\"notice\":\"returns if an address whitelisted or not by verifying merkle proof\"},\"publicSaleMint(uint256)\":{\"notice\":\"any EOA address can mint tokens for a certain ETH within a certain limit during public sale\"},\"reveal(string)\":{\"notice\":\"owner should reveal the metadata after sale phase only for once\"},\"whitelistSaleMint(uint256,bytes32[])\":{\"notice\":\"whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale\"},\"withdrawAll()\":{\"notice\":\"owner can withdraw the all balance to associated accounts at any time\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IlkelBenlik.sol\":\"IlkelBenlik\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u:fDnTOc\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/IlkelBenlik.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title NFTs of ID Series Art Collection\\n * @author Lruquaf ---> github.com/Lruquaf\\n * @notice NFT Minting Contract of ID Series Art Collection by Necmi G\\u00fcrseler\\n */\\n\\npragma solidity 0.8.20;\\n\\nimport {IERC721A} from \\\"erc721a/contracts/IERC721A.sol\\\";\\nimport {ERC721A} from \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport {ERC721AQueryable} from \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\nimport {ERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nerror InvalidInput();\\nerror NotAnAccount();\\nerror NotAWhitelisted();\\nerror NotAnAdmin();\\nerror WrongStateForReveal();\\nerror AlreadyRevealed();\\nerror StillAirdropPhase();\\nerror NotAirdropPhase();\\nerror MaxSupplyForAirdropExceeded();\\nerror NotWhitelistSalePhase();\\nerror MaxSupplyForWhitelistExceeded();\\nerror MaxAmountPerWhitelistExceeded();\\nerror NotPublicSalePhase();\\nerror MaxAmountPerMintExceeded();\\nerror MaxSupplyExceeded();\\nerror MaxAmountPerAccountExceeded();\\nerror InsufficientETH();\\nerror SaleHasStarted();\\nerror TransferFailed();\\n\\ncontract IlkelBenlik is ERC721AQueryable, ERC2981, Ownable {\\n    using Strings for uint256;\\n\\n    // state of sale\\n    enum STATE {\\n        CLOSED,\\n        WHITELIST,\\n        PUBLIC\\n    }\\n    // sale is closed initally\\n    STATE public state = STATE.CLOSED;\\n\\n    // Transfer Proxy address to bypass approval during token listing\\n    address public raribleTransferProxy;\\n\\n    // A placeholder URI as base URI of whitelist and public tokens before reveal\\n    string public BASE_URI =\\n        \\\"ipfs://bafybeihawpmgq5vlku7g2aaocu2e2e7fqzvqe7qtq4kav2ge2jy5ojsqte/\\\";\\n    // URI of airdropped tokens\\n    string public constant AIRDROP_BASE_URI =\\n        \\\"ipfs://bafybeig5mbiinirndd6m43l2no2a46wcnnsihod4oo2hzoir5fyxklwuci/\\\";\\n\\n    // reveal state\\n    bool public isRevealed = false;\\n\\n    //////////////\\n    //WIP/////////\\n    //////////////\\n\\n    mapping(address admin => bool isAdmin) public adminsForExternal;\\n\\n    //////////////\\n    //////////////\\n    //////////////\\n\\n    // max supply\\n    uint256 public immutable MAX_TOKENS;\\n    // reserved supply for whitelist\\n    uint256 public immutable MAX_TOKENS_FOR_WHITELIST;\\n    // reserved supply for airdrop\\n    uint256 public immutable MAX_TOKENS_FOR_AIRDROP;\\n\\n    // token price for whitelist sale\\n    uint256 public immutable WHITELIST_TOKEN_PRICE;\\n    // token price for public sale\\n    uint256 public immutable PUBLIC_TOKEN_PRICE;\\n\\n    // mint limit per transaction (only public sale)\\n    uint256 public immutable MAX_AMOUNT_PER_MINT;\\n\\n    // whitelist mint limit per account\\n    uint256 public immutable MAX_AMOUNT_PER_WHITELIST;\\n    // public mint limit per account\\n    uint256 public immutable MAX_AMOUNT_PER_ACCOUNT;\\n\\n    // receiver of majority of sale income\\n    address public immutable FOUNDER_1;\\n    // receiver of creator earnings\\n    address public immutable FOUNDER_2;\\n    // receiver of remainder of sale income\\n    address public immutable COMMUNITY_WALLET;\\n\\n    // root hash of whitelist's merkle tree\\n    bytes32 public immutable MERKLE_ROOT;\\n\\n    /**\\n     * @notice state variables are defined and royalty is set in constructor\\n     */\\n    constructor(\\n        uint256 _maxTokens,\\n        uint256 _maxTokensForWhitelist,\\n        uint256 _maxTokensForAirdrop,\\n        uint256 _whitelistTokenPrice,\\n        uint256 _publicTokenPrice,\\n        uint256 _maxAmountPerMint,\\n        uint256 _maxAmountPerWhitelist,\\n        uint256 _maxAmountPerAccount,\\n        address _raribleTransferProxy,\\n        address _founder1,\\n        address _founder2,\\n        address _communityWallet,\\n        bytes32 _merkleRoot,\\n        address[] memory _admins\\n    ) ERC721A(\\\"IlkelBenlik\\\", \\\"IB\\\") {\\n        if (_maxTokensForWhitelist + _maxTokensForAirdrop > _maxTokens) {\\n            revert InvalidInput();\\n        }\\n        MAX_TOKENS = _maxTokens;\\n        MAX_TOKENS_FOR_WHITELIST = _maxTokensForWhitelist;\\n        MAX_TOKENS_FOR_AIRDROP = _maxTokensForAirdrop;\\n        WHITELIST_TOKEN_PRICE = _whitelistTokenPrice;\\n        PUBLIC_TOKEN_PRICE = _publicTokenPrice;\\n        MAX_AMOUNT_PER_MINT = _maxAmountPerMint;\\n        MAX_AMOUNT_PER_WHITELIST = _maxAmountPerWhitelist;\\n        MAX_AMOUNT_PER_ACCOUNT = _maxAmountPerAccount;\\n        raribleTransferProxy = _raribleTransferProxy;\\n        FOUNDER_1 = _founder1;\\n        FOUNDER_2 = _founder2;\\n        COMMUNITY_WALLET = _communityWallet;\\n        MERKLE_ROOT = _merkleRoot;\\n        _setDefaultRoyalty(_founder2, 500);\\n        for (uint256 i = 0; i < _admins.length; i++) {\\n            adminsForExternal[_admins[i]] = true;\\n        }\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC721A, ERC2981, ERC721A) returns (bool) {\\n        return\\n            ERC721A.supportsInterface(interfaceId) ||\\n            ERC2981.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice checks if the sender of message is an EOA\\n     */\\n    modifier onlyAccounts() {\\n        if (msg.sender != tx.origin) {\\n            revert NotAnAccount();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice checks if the sender of message is a whitelist\\n     */\\n    modifier onlyWhitelisted(bytes32[] calldata _merkleProof) {\\n        if (!isWhitelisted(msg.sender, _merkleProof)) {\\n            revert NotAWhitelisted();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAdmins() {\\n        if (!adminsForExternal[msg.sender]) {\\n            revert NotAnAdmin();\\n            _;\\n        }\\n    }\\n\\n    /**\\n     * @notice owner should reveal the metadata after sale phase only for once\\n     * @param _newBaseUri actual URI\\n     */\\n    function reveal(string memory _newBaseUri) public onlyOwner {\\n        if (state != STATE.PUBLIC) {\\n            revert WrongStateForReveal();\\n        } else if (isRevealed == true) {\\n            revert AlreadyRevealed();\\n        }\\n        isRevealed = true;\\n        BASE_URI = _newBaseUri;\\n    }\\n\\n    /**\\n     * @notice owner can changes the sale state\\n     * @dev airdrop phase must be finished to change the state\\n     * @param _index index of state (0: closed, 1: whitelist, 2: public)\\n     */\\n    function changeState(uint256 _index) public onlyOwner {\\n        if (totalSupply() < MAX_TOKENS_FOR_AIRDROP) {\\n            revert StillAirdropPhase();\\n        }\\n        if (_index == 0) {\\n            state = STATE.CLOSED;\\n        } else if (_index == 1) {\\n            state = STATE.WHITELIST;\\n        } else if (_index == 2) {\\n            state = STATE.PUBLIC;\\n        } else {\\n            revert InvalidInput();\\n        }\\n    }\\n\\n    /**\\n     * @notice owner can mint the tokens for airdrop before sale phases\\n     * @dev caller is owner but minter is '_to'\\n     * @dev '_setAirdropMintCounter' increases number of minted tokens of owner\\n     * in airdrop mint as auxiliary data\\n     * @param _to airdrop recipient\\n     * @param _amount token amount of airdrop\\n     */\\n\\n    function airdropMint(address _to, uint256 _amount) public onlyOwner {\\n        if (totalSupply() + _amount > MAX_TOKENS_FOR_AIRDROP) {\\n            revert MaxSupplyForAirdropExceeded();\\n        }\\n        _setAirdropMintCounter(\\n            _to,\\n            getAirdropMintCounter(_to) + uint32(_amount)\\n        );\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice whitelisted addressses can mint tokens for a certain ETH\\n     * within a certain limit during whitelist sale\\n     * @dev '_setWhitelistMintCounter' increases number of minted tokens of owner\\n     * in whitelist sale as auxiliary data\\n     * @param _amount token amount to mint\\n     */\\n    function whitelistSaleMint(\\n        uint256 _amount,\\n        bytes32[] calldata _merkleProof\\n    ) public payable onlyWhitelisted(_merkleProof) {\\n        if (state != STATE.WHITELIST) {\\n            revert NotWhitelistSalePhase();\\n        } else if (\\n            totalSupply() + _amount >\\n            MAX_TOKENS_FOR_WHITELIST + MAX_TOKENS_FOR_AIRDROP\\n        ) {\\n            revert MaxSupplyForWhitelistExceeded();\\n        } else if (\\n            uint256(getWhitelistMintCounter(msg.sender)) + _amount >\\n            MAX_AMOUNT_PER_WHITELIST\\n        ) {\\n            revert MaxAmountPerWhitelistExceeded();\\n        } else if (msg.value < _amount * WHITELIST_TOKEN_PRICE) {\\n            revert InsufficientETH();\\n        }\\n        _setWhitelistMintCounter(\\n            msg.sender,\\n            getWhitelistMintCounter(msg.sender) + uint32(_amount)\\n        );\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice any EOA address can mint tokens for a certain ETH\\n     * within a certain limit during public sale\\n     * @param _amount token amount to mint\\n     */\\n    function publicSaleMint(uint256 _amount) public payable onlyAccounts {\\n        if (state != STATE.PUBLIC) {\\n            revert NotPublicSalePhase();\\n        } else if (_amount > MAX_AMOUNT_PER_MINT) {\\n            revert MaxAmountPerMintExceeded();\\n        } else if (totalSupply() + _amount > MAX_TOKENS) {\\n            revert MaxSupplyExceeded();\\n        } else if (\\n            getPublicMintCounter(msg.sender) + _amount > MAX_AMOUNT_PER_ACCOUNT\\n        ) {\\n            revert MaxAmountPerAccountExceeded();\\n        } else if (msg.value < _amount * PUBLIC_TOKEN_PRICE) {\\n            revert InsufficientETH();\\n        }\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    ////////////////////////////////////\\n    // WORK IN PROGRESS\\n    ////////////////////////////////////\\n\\n    /**\\n     * @notice whitelisted addressses can mint tokens for a certain ETH\\n     * within a certain limit during whitelist sale\\n     * @dev '_setWhitelistMintCounter' increases number of minted tokens of owner\\n     * in whitelist sale as auxiliary data\\n     * @param _amount token amount to mint\\n     */\\n    function externalWhitelistSaleMint(\\n        address _to,\\n        uint256 _amount\\n    ) public onlyAdmins {\\n        if (state != STATE.WHITELIST) {\\n            revert NotWhitelistSalePhase();\\n        } else if (\\n            totalSupply() + _amount >\\n            MAX_TOKENS_FOR_WHITELIST + MAX_TOKENS_FOR_AIRDROP\\n        ) {\\n            revert MaxSupplyForWhitelistExceeded();\\n        }\\n        if (_to == address(0)) {\\n            _mint(owner(), _amount);\\n        } else {\\n            if (\\n                uint256(getWhitelistMintCounter(_to)) + _amount >\\n                MAX_AMOUNT_PER_WHITELIST\\n            ) {\\n                revert MaxAmountPerWhitelistExceeded();\\n            }\\n            _setWhitelistMintCounter(\\n                _to,\\n                getWhitelistMintCounter(_to) + uint32(_amount)\\n            );\\n            _mint(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice any EOA address can mint tokens for a certain ETH\\n     * within a certain limit during public sale\\n     * @param _amount token amount to mint\\n     */\\n    function externalPublicSaleMint(\\n        address _to,\\n        uint256 _amount\\n    ) public onlyAdmins {\\n        if (state != STATE.PUBLIC) {\\n            revert NotPublicSalePhase();\\n        } else if (_amount > MAX_AMOUNT_PER_MINT) {\\n            revert MaxAmountPerMintExceeded();\\n        } else if (totalSupply() + _amount > MAX_TOKENS) {\\n            revert MaxSupplyExceeded();\\n        }\\n        if (_to == address(0)) {\\n            _mint(owner(), _amount);\\n        } else {\\n            if (getPublicMintCounter(_to) + _amount > MAX_AMOUNT_PER_ACCOUNT) {\\n                revert MaxAmountPerAccountExceeded();\\n            }\\n            _mint(_to, _amount);\\n        }\\n    }\\n\\n    ///////////////////////////////////////\\n    ///////////////////////////////////////\\n    ///////////////////////////////////////\\n\\n    /**\\n     * @notice owner can withdraw the all balance to associated accounts at any time\\n     * @dev calls _withdraw function to withdraw assets\\n     */\\n    function withdrawAll() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0);\\n\\n        _withdraw(FOUNDER_1, (balance * 950) / 1000);\\n        _withdraw(COMMUNITY_WALLET, (balance * 50) / 1000);\\n\\n        if (address(this).balance > 0) {\\n            _withdraw(owner(), address(this).balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev withdraws the assets by low-level calls\\n     * @param _address destination address\\n     * @param _amount amount of assets\\n     */\\n    function _withdraw(address _address, uint256 _amount) private {\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice sets number of minted tokens of an address during airdrop\\n     * @dev airdrop counter is set at [0..31] bits of '_auxData'\\n     * ([192..223] bits of '_packedAddressData')\\n     * @param _account airdrop recipient\\n     * @param _amount total amount of airdrop\\n     */\\n    function _setAirdropMintCounter(address _account, uint32 _amount) internal {\\n        _setAux(_account, uint64(_amount));\\n    }\\n\\n    /**\\n     * @notice sets number of minted tokens of an address during whitelist mint\\n     * @dev whitelist mint counter is set at [32..63] bits of '_auxData'\\n     * ([224..255] bits of '_packedAddressData')\\n     * @param _account whitelist minter\\n     * @param _amount total amount of whitelist mint of '_account'\\n     */\\n    function _setWhitelistMintCounter(\\n        address _account,\\n        uint32 _amount\\n    ) internal {\\n        uint256 _bitpos = 32;\\n        uint64 _auxData = uint64((uint256(_amount) << _bitpos)) +\\n            uint64(getAirdropMintCounter(_account));\\n        _setAux(_account, _auxData);\\n    }\\n\\n    /**\\n     * @return token id of first token\\n     */\\n    function _startTokenId() internal view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @param _tokenId querying token id\\n     * @return token URI\\n     */\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view virtual override(ERC721A, IERC721A) returns (string memory) {\\n        require(\\n            _exists(_tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        if (_tokenId <= MAX_TOKENS_FOR_AIRDROP) {\\n            return\\n                bytes(AIRDROP_BASE_URI).length > 0\\n                    ? string(\\n                        abi.encodePacked(\\n                            AIRDROP_BASE_URI,\\n                            _tokenId.toString(),\\n                            \\\".json\\\"\\n                        )\\n                    )\\n                    : \\\"\\\";\\n        } else {\\n            if (isRevealed == false) {\\n                return\\n                    bytes(BASE_URI).length > 0\\n                        ? string(abi.encodePacked(BASE_URI, \\\"hidden\\\", \\\".json\\\"))\\n                        : \\\"\\\";\\n            }\\n\\n            return\\n                bytes(BASE_URI).length > 0\\n                    ? string(\\n                        abi.encodePacked(BASE_URI, _tokenId.toString(), \\\".json\\\")\\n                    )\\n                    : \\\"\\\";\\n        }\\n    }\\n\\n    /**\\n     * @dev inherits from ERC721A and bypass approval requests from rarible\\n     * @return true if the operator is rarible\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) public view override(ERC721A, IERC721A) returns (bool) {\\n        if (operator == address(raribleTransferProxy)) {\\n            return true;\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * @notice returns if an address whitelisted or not\\n     * by verifying merkle proof\\n     */\\n    function isWhitelisted(\\n        address _account,\\n        bytes32[] calldata _merkleProof\\n    ) public view returns (bool) {\\n        bytes32 leaf = keccak256(abi.encodePacked(_account));\\n        return MerkleProof.verify(_merkleProof, MERKLE_ROOT, leaf);\\n    }\\n\\n    /**\\n     * @notice returns total airdrop amount of an address\\n     * @dev returns [0..31] bits of '_auxData'\\n     * ([192..223] bits of '_packedAddressData')\\n     * @param _account querying address\\n     */\\n    function getAirdropMintCounter(\\n        address _account\\n    ) public view returns (uint32) {\\n        uint64 _auxData = _getAux(_account);\\n        return uint32(_auxData);\\n    }\\n\\n    /**\\n     * @notice returns total airdrop amount of an address\\n     * @dev returns [32..63] bits of '_auxData'\\n     * ([224..255] bits of '_packedAddressData')\\n     * @param _account querying address\\n     */\\n    function getWhitelistMintCounter(\\n        address _account\\n    ) public view returns (uint32) {\\n        uint64 _auxData = _getAux(_account);\\n        uint256 _bitpos = 32;\\n        return uint32(_auxData >> _bitpos);\\n    }\\n\\n    /**\\n     * @notice returns mint amounts during public sale of addresses\\n     * @dev (total minted) - (minted in whitelist sale) - (minted in airdrop)\\n     */\\n    function getPublicMintCounter(\\n        address _account\\n    ) public view returns (uint256) {\\n        return\\n            _numberMinted(_account) -\\n            uint256(getAirdropMintCounter(_account)) -\\n            uint256(getWhitelistMintCounter(_account));\\n    }\\n\\n    /**\\n     * @notice returns current state of sale\\n     */\\n    function currentState() public view returns (STATE) {\\n        return state;\\n    }\\n\\n    /**\\n     * @notice returns contract balance\\n     */\\n    function contractBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0x83ddfd54ac19fce7fbd82a7bf5d1421b9f3d47198cb69a9caeed5ef89ee6f2c5\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryable.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad83a36e9758f044317e9a5e2903bc49730b6d5de8fbe9a61b2f91fb4c2148c7\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xc14fc938aecdccee7edbd3a3ce60b6171cdc3da3345cfa6d288c268983c48942\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610200604052346200011a5762000032620000196200034c565b9c9b909b9a919a99929998939897949796959662000721565b604051613ea562000c48823960805181818161136501526120e0015260a05181818161139e0152611eb3015260c051818181610ef501528181611c0d01528181611d4c01528181611e920152612654015260e0518181816107100152611f7b015261010051818181610c32015261219b01526101205181818161132c0152612081015261014051818181610db90152611f1f0152610160518181816110fa015261213f015261018051818181610e0d015261226a01526101a05181610cf801526101c05181818161129c01526122bf01526101e051818181610a3d0152612b000152613ea590f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90601f01601f191681019081106001600160401b038211176200015457604052565b6200011e565b90620001716200016960405190565b928362000132565b565b805b036200011a57565b90505190620001718262000173565b6001600160a01b031690565b90565b6001600160a01b03811662000175565b9050519062000171826200019b565b6001600160401b038111620001545760208091020190565b90929192620001eb620001e582620001ba565b6200015a565b93818552602080860192028301928184116200011a57915b838310620002115750505050565b60208091620002218486620001ab565b81520192019162000203565b9080601f830112156200011a5781516200019892602001620001d2565b9190916101c0818403126200011a576200026583826200017d565b926200027581602084016200017d565b9260409062000287838386016200017d565b936200029784606083016200017d565b93620002a781608084016200017d565b93620002b78260a085016200017d565b93620002c78360c086016200017d565b93620002d78460e083016200017d565b93620002e8816101008401620001ab565b93620002f9826101208501620001ab565b936200030a836101408601620001ab565b936200031b846101608301620001ab565b936200032c8161018084016200017d565b936001806101a0850151921b0381116200011a576200019892016200022d565b6200036f62004aed8038038062000363816200015a565b9283398101906200024a565b909192939495969798999a9b9c9d565b6001600160401b0381116200015457602090601f01601f19160190565b90620003ac620001e5836200037f565b918252565b620003bd600b6200039c565b6a496c6b656c42656e6c696b60a81b602082015290565b62000198620003b1565b620003ea60026200039c565b6124a160f11b602082015290565b62000198620003de565b9060ff60a01b9060a01b5b9181191691161790565b634e487b7160e01b5f52602160045260245ffd5b600311156200043657565b62000417565b9062000171826200042b565b62000198906200043c565b9062000467620001986200046f9262000448565b825462000402565b9055565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015620004aa575b6020831014620004a457565b62000473565b91607f169162000498565b915f1960089290920291821b911b6200040d565b6200019862000198620001989290565b9190620004ee620001986200046f93620004c9565b908354620004b5565b62000171915f91620004d9565b81811062000510575050565b806200051f5f600193620004f7565b0162000504565b9190601f81116200053657505050565b6200054862000171935f5260205f2090565b906020601f8401819004830193106200056c575b6020601f90910104019062000504565b90915081906200055c565b6002620005ab6274652f60e81b926200059e604362000597835462000487565b8362000526565b608781555f5260205f2090565b7f697066733a2f2f62616679626569686177706d677135766c6b7537673261616f81557f6375326532653766717a76716537717471346b6176326765326a79356f6a737160018201550155565b620001719062000577565b9060ff906200040d565b9062000620620001986200046f92151590565b825462000603565b634e487b7160e01b5f52601160045260245ffd5b919082018092116200064a57565b62000628565b906001600160a01b03906200040d565b62000198906200018c906001600160a01b031682565b620001989062000660565b620001989062000676565b90620006a0620001986200046f9262000681565b825462000650565b620006b862000198620001989290565b6001600160601b031690565b5f1981146200064a5760010190565b634e487b7160e01b5f52603260045260245ffd5b90620006f1825190565b81101562000703576020809102010190565b620006d3565b90620007159062000681565b5f5260205260405f2090565b9490999895919b97936200077c9b97939d9e9d620007838e6200075862000747620003d4565b62000751620003f8565b906200085b565b5f9e8f6200076881600a62000453565b62000774600c620005f8565b600d6200060d565b8d6200063c565b87106200084957620007e89d620007e29c620007bd9860805260a05260c05260e05261010052610120526101405261016052600b6200068c565b61018052826101a0526101c0526101e052620007db6101f4620006a8565b9062000ba3565b620004c9565b620007f562000198845190565b81101562000844576200083e9062000838600162000832600e6200082b6200081e868a620006e7565b516001600160a01b031690565b9062000709565b6200060d565b620006c4565b620007e8565b509050565b60405163b4fa3fb360e01b8152600490fd5b90620008679162000872565b6200017133620009dd565b62000171918291829182918291829182919062000997565b9062000894815190565b906001600160401b0382116200015457620008bc82620008b5855462000487565b8562000526565b602090601f8311600114620008f9576200046f92915f9183620008ed575b50505f19600883021c1916906002021790565b015190505f80620008da565b601f198316916200090d855f5260205f2090565b925f5b8181106200094c5750916002939185600196941062000933575b50505002019055565b01515f196008601f8516021c191690555f80806200092a565b9193602060018192878701518155019501920162000910565b9062000171916200088a565b905f19906200040d565b906200098f620001986200046f92620004c9565b825462000971565b90620009a9620009b192600262000965565b600362000965565b62000171620009bf62000c3b565b5f6200097b565b62000198906200018c565b620001989054620009c6565b620009e9600a620009d1565b90620009f781600a6200068c565b62000a2e62000a277f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09362000681565b9162000681565b9162000a3960405190565b5f90a3565b1562000a4657565b60405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608490fd5b6200018c62000198620001989290565b620001989062000a9e565b1562000ac157565b60405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606490fd5b6200019860406200015a565b906001600160a01b03199060a01b6200040d565b6200019890620006b8906001600160601b031682565b9062000b50620001986200046f9262000b26565b825462000b12565b620001719162000b909060209062000b8262000b7b82516001600160a01b031690565b856200068c565b01516001600160601b031690565b9062000b3c565b90620001719162000b58565b62000c26620001719262000bd062000bbe620006b862000c2e565b6001600160601b038316111562000a3e565b62000c165f9362000bfb62000be96200018c8762000aae565b6001600160a01b038316141562000ab9565b62000c0562000b06565b948501906001600160a01b03169052565b6001600160601b03166020830152565b600862000b97565b62000198612710620006a8565b620001986001620004c956fe60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a71461036b578063051bcd691461036657806306fdde0314610361578063081812fc1461035c578063095ea7b3146103575780630a887cda146103525780630c3f6acf1461034d57806318160ddd146103485780631dee5cd91461034357806322ad06701461033e57806323b872dd14610339578063271047bc146103345780632a55205a1461032f578063314843131461026c57806342842e0e1461032a57806347992844146103255780634c2612471461032057806351e75e8b1461031b57806354214f69146103165780635a23dd99146103115780635bbb21771461030c5780636352211e1461030757806370a0823114610302578063715018a6146102fd578063763f8d12146102f85780638462151c146102f3578063853828b6146102ee57806385660e00146102e95780638b7afe2e146102e45780638da5cb5b146102df5780638ecff037146102da57806391245736146102d557806395d89b41146102d05780639845047b146102cb57806399a2557a146102c65780639b398f84146102c1578063a22cb465146102bc578063a8550e7e146102b7578063b00741cb146102b2578063b3ab66b0146102ad578063b88d4fde146102a8578063c19d93fb146102a3578063c23dc68f1461029e578063c87b56dd14610299578063cf6a374a14610294578063db4bfb641461028f578063dbddb26a1461028a578063e0cad9b114610285578063e985e9c514610280578063f2fde38b1461027b578063f413889714610276578063f47c84c514610271578063f5b0b8081461026c5763fa2603550361039b57611389565b61081f565b611350565b611317565b6112ff565b6112e3565b611287565b61126c565b6110e5565b6110ca565b61104e565b611027565b610fb7565b610f94565b610f31565b610f19565b610ee0565b610ec7565b610e74565b610e58565b610df8565b610ddd565b610da4565b610d89565b610d37565b610d1c565b610ce3565b610ccb565b610ca4565b610c1d565b610c05565b610bea565b610bcf565b610ba7565b610ab8565b610a86565b610a28565b610a10565b61097f565b610838565b6107f0565b610791565b61077d565b610734565b6106fb565b6106d0565b6106a9565b61062d565b6105aa565b610545565b6104f7565b610451565b6103c9565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361039b57565b5f80fd5b905035906103ac82610370565b565b9060208282031261039b576103c29161039f565b90565b9052565b3461039b576103f76103e46103df3660046103ae565b611874565b6040515b91829182901515815260200190565b0390f35b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116610394565b905035906103ac82610414565b9060208282031261039b576103c291610430565b3461039b576103f761046c61046736600461043d565b612c55565b6040519182918263ffffffff909116815260200190565b5f91031261039b57565b5f5b83811061049e5750505f910152565b818101518382015260200161048f565b6104cf6104d86020936104e2936104c3815190565b80835293849260200190565b9586910161048d565b601f01601f191690565b0190565b60208082526103c2929101906104ae565b3461039b57610507366004610483565b6103f7610512612f3f565b604051918291826104e6565b80610394565b905035906103ac8261051e565b9060208282031261039b576103c291610524565b3461039b576103f761056061055b366004610531565b61311f565b6040519182918273ffffffffffffffffffffffffffffffffffffffff909116815260200190565b919060408382031261039b576103c2906105a18185610430565b93602001610524565b6105be6105b8366004610587565b90613057565b604051005b909182601f8301121561039b5781359167ffffffffffffffff831161039b57602001926020830284011161039b57565b91909160408184031261039b5761060a8382610524565b92602082013567ffffffffffffffff811161039b5761062992016105c3565b9091565b6105be61063b3660046105f3565b91611fea565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003111561067857565b610641565b906103ac8261066e565b6103c29061067d565b6103c590610687565b6020810192916103ac9190610690565b3461039b576106b9366004610483565b6103f76106c4612cb1565b60405191829182610699565b3461039b576106e0366004610483565b6103f76106eb612cd9565b6040519182918290815260200190565b3461039b5761070b366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b3461039b576105be610747366004610587565b90611dc8565b909160608284031261039b576103c26107668484610430565b936107748160208601610430565b93604001610524565b6105be61078b36600461074d565b91613263565b3461039b576103f761046c6107a736600461043d565b612c26565b919060408382031261039b576103c2906105a18185610524565b73ffffffffffffffffffffffffffffffffffffffff90911681526040810192916103ac9160200152565b3461039b576108096108033660046107ac565b90611787565b906103f761081660405190565b928392836107c6565b3461039b576105be610832366004610587565b90612222565b6105be61084636600461074d565b91613512565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f01601f1916810190811067ffffffffffffffff82111761089b57604052565b61084c565b906103ac6108ad60405190565b9283610879565b67ffffffffffffffff811161089b57602090601f01601f19160190565b906108e36108de836108b4565b6108a0565b918252565b6108f260436108d1565b7f697066733a2f2f6261667962656967356d6269696e69726e6464366d34336c3260208201527f6e6f3261343677636e6e7369686f64346f6f32687a6f6972356679786b6c777560408201527f63692f0000000000000000000000000000000000000000000000000000000000606082015290565b6103c26108e8565b6103c2610967565b6103c261096f565b3461039b5761098f366004610483565b6103f7610512610977565b90825f939282370152565b909291926109b56108de826108b4565b9381855260208501908284011161039b576103ac9261099a565b9080601f8301121561039b578160206103c2933591016109a5565b9060208282031261039b57813567ffffffffffffffff811161039b576103c292016109cf565b3461039b576105be610a233660046109ea565b611bb2565b3461039b57610a38366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b6103c2916008021c5b60ff1690565b906103c29154610a61565b6103c25f600d610a70565b3461039b57610a96366004610483565b6103f76103e4610a7b565b91909160408184031261039b5761060a8382610430565b3461039b576103f76103e4610ace366004610aa1565b91612abd565b9060208282031261039b57813567ffffffffffffffff811161039b5761062992016105c3565b90610b1a610b13610b09845190565b8084529260200190565b9260200190565b905f5b818110610b2a5750505090565b909192610b8e610b876001928651805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff169082015260800190565b9460200190565b929101610b1d565b60208082526103c292910190610afa565b3461039b576103f7610bc3610bbd366004610ad4565b90613ae3565b60405191829182610b96565b3461039b576103f7610560610be5366004610531565b612f53565b3461039b576103f76106eb610c0036600461043d565b612d16565b3461039b57610c15366004610483565b6105be611416565b3461039b57610c2d366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b90610c65610b13610b09845190565b905f5b818110610c755750505090565b909192610c8b610b876001928651815260200190565b929101610c68565b60208082526103c292910190610c56565b3461039b576103f7610cbf610cba36600461043d565b613d63565b60405191829182610c93565b3461039b57610cdb366004610483565b6105be612319565b3461039b57610cf3366004610483565b6103f77f0000000000000000000000000000000000000000000000000000000000000000610560565b3461039b57610d2c366004610483565b6103f76106eb612cbb565b3461039b57610d47366004610483565b6103f76105606113d5565b6103c2916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b906103c29154610d52565b6103c25f600b610d73565b3461039b57610d99366004610483565b6103f7610560610d7e565b3461039b57610db4366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b3461039b57610ded366004610483565b6103f7610512612f49565b3461039b57610e08366004610483565b6103f77f0000000000000000000000000000000000000000000000000000000000000000610560565b909160608284031261039b576103c2610e4a8484610430565b936107748160208601610524565b3461039b576103f7610cbf610e6e366004610e31565b91613b53565b3461039b576103f76106eb610e8a36600461043d565b612c83565b801515610394565b905035906103ac82610e8f565b919060408382031261039b576103c290610ebe8185610430565b93602001610e97565b3461039b576105be610eda366004610ea4565b9061316f565b3461039b57610ef0366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b3461039b576105be610f2c366004610531565b611ce1565b6105be610f3f366004610531565b6121cf565b9060808282031261039b57610f598183610430565b92610f678260208501610430565b92610f758360408301610524565b92606082013567ffffffffffffffff811161039b576103c292016109cf565b6105be610fa2366004610f44565b92919091613522565b6103c26014600a610a70565b3461039b57610fc7366004610483565b6103f76106c4610fab565b6080810192916103ac9190805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff16910152565b3461039b576103f761104261103d366004610531565b61392e565b60405191829182610fd2565b3461039b576103f7610512611064366004610531565b612641565b6103fb6103c26103c29273ffffffffffffffffffffffffffffffffffffffff1690565b6103c290611069565b6103c29061108c565b906110a890611095565b5f5260205260405f2090565b6103c2906110c5600e915f9261109e565b610a70565b3461039b576103f76103e46110e036600461043d565b6110b4565b3461039b576110f5366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b7f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b9060016002830492168015611197575b602083101461119257565b61114a565b91607f1691611187565b80545f9392916111bd6111b383611177565b8085529360200190565b916001811690811561120c57506001146111d657505050565b6111e791929394505f5260205f2090565b915f925b8184106111f85750500190565b8054848401526020909301926001016111eb565b92949550505060ff1916825215156020020190565b906103c2916111a1565b906103ac6112459261123c60405190565b93848092611221565b0383610879565b905f1061125c576103c29061122b565b61111e565b6103c25f600c61124c565b3461039b5761127c366004610483565b6103f7610512611261565b3461039b57611297366004610483565b6103f77f0000000000000000000000000000000000000000000000000000000000000000610560565b919060408382031261039b576103c2906112da8185610430565b93602001610430565b3461039b576103f76103e46112f93660046112c0565b906129e7565b3461039b576105be61131236600461043d565b611591565b3461039b57611327366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b3461039b57611360366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b3461039b57611399366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b6103c2906103fb565b6103c290546113c2565b6103c2600a6113cb565b6113e761148c565b6103ac611405565b6103fb6103c26103c29290565b6103c2906113ef565b6103ac6114115f6113fc565b6115d7565b6103ac6113df565b1561142557565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280611488600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6103ac6114976113d5565b6114bd6114a3336103fb565b9173ffffffffffffffffffffffffffffffffffffffff1690565b1461141e565b6103ac906114cf61148c565b611560565b156114db57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b6103ac906114116115736103fb5f6113fc565b73ffffffffffffffffffffffffffffffffffffffff831614156114d4565b6103ac906114c3565b9073ffffffffffffffffffffffffffffffffffffffff905b9181191691161790565b906115cc6103c26115d392611095565b825461159a565b9055565b6115e1600a6113cb565b906115ed81600a6115bc565b61162061161a7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611095565b91611095565b9161162a60405190565b80805b0390a3565b6103c26103c26103c29290565b906110a890611632565b6103c29060a01c5b6bffffffffffffffffffffffff1690565b6103c29054611649565b6103c260406108a0565b906103ac6116b75f61168661166c565b946116b16116958383016113cb565b73ffffffffffffffffffffffffffffffffffffffff1687840152565b01611662565b6bffffffffffffffffffffffff166020840152565b6103c290611676565b6103c26103c26103c2926bffffffffffffffffffffffff1690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9190611728565b9290565b9180830292818404149015171561173b57565b6116f0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b90611777565b9190565b908115611782570490565b611740565b6117a06117a5919392936117985f90565b50600961163f565b6116cc565b916117c4835173ffffffffffffffffffffffffffffffffffffffff1690565b905f916117d66114a36103fb856113fc565b1461183b575b9061181f61180e6117739361180861180360208901516bffffffffffffffffffffffff1690565b6116d5565b9061171d565b611819611803611869565b9061176d565b93015173ffffffffffffffffffffffffffffffffffffffff1690565b92506117739061181f61180e61185160086116cc565b9592935050506117dc565b6116516103c26103c29290565b6103c261271061185c565b61187d81612ea8565b908115611888575090565b6103c291507f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216149081156118dd575090565b6103c2915061192d7f01ffc9a7000000000000000000000000000000000000000000000000000000005b917fffffffff000000000000000000000000000000000000000000000000000000001690565b1490565b6103ac9061193d61148c565b611b08565b6103c29060a01c610a6a565b6103c29054611942565b6103c290610a6a565b6103c29054611958565b9060ff906115b2565b906119846103c26115d392151590565b825461196b565b919060086115b291029161199f5f19841b90565b921b90565b91906119b56103c26115d393611632565b90835461198b565b6103ac915f916119a4565b8181106119d3575050565b806119e05f6001936119bd565b016119c8565b9190601f81116119f557505050565b611a056103ac935f5260205f2090565b906020601f840181900483019310611a27575b6020601f9091010401906119c8565b9091508190611a18565b90611a3a815190565b9067ffffffffffffffff821161089b57611a5e82611a588554611177565b856119e6565b602090601f8311600114611a97576115d392915f9183611a8c575b50505f19600883021c1916906002021790565b015190505f80611a79565b601f19831691611aaa855f5260205f2090565b925f5b818110611ae657509160029391856001969410611ace575b50505002019055565b01515f196008601f8516021c191690555f8080611ac5565b91936020600181928787015181550195019201611aad565b906103ac91611a31565b611b12600a61194e565b611b25611b1f600261067d565b9161067d565b14611b55576040517fede69771000000000000000000000000000000000000000000000000000000008152600490fd5b611b5f600d611961565b611b6b60015b91151590565b14611b87576103ac90611b806001600d611974565b600c611afe565b6040517fa89ac151000000000000000000000000000000000000000000000000000000008152600490fd5b6103ac90611931565b6103ac90611bc761148c565b611c03565b9074ff00000000000000000000000000000000000000009060a01b6115b2565b90611bfc6103c26115d392610687565b8254611bcc565b611c0b612cd9565b7f000000000000000000000000000000000000000000000000000000000000000011611cb6575f611c3b81611632565b8203611c4d576103ac9150600a611bec565b506001611c5981611632565b8203611c6b576103ac9150600a611bec565b50600290611c7b61177383611632565b03611c8b576103ac90600a611bec565b6040517fb4fa3fb3000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fec2c6727000000000000000000000000000000000000000000000000000000008152600490fd5b6103ac90611bbb565b906103ac91611cf761148c565b611d38565b9190820180921161173b57565b611d166103c26103c29290565b63ffffffff1690565b63ffffffff9081169116019063ffffffff821161173b57565b90611d4a81611d45612cd9565b611cfc565b7f000000000000000000000000000000000000000000000000000000000000000010611d9d5781611d98611d92611d836103ac95612c26565b611d8c85611d09565b90611d1f565b826123b4565b6136d5565b6040517fca586aa8000000000000000000000000000000000000000000000000000000008152600490fd5b906103ac91611cea565b9190611de6611de2838333612abd565b1590565b611df3576103ac92611e31565b6040517f48df50e8000000000000000000000000000000000000000000000000000000008152600490fd5b6103c26103c26103c29263ffffffff1690565b915050611e3e600a61194e565b611e4b611b1f600161067d565b14611e7b576040517f5b77ceac000000000000000000000000000000000000000000000000000000008152600490fd5b611e8781611d45612cd9565b611ed76117736103c27f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611cfc565b1115611f08576040517fde42be6c000000000000000000000000000000000000000000000000000000008152600490fd5b611f1d81611d45611f1833612c55565b611e1e565b7f00000000000000000000000000000000000000000000000000000000000000001015611f6f576040517f37ac80a2000000000000000000000000000000000000000000000000000000008152600490fd5b34611fa06117736103c27f00000000000000000000000000000000000000000000000000000000000000008561171d565b10611fbf576103ac9033611d98611fb9611d8383612c55565b82612419565b6040517f6a12f104000000000000000000000000000000000000000000000000000000008152600490fd5b906103ac9291611dd2565b33611fff326114a3565b0361200d576103ac90612038565b6040517fea8370b0000000000000000000000000000000000000000000000000000000008152600490fd5b612042600a61194e565b61204f611b1f600261067d565b1461207f576040517faf1fd675000000000000000000000000000000000000000000000000000000008152600490fd5b7f00000000000000000000000000000000000000000000000000000000000000008111156120d2576040517f6b350169000000000000000000000000000000000000000000000000000000008152600490fd5b6120de81611d45612cd9565b7f00000000000000000000000000000000000000000000000000000000000000001015612130576040517f8a164f63000000000000000000000000000000000000000000000000000000008152600490fd5b61213d81611d4533612c83565b7f0000000000000000000000000000000000000000000000000000000000000000101561218f576040517f2fa72bd8000000000000000000000000000000000000000000000000000000008152600490fd5b346121c06117736103c27f00000000000000000000000000000000000000000000000000000000000000008561171d565b10611fbf576103ac90336136d5565b6103ac90611ff5565b50506121f1611de26121ec600e339061109e565b611961565b6121f757565b6040517f55098f27000000000000000000000000000000000000000000000000000000008152600490fd5b906103ac916121d8565b61223461148c565b6103ac612243565b1561039b57565b61224c30611095565b5f6122ef823161226561225e84611632565b821161223c565b6122b17f00000000000000000000000000000000000000000000000000000000000000006122b76122a061229a6103b6611632565b8561171d565b916122b16103e89361181985611632565b9061233f565b6118196122e97f0000000000000000000000000000000000000000000000000000000000000000946118086032611632565b91611632565b6122fd611773833192611632565b116123055750565b6103ac906123116113d5565b90319061233f565b6103ac61222c565b3d1561233a576123303d6108d1565b903d5f602084013e565b606090565b5f80916123639361234f60405190565b90818003925af161235e612321565b501590565b61236957565b6040517f90b8ec18000000000000000000000000000000000000000000000000000000008152600490fd5b6123a76103c26103c29263ffffffff1690565b67ffffffffffffffff1690565b6123c06103ac92612394565b90612e31565b6103c2906123d76117736103c29490565b901b90565b6123a76103c26103c29290565b6124069067ffffffffffffffff165b9167ffffffffffffffff1690565b019067ffffffffffffffff821161173b57565b6123c061244361243e6103ac946124396124336020611632565b91611e1e565b6123c6565b6123dc565b61245461244f84612c26565b612394565b906123e9565b1561246157565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b6103c29054611177565b6103c25f6108d1565b6103c26124f0565b80545f93929161251761251383611177565b9390565b9160018116908115612565575060011461253057505050565b61254191929394505f5260205f2090565b5f905b8382106125515750500190565b600181602092548486015201910190612544565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001683525050811515909102019150565b6125a66125cf916103c293612501565b7f68696464656e0000000000000000000000000000000000000000000000000000815260060190565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000815260050190565b6104e26126109260209261260a815190565b94859290565b9384910161048d565b9161262a6103c2936125cf93612501565b906125f8565b9161262a6103c2936125cf936125f8565b61265261264d826131e7565b61245a565b7f000000000000000000000000000000000000000000000000000000000000000081116126e55761268b6126876103c261096f565b5190565b6126976117735f611632565b11156126dc576126d06103c26103c2926126b86126b261096f565b916127b3565b906126c260405190565b938492602084019283612630565b90810382520382610879565b506103c26124f9565b6126ef600d611961565b5f906126fa82611b65565b1461275257600c90612717611773612711846124e6565b92611632565b1115612748576103c26126d0916127306103c2946127b3565b9061273a60405190565b938492602084019283612619565b50506103c26124f9565b600c9150612765611773612711846124e6565b11156126dc576103c2906103c261277b60405190565b80926126d0602083019182612596565b369037565b906103ac6127a66127a0846108d1565b936108b4565b601f19016020840161278b565b6127bc81612844565b906127cc6001926104e284611632565b91806127d784612790565b936020018401905b6127ea575b50505090565b612824905f1901927f3031323334353637383961626364656600000000000000000000000000000000600a82061a8453611819600a611632565b90816128326117735f611632565b1461283f579091816127df565b6127e4565b61284d5f611632565b907a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000061287381611632565b8210156129c5575b506d04ee2d6d415b85acef810000000061289481611632565b8210156129a3575b50662386f26fc100006128ae81611632565b821015612981575b506305f5e1006128c581611632565b82101561295f575b506127106128da81611632565b82101561293d575b5060646128ee81611632565b82101561291b575b50612904611773600a611632565b101561290d5790565b6103c2906104e26001611632565b6129369161181961292b92611632565b916104e26002611632565b905f6128f6565b6129589161181961294d92611632565b916104e26004611632565b905f6128e2565b61297a9161181961296f92611632565b916104e26008611632565b905f6128cd565b61299c9161181961299192611632565b916104e26010611632565b905f6128b6565b6129be916118196129b392611632565b916104e26020611632565b905f61289c565b6129e0916118196129d592611632565b916104e26040611632565b905f61287b565b906129f56103fb600b6113cb565b73ffffffffffffffffffffffffffffffffffffffff821614612a1a576103c2916131cd565b5050600190565b6103c59073ffffffffffffffffffffffffffffffffffffffff1660601b90565b6104e281601493612a21565b67ffffffffffffffff811161089b5760208091020190565b90929192612a756108de82612a4d565b938185526020808601920283019281841161039b57915b838310612a995750505050565b60208091612aa78486610524565b815201920191612a8c565b6103c2913691612a65565b90612b256103c29392612acd5f90565b50612aea612ada60405190565b80926126d0602083019182612a41565b612afc612af5825190565b9160200190565b20927f000000000000000000000000000000000000000000000000000000000000000092612ab2565b61172461192d929361177392612b385f90565b50612b98565b5f19811461173b5760010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b90612b82825190565b811015612b93576020809102010190565b612b4c565b612ba15f611632565b915b612bae6103c2835190565b831015612be057612bd4612bda91612bce612bc98686612b79565b612687565b90612be6565b92612b3e565b91612ba3565b91505090565b81811015612bff57906103c2915f5260205260405f2090565b6103c2915f5260205260405f2090565b611d166103c26103c29267ffffffffffffffff1690565b612c3a6103c291612c345f90565b50612dd4565b612c0f565b6123a790612c506123f86103c29490565b901c90565b612c3a612c666103c292612c345f90565b612c706020611632565b90612c3f565b9190820391821161173b57565b6103c290612ca5611f18612cab612c9984612da3565b612ca5611f1886612c26565b90612c76565b92612c55565b6103c2600a61194e565b612cc430611095565b3190565b6103c29081565b6103c29054612cc8565b6103c2612cf7612ce85f612ccf565b612cf26001612ccf565b900390565b612cf25b6103c26001611632565b6103c267ffffffffffffffff611632565b612d226103fb5f6113fc565b73ffffffffffffffffffffffffffffffffffffffff821614612d5d57612d4c612d5191600561109e565b612ccf565b612d59612d05565b1690565b6040517f8f4eb604000000000000000000000000000000000000000000000000000000008152600490fd5b6103c26040611632565b6103c290612c506117736103c29490565b612dbc612d4c612d5192612db45f90565b50600561109e565b612dc4612d88565b90612d92565b6103c260c0611632565b61243e612de8612d4c6103c293612db45f90565b612dc4612dca565b6103c277ffffffffffffffffffffffffffffffffffffffffffffffff611632565b905f19906115b2565b90612e2a6103c26115d392611632565b8254612e11565b90612e6b6103ac92600592612e64612e4c612d4c848761109e565b612e54612df0565b1691612e5e612dca565b906123c6565b179261109e565b612e1a565b612e83612e7d6103c29290565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b612eb56301ffc9a7612e70565b7fffffffff00000000000000000000000000000000000000000000000000000000821614908115612efd575b8115612eeb575090565b905061192d611907635b5e139f612e70565b9050612f0c6380ac58cd612e70565b7fffffffff0000000000000000000000000000000000000000000000000000000082161490612ee1565b6103c29061122b565b6103c26002612f36565b6103c26003612f36565b612f6f612f6a6103c292612f645f90565b50612f9a565b6113ef565b61108c565b6103c27c0100000000000000000000000000000000000000000000000000000000611632565b908190612fa5612cfb565b831015612fd8575b6040517fdf2d9b42000000000000000000000000000000000000000000000000000000008152600490fd5b612fe46103c25f612ccf565b831015612fad57612ffa612d4c6004948561163f565b80613003612f74565b165f9061301261177383611632565b1461301e575050612fad565b92905b61302a84611632565b810361304f57505f19019161302a613045612d4c858761163f565b9193919050613021565b925050915090565b9061306181612f53565b913373ffffffffffffffffffffffffffffffffffffffff841681036130dd575b50613098815f61309285600661163f565b016115bc565b6130ce6127116130c87f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92595611095565b92611095565b926130d860405190565b5f90a4565b611de26130ea91856129e7565b6130f4575f613081565b6040517fcfb3b942000000000000000000000000000000000000000000000000000000008152600490fd5b61312b611de2826131e7565b613144575f61313e6103c292600661163f565b016113cb565b6040517fcf4700e4000000000000000000000000000000000000000000000000000000008152600490fd5b3361318d836131888461318385600761109e565b61109e565b611974565b61162d6131c36131bd7f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3193611095565b93611095565b936103e860405190565b6103c2916131836121ec926131df5f90565b50600761109e565b6131ef612cfb565b8110159081613227575b81613202575090565b6132129150612d4c90600461163f565b61321a612f74565b1661192d6117735f611632565b90506132356103c25f612ccf565b8110906131f9565b6103c27c0200000000000000000000000000000000000000000000000000000000611632565b919061326e82612f9a565b61327a612f6f826113ef565b61329973ffffffffffffffffffffffffffffffffffffffff86166114a3565b0361349e576132a7836134f6565b909190336132b9611de28289856134c9565b61345c575b505f926132cd6103fb856113fc565b73ffffffffffffffffffffffffffffffffffffffff861614613431578391613429575b50506133326133208460056131836133088a8361109e565b61331a61331482612ccf565b5f190190565b90612e1a565b61331a61332c82612ccf565b60010190565b61333a61323d565b61336b6133488386896138b7565b82178573ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b9061337c600492612e6b888561163f565b821661338a61177385611632565b146133c3575b5050506130ce6127116130c87fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95611095565b6133d56133d06001611632565b860190565b926133e3612d4c858461163f565b6133ef61177383611632565b146133fb575b50613390565b6103c261340791612ccf565b8303613414575b806133f5565b61342192612e6b9161163f565b5f808061340e565b55815f6132f0565b6040517fea553b34000000000000000000000000000000000000000000000000000000008152600490fd5b611de261346991886129e7565b613473575f6132be565b6040517f59c896be000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fa1148100000000000000000000000000000000000000000000000000000000008152600490fd5b919073ffffffffffffffffffffffffffffffffffffffff80916134e95f90565b5016911691821491141790565b6103c261350c916135045f90565b50600661163f565b90815490565b90916103ac926135206124f9565b925b91929092613531818585613263565b833b61353f6117735f611632565b0361354b575b50505050565b61355893611de293613603565b613565575f808080613545565b6040515b7fd1a57ed6000000000000000000000000000000000000000000000000000000008152600490fd5b905051906103ac82610370565b9060208282031261039b576103c291613591565b73ffffffffffffffffffffffffffffffffffffffff91821681529116602082015260408101919091526080606082018190526103c2929101906104ae565b612e83612e7d6103c29263ffffffff1690565b9093929160209061361c6136175f97611095565b611095565b63150b7a02935f3361364c61363060405190565b988996879586946136418c60e01b90565b8652600486016135b2565b03925af15f92816136a5575b50613692575050600161366757565b61366f612321565b805161367d6117735f611632565b0361368a57604051613569565b805190602001fd5b61192d91929350612e83611907916135f0565b6136c791935060203d81116136ce575b6136bf8183610879565b81019061359e565b915f613658565b503d6136b5565b9190916136e15f612ccf565b925f906136ed82611632565b811461385b57846137af849273ffffffffffffffffffffffffffffffffffffffff600192839261375261373a613721612d88565b61373461372d88611632565b91826123c6565b17830290565b61331a6137488a600561109e565b916104e283612ccf565b6137aa61379e6001831460e11b61377c61376b8c6113fc565b6137748d611632565b9b8c916138b7565b178b73ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b612e6b60049d8e61163f565b850190565b9616928084877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4015b85810361382c575050146137f4576103ac929350612e1a565b6114888461380160405190565b7f2e076300000000000000000000000000000000000000000000000000000000008152918291820190565b80829184877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4016137db565b6040517fb562e8dd000000000000000000000000000000000000000000000000000000008152600490fd5b6103c260e8611632565b61389d6103c26103c29290565b62ffffff1690565b6103c26103c26103c29262ffffff1690565b6138eb612439916103c294936138ca5f90565b506138e56138e06138d9613886565b8097612d92565b613890565b916138f0565b6138a5565b5050506103c25f90565b6103c260806108a0565b61390c6138fa565b5f8082526020820181905260408201819052606082015290565b6103c2613904565b613936613926565b5061393f613926565b61394a6103c2612cfb565b82108015613986575b6139815750613961816139b7565b9061396f6040830151151590565b61397d576103c291506139a3565b5090565b905090565b506139926103c261399a565b821015613953565b6103c25f612ccf565b6139b26103c291612f64613926565b6139db565b6139b2612d4c6103c2926139c9613926565b50600461163f565b6103c260a0611632565b906103ac6139e7613926565b6060613a6c6138e08396613a1a613a00612f6f836113ef565b73ffffffffffffffffffffffffffffffffffffffff168652565b613a42613a3161243e613a2b6139d1565b84612d92565b67ffffffffffffffff166020870152565b613a64613a4d612f74565b8216613a5b6117735f611632565b14156040870152565b612dc4613886565b62ffffff16910152565b906108e36108de83612a4d565b5f5b828110613a9157505050565b602090613a9c613926565b8184015201613a85565b906103ac613abc613ab684613a76565b93612a4d565b601f190160208401613a83565b9190811015612b93576020020190565b356103c28161051e565b91908092613af084613aa6565b925f5b855b8114613b3b57613b3481613b1861103d613b13613af5958989613ac9565b613ad9565b613b228289612b79565b52613b2d8188612b79565b5060010190565b9050613af3565b509350505090565b906103ac6127a6613ab684613a76565b9082811015613d38575f91613b6661399a565b613b6e612cfb565b808410613d30575b50808511613d28575b50613b8981612d16565b84831015613d1957828503818110613d11575b505b613ba781613b43565b955f91613bb383611632565b8114613d0857613bc28561392e565b945f95613bd5611de26040830151151590565b613ce5575b505b875b81141580613cdb575b15613cce5783613bf6826139b7565b6040810151613cbf5701805173ffffffffffffffffffffffffffffffffffffffff16613c276114a36103fb886113fc565b03613ca0575b508873ffffffffffffffffffffffffffffffffffffffff861673ffffffffffffffffffffffffffffffffffffffff881614613c73575b50613bde906001015b9050613bdc565b9681613c97613bde93613c9484613c8e613c6c969160010190565b9c612b79565b52565b91505088613c63565b5173ffffffffffffffffffffffffffffffffffffffff1695505f613c2d565b5050613c6c613bde9160010190565b5050959450505050815290565b5081871415613be7565b84015173ffffffffffffffffffffffffffffffffffffffff169550613bde613bda565b50945050505050565b90505f613b9c565b50613d235f611632565b613b9e565b93505f613b7f565b92505f613b76565b6040517f32c1995a000000000000000000000000000000000000000000000000000000008152600490fd5b5f80613d6e83612d16565b92613d7884613b43565b94613d81613926565b50613d8a612cfb565b855b8514613e6757613d9b816139b7565b6040810151613e5a57805173ffffffffffffffffffffffffffffffffffffffff16905f91613dce6114a36103fb856113fc565b03613e35575b5050613e1c613d8c91613dfa8573ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff871614613e235760010190565b9050613d8a565b61332c81613c9460018a01998c612b79565b015173ffffffffffffffffffffffffffffffffffffffff169350613e1c613d8c613dd4565b50613d8c90600101613e1c565b50935050505056fea2646970667358221220892c37371e5ecaf07b2328f54ea42d01fd9d780834e656bc5820b91334dda4a764736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a71461036b578063051bcd691461036657806306fdde0314610361578063081812fc1461035c578063095ea7b3146103575780630a887cda146103525780630c3f6acf1461034d57806318160ddd146103485780631dee5cd91461034357806322ad06701461033e57806323b872dd14610339578063271047bc146103345780632a55205a1461032f578063314843131461026c57806342842e0e1461032a57806347992844146103255780634c2612471461032057806351e75e8b1461031b57806354214f69146103165780635a23dd99146103115780635bbb21771461030c5780636352211e1461030757806370a0823114610302578063715018a6146102fd578063763f8d12146102f85780638462151c146102f3578063853828b6146102ee57806385660e00146102e95780638b7afe2e146102e45780638da5cb5b146102df5780638ecff037146102da57806391245736146102d557806395d89b41146102d05780639845047b146102cb57806399a2557a146102c65780639b398f84146102c1578063a22cb465146102bc578063a8550e7e146102b7578063b00741cb146102b2578063b3ab66b0146102ad578063b88d4fde146102a8578063c19d93fb146102a3578063c23dc68f1461029e578063c87b56dd14610299578063cf6a374a14610294578063db4bfb641461028f578063dbddb26a1461028a578063e0cad9b114610285578063e985e9c514610280578063f2fde38b1461027b578063f413889714610276578063f47c84c514610271578063f5b0b8081461026c5763fa2603550361039b57611389565b61081f565b611350565b611317565b6112ff565b6112e3565b611287565b61126c565b6110e5565b6110ca565b61104e565b611027565b610fb7565b610f94565b610f31565b610f19565b610ee0565b610ec7565b610e74565b610e58565b610df8565b610ddd565b610da4565b610d89565b610d37565b610d1c565b610ce3565b610ccb565b610ca4565b610c1d565b610c05565b610bea565b610bcf565b610ba7565b610ab8565b610a86565b610a28565b610a10565b61097f565b610838565b6107f0565b610791565b61077d565b610734565b6106fb565b6106d0565b6106a9565b61062d565b6105aa565b610545565b6104f7565b610451565b6103c9565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361039b57565b5f80fd5b905035906103ac82610370565b565b9060208282031261039b576103c29161039f565b90565b9052565b3461039b576103f76103e46103df3660046103ae565b611874565b6040515b91829182901515815260200190565b0390f35b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116610394565b905035906103ac82610414565b9060208282031261039b576103c291610430565b3461039b576103f761046c61046736600461043d565b612c55565b6040519182918263ffffffff909116815260200190565b5f91031261039b57565b5f5b83811061049e5750505f910152565b818101518382015260200161048f565b6104cf6104d86020936104e2936104c3815190565b80835293849260200190565b9586910161048d565b601f01601f191690565b0190565b60208082526103c2929101906104ae565b3461039b57610507366004610483565b6103f7610512612f3f565b604051918291826104e6565b80610394565b905035906103ac8261051e565b9060208282031261039b576103c291610524565b3461039b576103f761056061055b366004610531565b61311f565b6040519182918273ffffffffffffffffffffffffffffffffffffffff909116815260200190565b919060408382031261039b576103c2906105a18185610430565b93602001610524565b6105be6105b8366004610587565b90613057565b604051005b909182601f8301121561039b5781359167ffffffffffffffff831161039b57602001926020830284011161039b57565b91909160408184031261039b5761060a8382610524565b92602082013567ffffffffffffffff811161039b5761062992016105c3565b9091565b6105be61063b3660046105f3565b91611fea565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003111561067857565b610641565b906103ac8261066e565b6103c29061067d565b6103c590610687565b6020810192916103ac9190610690565b3461039b576106b9366004610483565b6103f76106c4612cb1565b60405191829182610699565b3461039b576106e0366004610483565b6103f76106eb612cd9565b6040519182918290815260200190565b3461039b5761070b366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b3461039b576105be610747366004610587565b90611dc8565b909160608284031261039b576103c26107668484610430565b936107748160208601610430565b93604001610524565b6105be61078b36600461074d565b91613263565b3461039b576103f761046c6107a736600461043d565b612c26565b919060408382031261039b576103c2906105a18185610524565b73ffffffffffffffffffffffffffffffffffffffff90911681526040810192916103ac9160200152565b3461039b576108096108033660046107ac565b90611787565b906103f761081660405190565b928392836107c6565b3461039b576105be610832366004610587565b90612222565b6105be61084636600461074d565b91613512565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f01601f1916810190811067ffffffffffffffff82111761089b57604052565b61084c565b906103ac6108ad60405190565b9283610879565b67ffffffffffffffff811161089b57602090601f01601f19160190565b906108e36108de836108b4565b6108a0565b918252565b6108f260436108d1565b7f697066733a2f2f6261667962656967356d6269696e69726e6464366d34336c3260208201527f6e6f3261343677636e6e7369686f64346f6f32687a6f6972356679786b6c777560408201527f63692f0000000000000000000000000000000000000000000000000000000000606082015290565b6103c26108e8565b6103c2610967565b6103c261096f565b3461039b5761098f366004610483565b6103f7610512610977565b90825f939282370152565b909291926109b56108de826108b4565b9381855260208501908284011161039b576103ac9261099a565b9080601f8301121561039b578160206103c2933591016109a5565b9060208282031261039b57813567ffffffffffffffff811161039b576103c292016109cf565b3461039b576105be610a233660046109ea565b611bb2565b3461039b57610a38366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b6103c2916008021c5b60ff1690565b906103c29154610a61565b6103c25f600d610a70565b3461039b57610a96366004610483565b6103f76103e4610a7b565b91909160408184031261039b5761060a8382610430565b3461039b576103f76103e4610ace366004610aa1565b91612abd565b9060208282031261039b57813567ffffffffffffffff811161039b5761062992016105c3565b90610b1a610b13610b09845190565b8084529260200190565b9260200190565b905f5b818110610b2a5750505090565b909192610b8e610b876001928651805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff169082015260800190565b9460200190565b929101610b1d565b60208082526103c292910190610afa565b3461039b576103f7610bc3610bbd366004610ad4565b90613ae3565b60405191829182610b96565b3461039b576103f7610560610be5366004610531565b612f53565b3461039b576103f76106eb610c0036600461043d565b612d16565b3461039b57610c15366004610483565b6105be611416565b3461039b57610c2d366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b90610c65610b13610b09845190565b905f5b818110610c755750505090565b909192610c8b610b876001928651815260200190565b929101610c68565b60208082526103c292910190610c56565b3461039b576103f7610cbf610cba36600461043d565b613d63565b60405191829182610c93565b3461039b57610cdb366004610483565b6105be612319565b3461039b57610cf3366004610483565b6103f77f0000000000000000000000000000000000000000000000000000000000000000610560565b3461039b57610d2c366004610483565b6103f76106eb612cbb565b3461039b57610d47366004610483565b6103f76105606113d5565b6103c2916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b906103c29154610d52565b6103c25f600b610d73565b3461039b57610d99366004610483565b6103f7610560610d7e565b3461039b57610db4366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b3461039b57610ded366004610483565b6103f7610512612f49565b3461039b57610e08366004610483565b6103f77f0000000000000000000000000000000000000000000000000000000000000000610560565b909160608284031261039b576103c2610e4a8484610430565b936107748160208601610524565b3461039b576103f7610cbf610e6e366004610e31565b91613b53565b3461039b576103f76106eb610e8a36600461043d565b612c83565b801515610394565b905035906103ac82610e8f565b919060408382031261039b576103c290610ebe8185610430565b93602001610e97565b3461039b576105be610eda366004610ea4565b9061316f565b3461039b57610ef0366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b3461039b576105be610f2c366004610531565b611ce1565b6105be610f3f366004610531565b6121cf565b9060808282031261039b57610f598183610430565b92610f678260208501610430565b92610f758360408301610524565b92606082013567ffffffffffffffff811161039b576103c292016109cf565b6105be610fa2366004610f44565b92919091613522565b6103c26014600a610a70565b3461039b57610fc7366004610483565b6103f76106c4610fab565b6080810192916103ac9190805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff16910152565b3461039b576103f761104261103d366004610531565b61392e565b60405191829182610fd2565b3461039b576103f7610512611064366004610531565b612641565b6103fb6103c26103c29273ffffffffffffffffffffffffffffffffffffffff1690565b6103c290611069565b6103c29061108c565b906110a890611095565b5f5260205260405f2090565b6103c2906110c5600e915f9261109e565b610a70565b3461039b576103f76103e46110e036600461043d565b6110b4565b3461039b576110f5366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b7f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b9060016002830492168015611197575b602083101461119257565b61114a565b91607f1691611187565b80545f9392916111bd6111b383611177565b8085529360200190565b916001811690811561120c57506001146111d657505050565b6111e791929394505f5260205f2090565b915f925b8184106111f85750500190565b8054848401526020909301926001016111eb565b92949550505060ff1916825215156020020190565b906103c2916111a1565b906103ac6112459261123c60405190565b93848092611221565b0383610879565b905f1061125c576103c29061122b565b61111e565b6103c25f600c61124c565b3461039b5761127c366004610483565b6103f7610512611261565b3461039b57611297366004610483565b6103f77f0000000000000000000000000000000000000000000000000000000000000000610560565b919060408382031261039b576103c2906112da8185610430565b93602001610430565b3461039b576103f76103e46112f93660046112c0565b906129e7565b3461039b576105be61131236600461043d565b611591565b3461039b57611327366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b3461039b57611360366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b3461039b57611399366004610483565b6103f77f00000000000000000000000000000000000000000000000000000000000000006106eb565b6103c2906103fb565b6103c290546113c2565b6103c2600a6113cb565b6113e761148c565b6103ac611405565b6103fb6103c26103c29290565b6103c2906113ef565b6103ac6114115f6113fc565b6115d7565b6103ac6113df565b1561142557565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280611488600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6103ac6114976113d5565b6114bd6114a3336103fb565b9173ffffffffffffffffffffffffffffffffffffffff1690565b1461141e565b6103ac906114cf61148c565b611560565b156114db57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b6103ac906114116115736103fb5f6113fc565b73ffffffffffffffffffffffffffffffffffffffff831614156114d4565b6103ac906114c3565b9073ffffffffffffffffffffffffffffffffffffffff905b9181191691161790565b906115cc6103c26115d392611095565b825461159a565b9055565b6115e1600a6113cb565b906115ed81600a6115bc565b61162061161a7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611095565b91611095565b9161162a60405190565b80805b0390a3565b6103c26103c26103c29290565b906110a890611632565b6103c29060a01c5b6bffffffffffffffffffffffff1690565b6103c29054611649565b6103c260406108a0565b906103ac6116b75f61168661166c565b946116b16116958383016113cb565b73ffffffffffffffffffffffffffffffffffffffff1687840152565b01611662565b6bffffffffffffffffffffffff166020840152565b6103c290611676565b6103c26103c26103c2926bffffffffffffffffffffffff1690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9190611728565b9290565b9180830292818404149015171561173b57565b6116f0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b90611777565b9190565b908115611782570490565b611740565b6117a06117a5919392936117985f90565b50600961163f565b6116cc565b916117c4835173ffffffffffffffffffffffffffffffffffffffff1690565b905f916117d66114a36103fb856113fc565b1461183b575b9061181f61180e6117739361180861180360208901516bffffffffffffffffffffffff1690565b6116d5565b9061171d565b611819611803611869565b9061176d565b93015173ffffffffffffffffffffffffffffffffffffffff1690565b92506117739061181f61180e61185160086116cc565b9592935050506117dc565b6116516103c26103c29290565b6103c261271061185c565b61187d81612ea8565b908115611888575090565b6103c291507f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216149081156118dd575090565b6103c2915061192d7f01ffc9a7000000000000000000000000000000000000000000000000000000005b917fffffffff000000000000000000000000000000000000000000000000000000001690565b1490565b6103ac9061193d61148c565b611b08565b6103c29060a01c610a6a565b6103c29054611942565b6103c290610a6a565b6103c29054611958565b9060ff906115b2565b906119846103c26115d392151590565b825461196b565b919060086115b291029161199f5f19841b90565b921b90565b91906119b56103c26115d393611632565b90835461198b565b6103ac915f916119a4565b8181106119d3575050565b806119e05f6001936119bd565b016119c8565b9190601f81116119f557505050565b611a056103ac935f5260205f2090565b906020601f840181900483019310611a27575b6020601f9091010401906119c8565b9091508190611a18565b90611a3a815190565b9067ffffffffffffffff821161089b57611a5e82611a588554611177565b856119e6565b602090601f8311600114611a97576115d392915f9183611a8c575b50505f19600883021c1916906002021790565b015190505f80611a79565b601f19831691611aaa855f5260205f2090565b925f5b818110611ae657509160029391856001969410611ace575b50505002019055565b01515f196008601f8516021c191690555f8080611ac5565b91936020600181928787015181550195019201611aad565b906103ac91611a31565b611b12600a61194e565b611b25611b1f600261067d565b9161067d565b14611b55576040517fede69771000000000000000000000000000000000000000000000000000000008152600490fd5b611b5f600d611961565b611b6b60015b91151590565b14611b87576103ac90611b806001600d611974565b600c611afe565b6040517fa89ac151000000000000000000000000000000000000000000000000000000008152600490fd5b6103ac90611931565b6103ac90611bc761148c565b611c03565b9074ff00000000000000000000000000000000000000009060a01b6115b2565b90611bfc6103c26115d392610687565b8254611bcc565b611c0b612cd9565b7f000000000000000000000000000000000000000000000000000000000000000011611cb6575f611c3b81611632565b8203611c4d576103ac9150600a611bec565b506001611c5981611632565b8203611c6b576103ac9150600a611bec565b50600290611c7b61177383611632565b03611c8b576103ac90600a611bec565b6040517fb4fa3fb3000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fec2c6727000000000000000000000000000000000000000000000000000000008152600490fd5b6103ac90611bbb565b906103ac91611cf761148c565b611d38565b9190820180921161173b57565b611d166103c26103c29290565b63ffffffff1690565b63ffffffff9081169116019063ffffffff821161173b57565b90611d4a81611d45612cd9565b611cfc565b7f000000000000000000000000000000000000000000000000000000000000000010611d9d5781611d98611d92611d836103ac95612c26565b611d8c85611d09565b90611d1f565b826123b4565b6136d5565b6040517fca586aa8000000000000000000000000000000000000000000000000000000008152600490fd5b906103ac91611cea565b9190611de6611de2838333612abd565b1590565b611df3576103ac92611e31565b6040517f48df50e8000000000000000000000000000000000000000000000000000000008152600490fd5b6103c26103c26103c29263ffffffff1690565b915050611e3e600a61194e565b611e4b611b1f600161067d565b14611e7b576040517f5b77ceac000000000000000000000000000000000000000000000000000000008152600490fd5b611e8781611d45612cd9565b611ed76117736103c27f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611cfc565b1115611f08576040517fde42be6c000000000000000000000000000000000000000000000000000000008152600490fd5b611f1d81611d45611f1833612c55565b611e1e565b7f00000000000000000000000000000000000000000000000000000000000000001015611f6f576040517f37ac80a2000000000000000000000000000000000000000000000000000000008152600490fd5b34611fa06117736103c27f00000000000000000000000000000000000000000000000000000000000000008561171d565b10611fbf576103ac9033611d98611fb9611d8383612c55565b82612419565b6040517f6a12f104000000000000000000000000000000000000000000000000000000008152600490fd5b906103ac9291611dd2565b33611fff326114a3565b0361200d576103ac90612038565b6040517fea8370b0000000000000000000000000000000000000000000000000000000008152600490fd5b612042600a61194e565b61204f611b1f600261067d565b1461207f576040517faf1fd675000000000000000000000000000000000000000000000000000000008152600490fd5b7f00000000000000000000000000000000000000000000000000000000000000008111156120d2576040517f6b350169000000000000000000000000000000000000000000000000000000008152600490fd5b6120de81611d45612cd9565b7f00000000000000000000000000000000000000000000000000000000000000001015612130576040517f8a164f63000000000000000000000000000000000000000000000000000000008152600490fd5b61213d81611d4533612c83565b7f0000000000000000000000000000000000000000000000000000000000000000101561218f576040517f2fa72bd8000000000000000000000000000000000000000000000000000000008152600490fd5b346121c06117736103c27f00000000000000000000000000000000000000000000000000000000000000008561171d565b10611fbf576103ac90336136d5565b6103ac90611ff5565b50506121f1611de26121ec600e339061109e565b611961565b6121f757565b6040517f55098f27000000000000000000000000000000000000000000000000000000008152600490fd5b906103ac916121d8565b61223461148c565b6103ac612243565b1561039b57565b61224c30611095565b5f6122ef823161226561225e84611632565b821161223c565b6122b17f00000000000000000000000000000000000000000000000000000000000000006122b76122a061229a6103b6611632565b8561171d565b916122b16103e89361181985611632565b9061233f565b6118196122e97f0000000000000000000000000000000000000000000000000000000000000000946118086032611632565b91611632565b6122fd611773833192611632565b116123055750565b6103ac906123116113d5565b90319061233f565b6103ac61222c565b3d1561233a576123303d6108d1565b903d5f602084013e565b606090565b5f80916123639361234f60405190565b90818003925af161235e612321565b501590565b61236957565b6040517f90b8ec18000000000000000000000000000000000000000000000000000000008152600490fd5b6123a76103c26103c29263ffffffff1690565b67ffffffffffffffff1690565b6123c06103ac92612394565b90612e31565b6103c2906123d76117736103c29490565b901b90565b6123a76103c26103c29290565b6124069067ffffffffffffffff165b9167ffffffffffffffff1690565b019067ffffffffffffffff821161173b57565b6123c061244361243e6103ac946124396124336020611632565b91611e1e565b6123c6565b6123dc565b61245461244f84612c26565b612394565b906123e9565b1561246157565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b6103c29054611177565b6103c25f6108d1565b6103c26124f0565b80545f93929161251761251383611177565b9390565b9160018116908115612565575060011461253057505050565b61254191929394505f5260205f2090565b5f905b8382106125515750500190565b600181602092548486015201910190612544565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001683525050811515909102019150565b6125a66125cf916103c293612501565b7f68696464656e0000000000000000000000000000000000000000000000000000815260060190565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000815260050190565b6104e26126109260209261260a815190565b94859290565b9384910161048d565b9161262a6103c2936125cf93612501565b906125f8565b9161262a6103c2936125cf936125f8565b61265261264d826131e7565b61245a565b7f000000000000000000000000000000000000000000000000000000000000000081116126e55761268b6126876103c261096f565b5190565b6126976117735f611632565b11156126dc576126d06103c26103c2926126b86126b261096f565b916127b3565b906126c260405190565b938492602084019283612630565b90810382520382610879565b506103c26124f9565b6126ef600d611961565b5f906126fa82611b65565b1461275257600c90612717611773612711846124e6565b92611632565b1115612748576103c26126d0916127306103c2946127b3565b9061273a60405190565b938492602084019283612619565b50506103c26124f9565b600c9150612765611773612711846124e6565b11156126dc576103c2906103c261277b60405190565b80926126d0602083019182612596565b369037565b906103ac6127a66127a0846108d1565b936108b4565b601f19016020840161278b565b6127bc81612844565b906127cc6001926104e284611632565b91806127d784612790565b936020018401905b6127ea575b50505090565b612824905f1901927f3031323334353637383961626364656600000000000000000000000000000000600a82061a8453611819600a611632565b90816128326117735f611632565b1461283f579091816127df565b6127e4565b61284d5f611632565b907a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000061287381611632565b8210156129c5575b506d04ee2d6d415b85acef810000000061289481611632565b8210156129a3575b50662386f26fc100006128ae81611632565b821015612981575b506305f5e1006128c581611632565b82101561295f575b506127106128da81611632565b82101561293d575b5060646128ee81611632565b82101561291b575b50612904611773600a611632565b101561290d5790565b6103c2906104e26001611632565b6129369161181961292b92611632565b916104e26002611632565b905f6128f6565b6129589161181961294d92611632565b916104e26004611632565b905f6128e2565b61297a9161181961296f92611632565b916104e26008611632565b905f6128cd565b61299c9161181961299192611632565b916104e26010611632565b905f6128b6565b6129be916118196129b392611632565b916104e26020611632565b905f61289c565b6129e0916118196129d592611632565b916104e26040611632565b905f61287b565b906129f56103fb600b6113cb565b73ffffffffffffffffffffffffffffffffffffffff821614612a1a576103c2916131cd565b5050600190565b6103c59073ffffffffffffffffffffffffffffffffffffffff1660601b90565b6104e281601493612a21565b67ffffffffffffffff811161089b5760208091020190565b90929192612a756108de82612a4d565b938185526020808601920283019281841161039b57915b838310612a995750505050565b60208091612aa78486610524565b815201920191612a8c565b6103c2913691612a65565b90612b256103c29392612acd5f90565b50612aea612ada60405190565b80926126d0602083019182612a41565b612afc612af5825190565b9160200190565b20927f000000000000000000000000000000000000000000000000000000000000000092612ab2565b61172461192d929361177392612b385f90565b50612b98565b5f19811461173b5760010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b90612b82825190565b811015612b93576020809102010190565b612b4c565b612ba15f611632565b915b612bae6103c2835190565b831015612be057612bd4612bda91612bce612bc98686612b79565b612687565b90612be6565b92612b3e565b91612ba3565b91505090565b81811015612bff57906103c2915f5260205260405f2090565b6103c2915f5260205260405f2090565b611d166103c26103c29267ffffffffffffffff1690565b612c3a6103c291612c345f90565b50612dd4565b612c0f565b6123a790612c506123f86103c29490565b901c90565b612c3a612c666103c292612c345f90565b612c706020611632565b90612c3f565b9190820391821161173b57565b6103c290612ca5611f18612cab612c9984612da3565b612ca5611f1886612c26565b90612c76565b92612c55565b6103c2600a61194e565b612cc430611095565b3190565b6103c29081565b6103c29054612cc8565b6103c2612cf7612ce85f612ccf565b612cf26001612ccf565b900390565b612cf25b6103c26001611632565b6103c267ffffffffffffffff611632565b612d226103fb5f6113fc565b73ffffffffffffffffffffffffffffffffffffffff821614612d5d57612d4c612d5191600561109e565b612ccf565b612d59612d05565b1690565b6040517f8f4eb604000000000000000000000000000000000000000000000000000000008152600490fd5b6103c26040611632565b6103c290612c506117736103c29490565b612dbc612d4c612d5192612db45f90565b50600561109e565b612dc4612d88565b90612d92565b6103c260c0611632565b61243e612de8612d4c6103c293612db45f90565b612dc4612dca565b6103c277ffffffffffffffffffffffffffffffffffffffffffffffff611632565b905f19906115b2565b90612e2a6103c26115d392611632565b8254612e11565b90612e6b6103ac92600592612e64612e4c612d4c848761109e565b612e54612df0565b1691612e5e612dca565b906123c6565b179261109e565b612e1a565b612e83612e7d6103c29290565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b612eb56301ffc9a7612e70565b7fffffffff00000000000000000000000000000000000000000000000000000000821614908115612efd575b8115612eeb575090565b905061192d611907635b5e139f612e70565b9050612f0c6380ac58cd612e70565b7fffffffff0000000000000000000000000000000000000000000000000000000082161490612ee1565b6103c29061122b565b6103c26002612f36565b6103c26003612f36565b612f6f612f6a6103c292612f645f90565b50612f9a565b6113ef565b61108c565b6103c27c0100000000000000000000000000000000000000000000000000000000611632565b908190612fa5612cfb565b831015612fd8575b6040517fdf2d9b42000000000000000000000000000000000000000000000000000000008152600490fd5b612fe46103c25f612ccf565b831015612fad57612ffa612d4c6004948561163f565b80613003612f74565b165f9061301261177383611632565b1461301e575050612fad565b92905b61302a84611632565b810361304f57505f19019161302a613045612d4c858761163f565b9193919050613021565b925050915090565b9061306181612f53565b913373ffffffffffffffffffffffffffffffffffffffff841681036130dd575b50613098815f61309285600661163f565b016115bc565b6130ce6127116130c87f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92595611095565b92611095565b926130d860405190565b5f90a4565b611de26130ea91856129e7565b6130f4575f613081565b6040517fcfb3b942000000000000000000000000000000000000000000000000000000008152600490fd5b61312b611de2826131e7565b613144575f61313e6103c292600661163f565b016113cb565b6040517fcf4700e4000000000000000000000000000000000000000000000000000000008152600490fd5b3361318d836131888461318385600761109e565b61109e565b611974565b61162d6131c36131bd7f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3193611095565b93611095565b936103e860405190565b6103c2916131836121ec926131df5f90565b50600761109e565b6131ef612cfb565b8110159081613227575b81613202575090565b6132129150612d4c90600461163f565b61321a612f74565b1661192d6117735f611632565b90506132356103c25f612ccf565b8110906131f9565b6103c27c0200000000000000000000000000000000000000000000000000000000611632565b919061326e82612f9a565b61327a612f6f826113ef565b61329973ffffffffffffffffffffffffffffffffffffffff86166114a3565b0361349e576132a7836134f6565b909190336132b9611de28289856134c9565b61345c575b505f926132cd6103fb856113fc565b73ffffffffffffffffffffffffffffffffffffffff861614613431578391613429575b50506133326133208460056131836133088a8361109e565b61331a61331482612ccf565b5f190190565b90612e1a565b61331a61332c82612ccf565b60010190565b61333a61323d565b61336b6133488386896138b7565b82178573ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b9061337c600492612e6b888561163f565b821661338a61177385611632565b146133c3575b5050506130ce6127116130c87fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95611095565b6133d56133d06001611632565b860190565b926133e3612d4c858461163f565b6133ef61177383611632565b146133fb575b50613390565b6103c261340791612ccf565b8303613414575b806133f5565b61342192612e6b9161163f565b5f808061340e565b55815f6132f0565b6040517fea553b34000000000000000000000000000000000000000000000000000000008152600490fd5b611de261346991886129e7565b613473575f6132be565b6040517f59c896be000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fa1148100000000000000000000000000000000000000000000000000000000008152600490fd5b919073ffffffffffffffffffffffffffffffffffffffff80916134e95f90565b5016911691821491141790565b6103c261350c916135045f90565b50600661163f565b90815490565b90916103ac926135206124f9565b925b91929092613531818585613263565b833b61353f6117735f611632565b0361354b575b50505050565b61355893611de293613603565b613565575f808080613545565b6040515b7fd1a57ed6000000000000000000000000000000000000000000000000000000008152600490fd5b905051906103ac82610370565b9060208282031261039b576103c291613591565b73ffffffffffffffffffffffffffffffffffffffff91821681529116602082015260408101919091526080606082018190526103c2929101906104ae565b612e83612e7d6103c29263ffffffff1690565b9093929160209061361c6136175f97611095565b611095565b63150b7a02935f3361364c61363060405190565b988996879586946136418c60e01b90565b8652600486016135b2565b03925af15f92816136a5575b50613692575050600161366757565b61366f612321565b805161367d6117735f611632565b0361368a57604051613569565b805190602001fd5b61192d91929350612e83611907916135f0565b6136c791935060203d81116136ce575b6136bf8183610879565b81019061359e565b915f613658565b503d6136b5565b9190916136e15f612ccf565b925f906136ed82611632565b811461385b57846137af849273ffffffffffffffffffffffffffffffffffffffff600192839261375261373a613721612d88565b61373461372d88611632565b91826123c6565b17830290565b61331a6137488a600561109e565b916104e283612ccf565b6137aa61379e6001831460e11b61377c61376b8c6113fc565b6137748d611632565b9b8c916138b7565b178b73ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b612e6b60049d8e61163f565b850190565b9616928084877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4015b85810361382c575050146137f4576103ac929350612e1a565b6114888461380160405190565b7f2e076300000000000000000000000000000000000000000000000000000000008152918291820190565b80829184877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4016137db565b6040517fb562e8dd000000000000000000000000000000000000000000000000000000008152600490fd5b6103c260e8611632565b61389d6103c26103c29290565b62ffffff1690565b6103c26103c26103c29262ffffff1690565b6138eb612439916103c294936138ca5f90565b506138e56138e06138d9613886565b8097612d92565b613890565b916138f0565b6138a5565b5050506103c25f90565b6103c260806108a0565b61390c6138fa565b5f8082526020820181905260408201819052606082015290565b6103c2613904565b613936613926565b5061393f613926565b61394a6103c2612cfb565b82108015613986575b6139815750613961816139b7565b9061396f6040830151151590565b61397d576103c291506139a3565b5090565b905090565b506139926103c261399a565b821015613953565b6103c25f612ccf565b6139b26103c291612f64613926565b6139db565b6139b2612d4c6103c2926139c9613926565b50600461163f565b6103c260a0611632565b906103ac6139e7613926565b6060613a6c6138e08396613a1a613a00612f6f836113ef565b73ffffffffffffffffffffffffffffffffffffffff168652565b613a42613a3161243e613a2b6139d1565b84612d92565b67ffffffffffffffff166020870152565b613a64613a4d612f74565b8216613a5b6117735f611632565b14156040870152565b612dc4613886565b62ffffff16910152565b906108e36108de83612a4d565b5f5b828110613a9157505050565b602090613a9c613926565b8184015201613a85565b906103ac613abc613ab684613a76565b93612a4d565b601f190160208401613a83565b9190811015612b93576020020190565b356103c28161051e565b91908092613af084613aa6565b925f5b855b8114613b3b57613b3481613b1861103d613b13613af5958989613ac9565b613ad9565b613b228289612b79565b52613b2d8188612b79565b5060010190565b9050613af3565b509350505090565b906103ac6127a6613ab684613a76565b9082811015613d38575f91613b6661399a565b613b6e612cfb565b808410613d30575b50808511613d28575b50613b8981612d16565b84831015613d1957828503818110613d11575b505b613ba781613b43565b955f91613bb383611632565b8114613d0857613bc28561392e565b945f95613bd5611de26040830151151590565b613ce5575b505b875b81141580613cdb575b15613cce5783613bf6826139b7565b6040810151613cbf5701805173ffffffffffffffffffffffffffffffffffffffff16613c276114a36103fb886113fc565b03613ca0575b508873ffffffffffffffffffffffffffffffffffffffff861673ffffffffffffffffffffffffffffffffffffffff881614613c73575b50613bde906001015b9050613bdc565b9681613c97613bde93613c9484613c8e613c6c969160010190565b9c612b79565b52565b91505088613c63565b5173ffffffffffffffffffffffffffffffffffffffff1695505f613c2d565b5050613c6c613bde9160010190565b5050959450505050815290565b5081871415613be7565b84015173ffffffffffffffffffffffffffffffffffffffff169550613bde613bda565b50945050505050565b90505f613b9c565b50613d235f611632565b613b9e565b93505f613b7f565b92505f613b76565b6040517f32c1995a000000000000000000000000000000000000000000000000000000008152600490fd5b5f80613d6e83612d16565b92613d7884613b43565b94613d81613926565b50613d8a612cfb565b855b8514613e6757613d9b816139b7565b6040810151613e5a57805173ffffffffffffffffffffffffffffffffffffffff16905f91613dce6114a36103fb856113fc565b03613e35575b5050613e1c613d8c91613dfa8573ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff871614613e235760010190565b9050613d8a565b61332c81613c9460018a01998c612b79565b015173ffffffffffffffffffffffffffffffffffffffff169350613e1c613d8c613dd4565b50613d8c90600101613e1c565b50935050505056fea2646970667358221220892c37371e5ecaf07b2328f54ea42d01fd9d780834e656bc5820b91334dda4a764736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ConsecutiveTransfer(uint256,uint256,address,address)": {
        "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "airdropMint(address,uint256)": {
        "details": "caller is owner but minter is '_to''_setAirdropMintCounter' increases number of minted tokens of owner in airdrop mint as auxiliary data",
        "params": {
          "_amount": "token amount of airdrop",
          "_to": "airdrop recipient"
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "changeState(uint256)": {
        "details": "airdrop phase must be finished to change the state",
        "params": {
          "_index": "index of state (0: closed, 1: whitelist, 2: public)"
        }
      },
      "explicitOwnershipOf(uint256)": {
        "details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"
      },
      "explicitOwnershipsOf(uint256[])": {
        "details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
      },
      "externalPublicSaleMint(address,uint256)": {
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "externalWhitelistSaleMint(address,uint256)": {
        "details": "'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data",
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "getAirdropMintCounter(address)": {
        "details": "returns [0..31] bits of '_auxData' ([192..223] bits of '_packedAddressData')",
        "params": {
          "_account": "querying address"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getPublicMintCounter(address)": {
        "details": "(total minted) - (minted in whitelist sale) - (minted in airdrop)"
      },
      "getWhitelistMintCounter(address)": {
        "details": "returns [32..63] bits of '_auxData' ([224..255] bits of '_packedAddressData')",
        "params": {
          "_account": "querying address"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "inherits from ERC721A and bypass approval requests from rarible",
        "returns": {
          "_0": "true if the operator is rarible"
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "publicSaleMint(uint256)": {
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "reveal(string)": {
        "params": {
          "_newBaseUri": "actual URI"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "params": {
          "_tokenId": "querying token id"
        },
        "returns": {
          "_0": "token URI"
        }
      },
      "tokensOfOwner(address)": {
        "details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."
      },
      "tokensOfOwnerIn(address,uint256,uint256)": {
        "details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "whitelistSaleMint(uint256,bytes32[])": {
        "details": "'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data",
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "withdrawAll()": {
        "details": "calls _withdraw function to withdraw assets"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "InvalidQueryRange()": [
        {
          "notice": "Invalid query range (`start` >= `stop`)."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "airdropMint(address,uint256)": {
        "notice": "owner can mint the tokens for airdrop before sale phases"
      },
      "changeState(uint256)": {
        "notice": "owner can changes the sale state"
      },
      "constructor": {
        "notice": "state variables are defined and royalty is set in constructor"
      },
      "contractBalance()": {
        "notice": "returns contract balance"
      },
      "currentState()": {
        "notice": "returns current state of sale"
      },
      "externalPublicSaleMint(address,uint256)": {
        "notice": "any EOA address can mint tokens for a certain ETH within a certain limit during public sale"
      },
      "externalWhitelistSaleMint(address,uint256)": {
        "notice": "whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale"
      },
      "getAirdropMintCounter(address)": {
        "notice": "returns total airdrop amount of an address"
      },
      "getPublicMintCounter(address)": {
        "notice": "returns mint amounts during public sale of addresses"
      },
      "getWhitelistMintCounter(address)": {
        "notice": "returns total airdrop amount of an address"
      },
      "isWhitelisted(address,bytes32[])": {
        "notice": "returns if an address whitelisted or not by verifying merkle proof"
      },
      "publicSaleMint(uint256)": {
        "notice": "any EOA address can mint tokens for a certain ETH within a certain limit during public sale"
      },
      "reveal(string)": {
        "notice": "owner should reveal the metadata after sale phase only for once"
      },
      "whitelistSaleMint(uint256,bytes32[])": {
        "notice": "whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale"
      },
      "withdrawAll()": {
        "notice": "owner can withdraw the all balance to associated accounts at any time"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3335,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3337,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3339,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3341,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3345,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3349,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3354,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)3267_storage)"
      },
      {
        "astId": 3360,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 148,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(RoyaltyInfo)145_storage"
      },
      {
        "astId": 153,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2187,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "state",
        "offset": 20,
        "slot": "10",
        "type": "t_enum(STATE)2182"
      },
      {
        "astId": 2189,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "raribleTransferProxy",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2192,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "BASE_URI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2198,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "isRevealed",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2202,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "adminsForExternal",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(STATE)2182": {
        "encoding": "inplace",
        "label": "enum IlkelBenlik.STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)145_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)3267_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)3267_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)145_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 142,
            "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 144,
            "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenApprovalRef)3267_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 3266,
            "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}