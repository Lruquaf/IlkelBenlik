{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokensForWhitelist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokensForAirdrop",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_whitelistTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountPerMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountPerWhitelist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountPerAccount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_raribleTransferProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_founder1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_founder2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_communityWallet",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRevealed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQueryRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxAmountPerAccountExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxAmountPerMintExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxAmountPerWhitelistExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupplyExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupplyForAirdropExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupplyForWhitelistExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAnAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPublicSalePhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelistSalePhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StillAirdropPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongStateForReveal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AIRDROP_BASE_URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_WALLET",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FOUNDER_1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FOUNDER_2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AMOUNT_PER_ACCOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AMOUNT_PER_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AMOUNT_PER_WHITELIST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_FOR_AIRDROP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_FOR_WHITELIST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MERKLE_ROOT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_TOKEN_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_TOKEN_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "airdropMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "changeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentState",
      "outputs": [
        {
          "internalType": "enum IlkelBenlik.STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "explicitOwnershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "explicitOwnershipsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "externalPublicSaleMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "externalWhitelistSaleMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAirdropMintCounter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getPublicMintCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getWhitelistMintCounter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRevealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raribleTransferProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseUri",
          "type": "string"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IlkelBenlik.STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "tokensOfOwnerIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde68f46935e08f6b103e4adfffcd1b86c0b54adb5923e81ed867ca1c4318f293",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3873208",
    "logsBloom": "0x
    "blockHash": "0xdf67ad1b467e4aec650eea169fc62108a136a3dea7584c295ca6697bffcb5118",
    "transactionHash": "0xde68f46935e08f6b103e4adfffcd1b86c0b54adb5923e81ed867ca1c4318f293",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xde68f46935e08f6b103e4adfffcd1b86c0b54adb5923e81ed867ca1c4318f293",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdf67ad1b467e4aec650eea169fc62108a136a3dea7584c295ca6697bffcb5118"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "3873208",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "210",
    "50",
    "10",
    "1000000000000000000",
    "1100000000000000000",
    "30",
    "20",
    "50",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x71bE63f3384f5fb98995898A86B02Fb2426c5788",
    "0xFABB0ac9d68B0B445fB7357272Ff202C5651694a",
    "0x1CBd3b2770909D4e10f157cABC84C7264073C9Ec",
    "0xa1c002e633f0237d9a4cb590efdf9eeb8d6b0d87cd1f9cc970e3a29aba305756"
  ],
  "numDeployments": 1,
  "solcInputHash": "411af97c853dfc9cd3a716f22267ebd9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensForWhitelist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensForAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountPerMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountPerWhitelist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountPerAccount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_raribleTransferProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_founder1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_founder2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityWallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxAmountPerAccountExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxAmountPerMintExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxAmountPerWhitelistExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyForAirdropExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyForWhitelistExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPublicSalePhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelistSalePhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StillAirdropPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongStateForReveal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AIRDROP_BASE_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDER_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDER_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_PER_ACCOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_PER_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_PER_WHITELIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_FOR_AIRDROP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_FOR_WHITELIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_TOKEN_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_TOKEN_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airdropMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"changeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"internalType\":\"enum IlkelBenlik.STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"externalPublicSaleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"externalWhitelistSaleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAirdropMintCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPublicMintCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getWhitelistMintCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raribleTransferProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseUri\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IlkelBenlik.STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"airdropMint(address,uint256)\":{\"details\":\"caller is owner but minter is '_to''_setAirdropMintCounter' increases number of minted tokens of owner in airdrop mint as auxiliary data\",\"params\":{\"_amount\":\"token amount of airdrop\",\"_to\":\"airdrop recipient\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"changeState(uint256)\":{\"details\":\"airdrop phase must be finished to change the state\",\"params\":{\"_index\":\"index of state (0: closed, 1: whitelist, 2: public)\"}},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"externalPublicSaleMint(address,uint256)\":{\"params\":{\"_amount\":\"token amount to mint\"}},\"externalWhitelistSaleMint(address,uint256)\":{\"details\":\"'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data\",\"params\":{\"_amount\":\"token amount to mint\"}},\"getAirdropMintCounter(address)\":{\"details\":\"returns [0..31] bits of '_auxData' ([192..223] bits of '_packedAddressData')\",\"params\":{\"_account\":\"querying address\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getPublicMintCounter(address)\":{\"details\":\"(total minted) - (minted in whitelist sale) - (minted in airdrop)\"},\"getWhitelistMintCounter(address)\":{\"details\":\"returns [32..63] bits of '_auxData' ([224..255] bits of '_packedAddressData')\",\"params\":{\"_account\":\"querying address\"}},\"isApprovedForAll(address,address)\":{\"details\":\"inherits from ERC721A and bypass approval requests from rarible\",\"returns\":{\"_0\":\"true if the operator is rarible\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"publicSaleMint(uint256)\":{\"params\":{\"_amount\":\"token amount to mint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"reveal(string)\":{\"params\":{\"_newBaseUri\":\"actual URI\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"querying token id\"},\"returns\":{\"_0\":\"token URI\"}},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"whitelistSaleMint(uint256,bytes32[])\":{\"details\":\"'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data\",\"params\":{\"_amount\":\"token amount to mint\"}},\"withdrawAll()\":{\"details\":\"calls _withdraw function to withdraw assets\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"airdropMint(address,uint256)\":{\"notice\":\"owner can mint the tokens for airdrop before sale phases\"},\"changeState(uint256)\":{\"notice\":\"owner can changes the sale state\"},\"constructor\":{\"notice\":\"state variables are defined and royalty is set in constructor\"},\"contractBalance()\":{\"notice\":\"returns contract balance\"},\"currentState()\":{\"notice\":\"returns current state of sale\"},\"externalPublicSaleMint(address,uint256)\":{\"notice\":\"any EOA address can mint tokens for a certain ETH within a certain limit during public sale\"},\"externalWhitelistSaleMint(address,uint256)\":{\"notice\":\"whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale\"},\"getAirdropMintCounter(address)\":{\"notice\":\"returns total airdrop amount of an address\"},\"getPublicMintCounter(address)\":{\"notice\":\"returns mint amounts during public sale of addresses\"},\"getWhitelistMintCounter(address)\":{\"notice\":\"returns total airdrop amount of an address\"},\"isWhitelisted(address,bytes32[])\":{\"notice\":\"returns if an address whitelisted or not by verifying merkle proof\"},\"publicSaleMint(uint256)\":{\"notice\":\"any EOA address can mint tokens for a certain ETH within a certain limit during public sale\"},\"reveal(string)\":{\"notice\":\"owner should reveal the metadata after sale phase only for once\"},\"whitelistSaleMint(uint256,bytes32[])\":{\"notice\":\"whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale\"},\"withdrawAll()\":{\"notice\":\"owner can withdraw the all balance to associated accounts at any time\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IlkelBenlik.sol\":\"IlkelBenlik\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u:fDnTOc\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/IlkelBenlik.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title NFTs of ID Series Art Collection\\n * @author Lruquaf ---> github.com/Lruquaf\\n * @notice NFT Minting Contract of ID Series Art Collection by Necmi G\\u00fcrseler\\n */\\n\\npragma solidity 0.8.20;\\n\\nimport {IERC721A} from \\\"erc721a/contracts/IERC721A.sol\\\";\\nimport {ERC721A} from \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport {ERC721AQueryable} from \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\nimport {ERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nerror InvalidInput();\\nerror NotAnAccount();\\nerror NotAWhitelisted();\\nerror WrongStateForReveal();\\nerror AlreadyRevealed();\\nerror StillAirdropPhase();\\nerror NotAirdropPhase();\\nerror MaxSupplyForAirdropExceeded();\\nerror NotWhitelistSalePhase();\\nerror MaxSupplyForWhitelistExceeded();\\nerror MaxAmountPerWhitelistExceeded();\\nerror NotPublicSalePhase();\\nerror MaxAmountPerMintExceeded();\\nerror MaxSupplyExceeded();\\nerror MaxAmountPerAccountExceeded();\\nerror InsufficientETH();\\nerror SaleHasStarted();\\nerror TransferFailed();\\n\\ncontract IlkelBenlik is ERC721AQueryable, ERC2981, Ownable {\\n    using Strings for uint256;\\n\\n    // state of sale\\n    enum STATE {\\n        CLOSED,\\n        WHITELIST,\\n        PUBLIC\\n    }\\n    // sale is closed initally\\n    STATE public state = STATE.CLOSED;\\n\\n    // Transfer Proxy address to bypass approval during token listing\\n    address public raribleTransferProxy;\\n\\n    // A placeholder URI as base URI of whitelist and public tokens before reveal\\n    string public BASE_URI =\\n        \\\"ipfs://bafybeihawpmgq5vlku7g2aaocu2e2e7fqzvqe7qtq4kav2ge2jy5ojsqte/\\\";\\n    // URI of airdropped tokens\\n    string public constant AIRDROP_BASE_URI =\\n        \\\"ipfs://bafybeig5mbiinirndd6m43l2no2a46wcnnsihod4oo2hzoir5fyxklwuci/\\\";\\n\\n    // reveal state\\n    bool public isRevealed = false;\\n\\n    // max supply\\n    uint256 public immutable MAX_TOKENS;\\n    // reserved supply for whitelist\\n    uint256 public immutable MAX_TOKENS_FOR_WHITELIST;\\n    // reserved supply for airdrop\\n    uint256 public immutable MAX_TOKENS_FOR_AIRDROP;\\n\\n    // token price for whitelist sale\\n    uint256 public immutable WHITELIST_TOKEN_PRICE;\\n    // token price for public sale\\n    uint256 public immutable PUBLIC_TOKEN_PRICE;\\n\\n    // mint limit per transaction (only public sale)\\n    uint256 public immutable MAX_AMOUNT_PER_MINT;\\n\\n    // whitelist mint limit per account\\n    uint256 public immutable MAX_AMOUNT_PER_WHITELIST;\\n    // public mint limit per account\\n    uint256 public immutable MAX_AMOUNT_PER_ACCOUNT;\\n\\n    // receiver of majority of sale income\\n    address public immutable FOUNDER_1;\\n    // receiver of creator earnings\\n    address public immutable FOUNDER_2;\\n    // receiver of remainder of sale income\\n    address public immutable COMMUNITY_WALLET;\\n\\n    // root hash of whitelist's merkle tree\\n    bytes32 public immutable MERKLE_ROOT;\\n\\n    /**\\n     * @notice state variables are defined and royalty is set in constructor\\n     */\\n    constructor(\\n        uint256 _maxTokens,\\n        uint256 _maxTokensForWhitelist,\\n        uint256 _maxTokensForAirdrop,\\n        uint256 _whitelistTokenPrice,\\n        uint256 _publicTokenPrice,\\n        uint256 _maxAmountPerMint,\\n        uint256 _maxAmountPerWhitelist,\\n        uint256 _maxAmountPerAccount,\\n        address _raribleTransferProxy,\\n        address _founder1,\\n        address _founder2,\\n        address _communityWallet,\\n        bytes32 _merkleRoot\\n    ) ERC721A(\\\"IlkelBenlik\\\", \\\"IB\\\") {\\n        if (_maxTokensForWhitelist + _maxTokensForAirdrop > _maxTokens) {\\n            revert InvalidInput();\\n        }\\n        MAX_TOKENS = _maxTokens;\\n        MAX_TOKENS_FOR_WHITELIST = _maxTokensForWhitelist;\\n        MAX_TOKENS_FOR_AIRDROP = _maxTokensForAirdrop;\\n        WHITELIST_TOKEN_PRICE = _whitelistTokenPrice;\\n        PUBLIC_TOKEN_PRICE = _publicTokenPrice;\\n        MAX_AMOUNT_PER_MINT = _maxAmountPerMint;\\n        MAX_AMOUNT_PER_WHITELIST = _maxAmountPerWhitelist;\\n        MAX_AMOUNT_PER_ACCOUNT = _maxAmountPerAccount;\\n        raribleTransferProxy = _raribleTransferProxy;\\n        FOUNDER_1 = _founder1;\\n        FOUNDER_2 = _founder2;\\n        COMMUNITY_WALLET = _communityWallet;\\n        MERKLE_ROOT = _merkleRoot;\\n        _setDefaultRoyalty(_founder2, 500);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC721A, ERC2981, ERC721A) returns (bool) {\\n        return\\n            ERC721A.supportsInterface(interfaceId) ||\\n            ERC2981.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice checks if the sender of message is an EOA\\n     */\\n    modifier onlyAccounts() {\\n        if (msg.sender != tx.origin) {\\n            revert NotAnAccount();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice checks if the sender of message is a whitelist\\n     */\\n    modifier onlyWhitelisted(bytes32[] calldata _merkleProof) {\\n        if (!isWhitelisted(msg.sender, _merkleProof)) {\\n            revert NotAWhitelisted();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice owner should reveal the metadata after sale phase only for once\\n     * @param _newBaseUri actual URI\\n     */\\n    function reveal(string memory _newBaseUri) public onlyOwner {\\n        if (state != STATE.PUBLIC) {\\n            revert WrongStateForReveal();\\n        } else if (isRevealed == true) {\\n            revert AlreadyRevealed();\\n        }\\n        isRevealed = true;\\n        BASE_URI = _newBaseUri;\\n    }\\n\\n    /**\\n     * @notice owner can changes the sale state\\n     * @dev airdrop phase must be finished to change the state\\n     * @param _index index of state (0: closed, 1: whitelist, 2: public)\\n     */\\n    function changeState(uint256 _index) public onlyOwner {\\n        if (totalSupply() < MAX_TOKENS_FOR_AIRDROP) {\\n            revert StillAirdropPhase();\\n        }\\n        if (_index == 0) {\\n            state = STATE.CLOSED;\\n        } else if (_index == 1) {\\n            state = STATE.WHITELIST;\\n        } else if (_index == 2) {\\n            state = STATE.PUBLIC;\\n        } else {\\n            revert InvalidInput();\\n        }\\n    }\\n\\n    /**\\n     * @notice owner can mint the tokens for airdrop before sale phases\\n     * @dev caller is owner but minter is '_to'\\n     * @dev '_setAirdropMintCounter' increases number of minted tokens of owner\\n     * in airdrop mint as auxiliary data\\n     * @param _to airdrop recipient\\n     * @param _amount token amount of airdrop\\n     */\\n\\n    function airdropMint(address _to, uint256 _amount) public onlyOwner {\\n        if (totalSupply() + _amount > MAX_TOKENS_FOR_AIRDROP) {\\n            revert MaxSupplyForAirdropExceeded();\\n        }\\n        _setAirdropMintCounter(\\n            _to,\\n            getAirdropMintCounter(_to) + uint32(_amount)\\n        );\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice whitelisted addressses can mint tokens for a certain ETH\\n     * within a certain limit during whitelist sale\\n     * @dev '_setWhitelistMintCounter' increases number of minted tokens of owner\\n     * in whitelist sale as auxiliary data\\n     * @param _amount token amount to mint\\n     */\\n    function whitelistSaleMint(\\n        uint256 _amount,\\n        bytes32[] calldata _merkleProof\\n    ) public payable onlyWhitelisted(_merkleProof) {\\n        if (state != STATE.WHITELIST) {\\n            revert NotWhitelistSalePhase();\\n        } else if (\\n            totalSupply() + _amount >\\n            MAX_TOKENS_FOR_WHITELIST + MAX_TOKENS_FOR_AIRDROP\\n        ) {\\n            revert MaxSupplyForWhitelistExceeded();\\n        } else if (\\n            uint256(getWhitelistMintCounter(msg.sender)) + _amount >\\n            MAX_AMOUNT_PER_WHITELIST\\n        ) {\\n            revert MaxAmountPerWhitelistExceeded();\\n        } else if (msg.value < _amount * WHITELIST_TOKEN_PRICE) {\\n            revert InsufficientETH();\\n        }\\n        _setWhitelistMintCounter(\\n            msg.sender,\\n            getWhitelistMintCounter(msg.sender) + uint32(_amount)\\n        );\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice any EOA address can mint tokens for a certain ETH\\n     * within a certain limit during public sale\\n     * @param _amount token amount to mint\\n     */\\n    function publicSaleMint(uint256 _amount) public payable onlyAccounts {\\n        if (state != STATE.PUBLIC) {\\n            revert NotPublicSalePhase();\\n        } else if (_amount > MAX_AMOUNT_PER_MINT) {\\n            revert MaxAmountPerMintExceeded();\\n        } else if (totalSupply() + _amount > MAX_TOKENS) {\\n            revert MaxSupplyExceeded();\\n        } else if (\\n            getPublicMintCounter(msg.sender) + _amount > MAX_AMOUNT_PER_ACCOUNT\\n        ) {\\n            revert MaxAmountPerAccountExceeded();\\n        } else if (msg.value < _amount * PUBLIC_TOKEN_PRICE) {\\n            revert InsufficientETH();\\n        }\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    ////////////////////////////////////\\n    // WORK IN PROGRESS\\n    ////////////////////////////////////\\n\\n    /**\\n     * @notice whitelisted addressses can mint tokens for a certain ETH\\n     * within a certain limit during whitelist sale\\n     * @dev '_setWhitelistMintCounter' increases number of minted tokens of owner\\n     * in whitelist sale as auxiliary data\\n     * @param _amount token amount to mint\\n     */\\n    function externalWhitelistSaleMint(\\n        address _to,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        if (state != STATE.WHITELIST) {\\n            revert NotWhitelistSalePhase();\\n        } else if (\\n            totalSupply() + _amount >\\n            MAX_TOKENS_FOR_WHITELIST + MAX_TOKENS_FOR_AIRDROP\\n        ) {\\n            revert MaxSupplyForWhitelistExceeded();\\n        }\\n        if (_to == address(0)) {\\n            _mint(owner(), _amount);\\n        } else {\\n            if (\\n                uint256(getWhitelistMintCounter(_to)) + _amount >\\n                MAX_AMOUNT_PER_WHITELIST\\n            ) {\\n                revert MaxAmountPerWhitelistExceeded();\\n            }\\n            _setWhitelistMintCounter(\\n                _to,\\n                getWhitelistMintCounter(_to) + uint32(_amount)\\n            );\\n            _mint(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice any EOA address can mint tokens for a certain ETH\\n     * within a certain limit during public sale\\n     * @param _amount token amount to mint\\n     */\\n    function externalPublicSaleMint(\\n        address _to,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        if (state != STATE.PUBLIC) {\\n            revert NotPublicSalePhase();\\n        } else if (_amount > MAX_AMOUNT_PER_MINT) {\\n            revert MaxAmountPerMintExceeded();\\n        } else if (totalSupply() + _amount > MAX_TOKENS) {\\n            revert MaxSupplyExceeded();\\n        }\\n        if (_to == address(0)) {\\n            _mint(owner(), _amount);\\n        } else {\\n            if (getPublicMintCounter(_to) + _amount > MAX_AMOUNT_PER_ACCOUNT) {\\n                revert MaxAmountPerAccountExceeded();\\n            }\\n            _mint(_to, _amount);\\n        }\\n    }\\n\\n    ///////////////////////////////////////\\n    ///////////////////////////////////////\\n    ///////////////////////////////////////\\n\\n    /**\\n     * @notice owner can withdraw the all balance to associated accounts at any time\\n     * @dev calls _withdraw function to withdraw assets\\n     */\\n    function withdrawAll() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0);\\n\\n        _withdraw(FOUNDER_1, (balance * 950) / 1000);\\n        _withdraw(COMMUNITY_WALLET, (balance * 50) / 1000);\\n\\n        if (address(this).balance > 0) {\\n            _withdraw(owner(), address(this).balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev withdraws the assets by low-level calls\\n     * @param _address destination address\\n     * @param _amount amount of assets\\n     */\\n    function _withdraw(address _address, uint256 _amount) private {\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice sets number of minted tokens of an address during airdrop\\n     * @dev airdrop counter is set at [0..31] bits of '_auxData'\\n     * ([192..223] bits of '_packedAddressData')\\n     * @param _account airdrop recipient\\n     * @param _amount total amount of airdrop\\n     */\\n    function _setAirdropMintCounter(address _account, uint32 _amount) internal {\\n        _setAux(_account, uint64(_amount));\\n    }\\n\\n    /**\\n     * @notice sets number of minted tokens of an address during whitelist mint\\n     * @dev whitelist mint counter is set at [32..63] bits of '_auxData'\\n     * ([224..255] bits of '_packedAddressData')\\n     * @param _account whitelist minter\\n     * @param _amount total amount of whitelist mint of '_account'\\n     */\\n    function _setWhitelistMintCounter(\\n        address _account,\\n        uint32 _amount\\n    ) internal {\\n        uint256 _bitpos = 32;\\n        uint64 _auxData = uint64((uint256(_amount) << _bitpos)) +\\n            uint64(getAirdropMintCounter(_account));\\n        _setAux(_account, _auxData);\\n    }\\n\\n    /**\\n     * @return token id of first token\\n     */\\n    function _startTokenId() internal view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @param _tokenId querying token id\\n     * @return token URI\\n     */\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view virtual override(ERC721A, IERC721A) returns (string memory) {\\n        require(\\n            _exists(_tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        if (_tokenId <= MAX_TOKENS_FOR_AIRDROP) {\\n            return\\n                bytes(AIRDROP_BASE_URI).length > 0\\n                    ? string(\\n                        abi.encodePacked(\\n                            AIRDROP_BASE_URI,\\n                            _tokenId.toString(),\\n                            \\\".json\\\"\\n                        )\\n                    )\\n                    : \\\"\\\";\\n        } else {\\n            if (isRevealed == false) {\\n                return\\n                    bytes(BASE_URI).length > 0\\n                        ? string(abi.encodePacked(BASE_URI, \\\"hidden\\\", \\\".json\\\"))\\n                        : \\\"\\\";\\n            }\\n\\n            return\\n                bytes(BASE_URI).length > 0\\n                    ? string(\\n                        abi.encodePacked(BASE_URI, _tokenId.toString(), \\\".json\\\")\\n                    )\\n                    : \\\"\\\";\\n        }\\n    }\\n\\n    /**\\n     * @dev inherits from ERC721A and bypass approval requests from rarible\\n     * @return true if the operator is rarible\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) public view override(ERC721A, IERC721A) returns (bool) {\\n        if (operator == address(raribleTransferProxy)) {\\n            return true;\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * @notice returns if an address whitelisted or not\\n     * by verifying merkle proof\\n     */\\n    function isWhitelisted(\\n        address _account,\\n        bytes32[] calldata _merkleProof\\n    ) public view returns (bool) {\\n        bytes32 leaf = keccak256(abi.encodePacked(_account));\\n        return MerkleProof.verify(_merkleProof, MERKLE_ROOT, leaf);\\n    }\\n\\n    /**\\n     * @notice returns total airdrop amount of an address\\n     * @dev returns [0..31] bits of '_auxData'\\n     * ([192..223] bits of '_packedAddressData')\\n     * @param _account querying address\\n     */\\n    function getAirdropMintCounter(\\n        address _account\\n    ) public view returns (uint32) {\\n        uint64 _auxData = _getAux(_account);\\n        return uint32(_auxData);\\n    }\\n\\n    /**\\n     * @notice returns total airdrop amount of an address\\n     * @dev returns [32..63] bits of '_auxData'\\n     * ([224..255] bits of '_packedAddressData')\\n     * @param _account querying address\\n     */\\n    function getWhitelistMintCounter(\\n        address _account\\n    ) public view returns (uint32) {\\n        uint64 _auxData = _getAux(_account);\\n        uint256 _bitpos = 32;\\n        return uint32(_auxData >> _bitpos);\\n    }\\n\\n    /**\\n     * @notice returns mint amounts during public sale of addresses\\n     * @dev (total minted) - (minted in whitelist sale) - (minted in airdrop)\\n     */\\n    function getPublicMintCounter(\\n        address _account\\n    ) public view returns (uint256) {\\n        return\\n            _numberMinted(_account) -\\n            uint256(getAirdropMintCounter(_account)) -\\n            uint256(getWhitelistMintCounter(_account));\\n    }\\n\\n    /**\\n     * @notice returns current state of sale\\n     */\\n    function currentState() public view returns (STATE) {\\n        return state;\\n    }\\n\\n    /**\\n     * @notice returns contract balance\\n     */\\n    function contractBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0xdb16427b1993a17b1df656ee876d6c3641e37d531ed45fb4e4ad5ed220bc7a91\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryable.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad83a36e9758f044317e9a5e2903bc49730b6d5de8fbe9a61b2f91fb4c2148c7\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xc14fc938aecdccee7edbd3a3ce60b6171cdc3da3345cfa6d288c268983c48942\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6102006040523462000141576200002f62000019620002bc565b9b9a909a99919998929897939796949662000639565b60405161408462000aef82396080518181816112de015281816120b8015261234d015260a05181818161133001528181611e87015261221c015260c051818181610eea01528181611be001528181611d1f01528181611e66015281816121fb0152612824015260e0518181816107050152611f51015261010051818181610c2701526121750152610120518181816112a5015281816120580152612311015261014051818181610dae01528181611ef4015261228c0152610160518181816110730152818161211801526123b5015261018051818181610e02015261243a01526101a05181610ced01526101c051818181611215015261248f01526101e051818181610a320152612cd0015261408490f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90601f01601f191681019081106001600160401b038211176200017b57604052565b62000145565b90620001986200019060405190565b928362000159565b565b805b036200014157565b9050519062000198826200019a565b6001600160a01b031690565b90565b6001600160a01b0381166200019c565b905051906200019882620001c2565b6101a0818303126200014157620001f98282620001a4565b92620002098360208401620001a4565b92620002198160408501620001a4565b92620002298260608301620001a4565b92620002398360808401620001a4565b92620002498160a08501620001a4565b92620002598260c08301620001a4565b92620002698360e08401620001a4565b926200027a816101008501620001d2565b926200028b826101208301620001d2565b92620001bf620002a0846101408501620001d2565b93620002b1816101608601620001d2565b9361018001620001a4565b620002df62004b7380380380620002d38162000181565b928339810190620001e1565b909192939495969798999a9b9c565b6001600160401b0381116200017b57602090601f01601f19160190565b90620003216200031b83620002ee565b62000181565b918252565b62000332600b6200030b565b6a496c6b656c42656e6c696b60a81b602082015290565b620001bf62000326565b6200035f60026200030b565b6124a160f11b602082015290565b620001bf62000353565b9060ff60a01b9060a01b5b9181191691161790565b634e487b7160e01b5f52602160045260245ffd5b60031115620003ab57565b6200038c565b906200019882620003a0565b620001bf90620003b1565b90620003dc620001bf620003e492620003bd565b825462000377565b9055565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156200041f575b60208310146200041957565b620003e8565b91607f16916200040d565b915f1960089290920291821b911b62000382565b620001bf620001bf620001bf9290565b919062000463620001bf620003e4936200043e565b9083546200042a565b62000198915f916200044e565b81811062000485575050565b80620004945f6001936200046c565b0162000479565b9190601f8111620004ab57505050565b620004bd62000198935f5260205f2090565b906020601f840181900483019310620004e1575b6020601f90910104019062000479565b9091508190620004d1565b6002620005206274652f60e81b926200051360436200050c8354620003fc565b836200049b565b608781555f5260205f2090565b7f697066733a2f2f62616679626569686177706d677135766c6b7537673261616f81557f6375326532653766717a76716537717471346b6176326765326a79356f6a737160018201550155565b6200019890620004ec565b9060ff9062000382565b9062000595620001bf620003e492151590565b825462000578565b634e487b7160e01b5f52601160045260245ffd5b91908201809211620005bf57565b6200059d565b906001600160a01b039062000382565b620001bf90620001b3906001600160a01b031682565b620001bf90620005d5565b620001bf90620005eb565b9062000615620001bf620003e492620005f6565b8254620005c5565b6200062d620001bf620001bf9290565b6001600160601b031690565b969492909b999a989795939162000696818e6200066a6200065962000349565b620006636200036d565b9062000702565b620006905f6200067c81600a620003c8565b62000688600c6200056d565b600d62000582565b620005b1565b8810620006f057620001989c620006cb9860805260a05260c05260e05261010052610120526101405261016052600b62000601565b61018052826101a0526101c0526101e052620006e96101f46200061d565b9062000a4a565b60405163b4fa3fb360e01b8152600490fd5b906200070e9162000719565b620001983362000884565b6200019891829182918291829182918291906200083e565b906200073b815190565b906001600160401b0382116200017b5762000763826200075c8554620003fc565b856200049b565b602090601f8311600114620007a057620003e492915f918362000794575b50505f19600883021c1916906002021790565b015190505f8062000781565b601f19831691620007b4855f5260205f2090565b925f5b818110620007f357509160029391856001969410620007da575b50505002019055565b01515f196008601f8516021c191690555f8080620007d1565b91936020600181928787015181550195019201620007b7565b90620001989162000731565b905f199062000382565b9062000836620001bf620003e4926200043e565b825462000818565b9062000850620008589260026200080c565b60036200080c565b620001986200086662000ae2565b5f62000822565b620001bf90620001b3565b620001bf90546200086d565b62000890600a62000878565b906200089e81600a62000601565b620008d5620008ce7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093620005f6565b91620005f6565b91620008e060405190565b5f90a3565b15620008ed57565b60405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608490fd5b620001b3620001bf620001bf9290565b620001bf9062000945565b156200096857565b60405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606490fd5b620001bf604062000181565b906001600160a01b03199060a01b62000382565b620001bf906200062d906001600160601b031682565b90620009f7620001bf620003e492620009cd565b8254620009b9565b620001989162000a379060209062000a2962000a2282516001600160a01b031690565b8562000601565b01516001600160601b031690565b90620009e3565b906200019891620009ff565b62000acd620001989262000a7762000a656200062d62000ad5565b6001600160601b0383161115620008e5565b62000abd5f9362000aa262000a90620001b38762000955565b6001600160a01b038316141562000960565b62000aac620009ad565b948501906001600160a01b03169052565b6001600160601b03166020830152565b600862000a3e565b620001bf6127106200061d565b620001bf60016200043e56fe60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a714610360578063051bcd691461035b57806306fdde0314610356578063081812fc14610351578063095ea7b31461034c5780630a887cda146103475780630c3f6acf1461034257806318160ddd1461033d5780631dee5cd91461033857806322ad06701461033357806323b872dd1461032e578063271047bc146103295780632a55205a14610324578063314843131461031f57806342842e0e1461031a57806347992844146103155780634c2612471461031057806351e75e8b1461030b57806354214f69146103065780635a23dd99146103015780635bbb2177146102fc5780636352211e146102f757806370a08231146102f2578063715018a6146102ed578063763f8d12146102e85780638462151c146102e3578063853828b6146102de57806385660e00146102d95780638b7afe2e146102d45780638da5cb5b146102cf5780638ecff037146102ca57806391245736146102c557806395d89b41146102c05780639845047b146102bb57806399a2557a146102b65780639b398f84146102b1578063a22cb465146102ac578063a8550e7e146102a7578063b00741cb146102a2578063b3ab66b01461029d578063b88d4fde14610298578063c19d93fb14610293578063c23dc68f1461028e578063c87b56dd14610289578063db4bfb6414610284578063dbddb26a1461027f578063e0cad9b11461027a578063e985e9c514610275578063f2fde38b14610270578063f41388971461026b578063f47c84c514610266578063f5b0b808146102615763fa260355036103905761131b565b611302565b6112c9565b611290565b611278565b61125c565b611200565b6111e5565b61105e565b611043565b61101c565b610fac565b610f89565b610f26565b610f0e565b610ed5565b610ebc565b610e69565b610e4d565b610ded565b610dd2565b610d99565b610d7e565b610d2c565b610d11565b610cd8565b610cc0565b610c99565b610c12565b610bfa565b610bdf565b610bc4565b610b9c565b610aad565b610a7b565b610a1d565b610a05565b610974565b61082d565b610814565b6107e5565b610786565b610772565b610729565b6106f0565b6106c5565b61069e565b610622565b61059f565b61053a565b6104ec565b610446565b6103be565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361039057565b5f80fd5b905035906103a182610365565b565b90602082820312610390576103b791610394565b90565b9052565b34610390576103ec6103d96103d43660046103a3565b611847565b6040515b91829182901515815260200190565b0390f35b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116610389565b905035906103a182610409565b90602082820312610390576103b791610425565b34610390576103ec61046161045c366004610432565b612e25565b6040519182918263ffffffff909116815260200190565b5f91031261039057565b5f5b8381106104935750505f910152565b8181015183820152602001610484565b6104c46104cd6020936104d7936104b8815190565b80835293849260200190565b95869101610482565b601f01601f191690565b0190565b60208082526103b7929101906104a3565b34610390576104fc366004610478565b6103ec610507613119565b604051918291826104db565b80610389565b905035906103a182610513565b90602082820312610390576103b791610519565b34610390576103ec610555610550366004610526565b6132f9565b6040519182918273ffffffffffffffffffffffffffffffffffffffff909116815260200190565b9190604083820312610390576103b7906105968185610425565b93602001610519565b6105b36105ad36600461057c565b90613231565b604051005b909182601f830112156103905781359167ffffffffffffffff831161039057602001926020830284011161039057565b919091604081840312610390576105ff8382610519565b92602082013567ffffffffffffffff81116103905761061e92016105b8565b9091565b6105b36106303660046105e8565b91611fc0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003111561066d57565b610636565b906103a182610663565b6103b790610672565b6103ba9061067c565b6020810192916103a19190610685565b34610390576106ae366004610478565b6103ec6106b9612e81565b6040519182918261068e565b34610390576106d5366004610478565b6103ec6106e0612ea9565b6040519182918290815260200190565b3461039057610700366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b34610390576105b361073c36600461057c565b90611d9b565b9091606082840312610390576103b761075b8484610425565b936107698160208601610425565b93604001610519565b6105b3610780366004610742565b91613442565b34610390576103ec61046161079c366004610432565b612df6565b9190604083820312610390576103b7906105968185610519565b73ffffffffffffffffffffffffffffffffffffffff90911681526040810192916103a19160200152565b34610390576107fe6107f83660046107a1565b9061175a565b906103ec61080b60405190565b928392836107bb565b34610390576105b361082736600461057c565b906123f2565b6105b361083b366004610742565b916136f1565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f01601f1916810190811067ffffffffffffffff82111761089057604052565b610841565b906103a16108a260405190565b928361086e565b67ffffffffffffffff811161089057602090601f01601f19160190565b906108d86108d3836108a9565b610895565b918252565b6108e760436108c6565b7f697066733a2f2f6261667962656967356d6269696e69726e6464366d34336c3260208201527f6e6f3261343677636e6e7369686f64346f6f32687a6f6972356679786b6c777560408201527f63692f0000000000000000000000000000000000000000000000000000000000606082015290565b6103b76108dd565b6103b761095c565b6103b7610964565b3461039057610984366004610478565b6103ec61050761096c565b90825f939282370152565b909291926109aa6108d3826108a9565b93818552602085019082840111610390576103a19261098f565b9080601f83011215610390578160206103b79335910161099a565b9060208282031261039057813567ffffffffffffffff8111610390576103b792016109c4565b34610390576105b3610a183660046109df565b611b85565b3461039057610a2d366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b6103b7916008021c5b60ff1690565b906103b79154610a56565b6103b75f600d610a65565b3461039057610a8b366004610478565b6103ec6103d9610a70565b919091604081840312610390576105ff8382610425565b34610390576103ec6103d9610ac3366004610a96565b91612c8d565b9060208282031261039057813567ffffffffffffffff81116103905761061e92016105b8565b90610b0f610b08610afe845190565b8084529260200190565b9260200190565b905f5b818110610b1f5750505090565b909192610b83610b7c6001928651805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff169082015260800190565b9460200190565b929101610b12565b60208082526103b792910190610aef565b34610390576103ec610bb8610bb2366004610ac9565b90613cc2565b60405191829182610b8b565b34610390576103ec610555610bda366004610526565b61312d565b34610390576103ec6106e0610bf5366004610432565b612ef0565b3461039057610c0a366004610478565b6105b36113a8565b3461039057610c22366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b90610c5a610b08610afe845190565b905f5b818110610c6a5750505090565b909192610c80610b7c6001928651815260200190565b929101610c5d565b60208082526103b792910190610c4b565b34610390576103ec610cb4610caf366004610432565b613f42565b60405191829182610c88565b3461039057610cd0366004610478565b6105b36124e9565b3461039057610ce8366004610478565b6103ec7f0000000000000000000000000000000000000000000000000000000000000000610555565b3461039057610d21366004610478565b6103ec6106e0612e8b565b3461039057610d3c366004610478565b6103ec610555611367565b6103b7916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b906103b79154610d47565b6103b75f600b610d68565b3461039057610d8e366004610478565b6103ec610555610d73565b3461039057610da9366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b3461039057610de2366004610478565b6103ec610507613123565b3461039057610dfd366004610478565b6103ec7f0000000000000000000000000000000000000000000000000000000000000000610555565b9091606082840312610390576103b7610e3f8484610425565b936107698160208601610519565b34610390576103ec610cb4610e63366004610e26565b91613d32565b34610390576103ec6106e0610e7f366004610432565b612e53565b801515610389565b905035906103a182610e84565b9190604083820312610390576103b790610eb38185610425565b93602001610e8c565b34610390576105b3610ecf366004610e99565b90613349565b3461039057610ee5366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b34610390576105b3610f21366004610526565b611cb4565b6105b3610f34366004610526565b6121a9565b9060808282031261039057610f4e8183610425565b92610f5c8260208501610425565b92610f6a8360408301610519565b92606082013567ffffffffffffffff8111610390576103b792016109c4565b6105b3610f97366004610f39565b92919091613701565b6103b76014600a610a65565b3461039057610fbc366004610478565b6103ec6106b9610fa0565b6080810192916103a19190805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff16910152565b34610390576103ec611037611032366004610526565b613b0d565b60405191829182610fc7565b34610390576103ec610507611059366004610526565b612811565b346103905761106e366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b9060016002830492168015611110575b602083101461110b57565b6110c3565b91607f1691611100565b80545f93929161113661112c836110f0565b8085529360200190565b9160018116908115611185575060011461114f57505050565b61116091929394505f5260205f2090565b915f925b8184106111715750500190565b805484840152602090930192600101611164565b92949550505060ff1916825215156020020190565b906103b79161111a565b906103a16111be926111b560405190565b9384809261119a565b038361086e565b905f106111d5576103b7906111a4565b611097565b6103b75f600c6111c5565b34610390576111f5366004610478565b6103ec6105076111da565b3461039057611210366004610478565b6103ec7f0000000000000000000000000000000000000000000000000000000000000000610555565b9190604083820312610390576103b7906112538185610425565b93602001610425565b34610390576103ec6103d9611272366004611239565b90612bb7565b34610390576105b361128b366004610432565b611523565b34610390576112a0366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b34610390576112d9366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b34610390576105b361131536600461057c565b906122d3565b346103905761132b366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b6103b7906103f0565b6103b79054611354565b6103b7600a61135d565b61137961141e565b6103a1611397565b6103f06103b76103b79290565b6103b790611381565b6103a16113a35f61138e565b61159e565b6103a1611371565b156113b757565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081528061141a600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6103a1611429611367565b61144f611435336103f0565b9173ffffffffffffffffffffffffffffffffffffffff1690565b146113b0565b6103a19061146161141e565b6114f2565b1561146d57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b6103a1906113a36115056103f05f61138e565b73ffffffffffffffffffffffffffffffffffffffff83161415611466565b6103a190611455565b9073ffffffffffffffffffffffffffffffffffffffff905b9181191691161790565b6103f06103b76103b79273ffffffffffffffffffffffffffffffffffffffff1690565b6103b79061154e565b6103b790611571565b906115936103b761159a9261157a565b825461152c565b9055565b6115a8600a61135d565b906115b481600a611583565b6115e76115e17f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361157a565b9161157a565b916115f160405190565b80805b0390a3565b6103b76103b76103b79290565b90611610906115f9565b5f5260205260405f2090565b6103b79060a01c5b6bffffffffffffffffffffffff1690565b6103b7905461161c565b6103b76040610895565b906103a161168a5f61165961163f565b9461168461166883830161135d565b73ffffffffffffffffffffffffffffffffffffffff1687840152565b01611635565b6bffffffffffffffffffffffff166020840152565b6103b790611649565b6103b76103b76103b7926bffffffffffffffffffffffff1690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b91906116fb565b9290565b9180830292818404149015171561170e57565b6116c3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b9061174a565b9190565b908115611755570490565b611713565b6117736117789193929361176b5f90565b506009611606565b61169f565b91611797835173ffffffffffffffffffffffffffffffffffffffff1690565b905f916117a96114356103f08561138e565b1461180e575b906117f26117e1611746936117db6117d660208901516bffffffffffffffffffffffff1690565b6116a8565b906116f0565b6117ec6117d661183c565b90611740565b93015173ffffffffffffffffffffffffffffffffffffffff1690565b9250611746906117f26117e1611824600861169f565b9592935050506117af565b6116246103b76103b79290565b6103b761271061182f565b61185081613082565b90811561185b575090565b6103b791507f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216149081156118b0575090565b6103b791506119007f01ffc9a7000000000000000000000000000000000000000000000000000000005b917fffffffff000000000000000000000000000000000000000000000000000000001690565b1490565b6103a19061191061141e565b611adb565b6103b79060a01c610a5f565b6103b79054611915565b6103b790610a5f565b6103b7905461192b565b9060ff90611544565b906119576103b761159a92151590565b825461193e565b919060086115449102916119725f19841b90565b921b90565b91906119886103b761159a936115f9565b90835461195e565b6103a1915f91611977565b8181106119a6575050565b806119b35f600193611990565b0161199b565b9190601f81116119c857505050565b6119d86103a1935f5260205f2090565b906020601f8401819004830193106119fa575b6020601f90910104019061199b565b90915081906119eb565b90611a0d815190565b9067ffffffffffffffff821161089057611a3182611a2b85546110f0565b856119b9565b602090601f8311600114611a6a5761159a92915f9183611a5f575b50505f19600883021c1916906002021790565b015190505f80611a4c565b601f19831691611a7d855f5260205f2090565b925f5b818110611ab957509160029391856001969410611aa1575b50505002019055565b01515f196008601f8516021c191690555f8080611a98565b91936020600181928787015181550195019201611a80565b906103a191611a04565b611ae5600a611921565b611af8611af26002610672565b91610672565b14611b28576040517fede69771000000000000000000000000000000000000000000000000000000008152600490fd5b611b32600d611934565b611b3e60015b91151590565b14611b5a576103a190611b536001600d611947565b600c611ad1565b6040517fa89ac151000000000000000000000000000000000000000000000000000000008152600490fd5b6103a190611904565b6103a190611b9a61141e565b611bd6565b9074ff00000000000000000000000000000000000000009060a01b611544565b90611bcf6103b761159a9261067c565b8254611b9f565b611bde612ea9565b7f000000000000000000000000000000000000000000000000000000000000000011611c89575f611c0e816115f9565b8203611c20576103a19150600a611bbf565b506001611c2c816115f9565b8203611c3e576103a19150600a611bbf565b50600290611c4e611746836115f9565b03611c5e576103a190600a611bbf565b6040517fb4fa3fb3000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fec2c6727000000000000000000000000000000000000000000000000000000008152600490fd5b6103a190611b8e565b906103a191611cca61141e565b611d0b565b9190820180921161170e57565b611ce96103b76103b79290565b63ffffffff1690565b63ffffffff9081169116019063ffffffff821161170e57565b90611d1d81611d18612ea9565b611ccf565b7f000000000000000000000000000000000000000000000000000000000000000010611d705781611d6b611d65611d566103a195612df6565b611d5f85611cdc565b90611cf2565b82612584565b6138b4565b6040517fca586aa8000000000000000000000000000000000000000000000000000000008152600490fd5b906103a191611cbd565b9190611db9611db5838333612c8d565b1590565b611dc6576103a192611e04565b6040517f48df50e8000000000000000000000000000000000000000000000000000000008152600490fd5b6103b76103b76103b79263ffffffff1690565b915050611e11600a611921565b611e1e611af26001610672565b14611e4f576040515b7f5b77ceac000000000000000000000000000000000000000000000000000000008152600490fd5b611e5b81611d18612ea9565b611eab6117466103b77f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611ccf565b1115611edd576040515b7fde42be6c000000000000000000000000000000000000000000000000000000008152600490fd5b611ef281611d18611eed33612e25565b611df1565b7f00000000000000000000000000000000000000000000000000000000000000001015611f45576040515b7f37ac80a2000000000000000000000000000000000000000000000000000000008152600490fd5b34611f766117466103b77f0000000000000000000000000000000000000000000000000000000000000000856116f0565b10611f95576103a19033611d6b611f8f611d5683612e25565b826125e9565b6040517f6a12f104000000000000000000000000000000000000000000000000000000008152600490fd5b906103a19291611da5565b33611fd532611435565b03611fe3576103a19061200e565b6040517fea8370b0000000000000000000000000000000000000000000000000000000008152600490fd5b612018600a611921565b612025611af26002610672565b14612056576040515b7faf1fd675000000000000000000000000000000000000000000000000000000008152600490fd5b7f00000000000000000000000000000000000000000000000000000000000000008111156120aa576040515b7f6b350169000000000000000000000000000000000000000000000000000000008152600490fd5b6120b681611d18612ea9565b7f00000000000000000000000000000000000000000000000000000000000000001015612109576040515b7f8a164f63000000000000000000000000000000000000000000000000000000008152600490fd5b61211681611d1833612e53565b7f00000000000000000000000000000000000000000000000000000000000000001015612169576040515b7f2fa72bd8000000000000000000000000000000000000000000000000000000008152600490fd5b3461219a6117466103b77f0000000000000000000000000000000000000000000000000000000000000000856116f0565b10611f95576103a190336138b4565b6103a190611fcb565b906103a1916121bf61141e565b906121ca600a611921565b6121d7611af26001610672565b146121e457604051611e27565b6121f081611d18612ea9565b6122406117466103b77f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611ccf565b116122cb576122516103f05f61138e565b73ffffffffffffffffffffffffffffffffffffffff83160361227a576103a19150611d6b611367565b61228a81611d18611eed85612e25565b7f0000000000000000000000000000000000000000000000000000000000000000106122c35781611d6b611f8f611d566103a195612e25565b604051611f1d565b604051611eb5565b906103a1916121b2565b906103a1916122ea61141e565b906122f5600a611921565b612302611af26002610672565b1461230f5760405161202e565b7f000000000000000000000000000000000000000000000000000000000000000081111561233f57604051612082565b61234b81611d18612ea9565b7f0000000000000000000000000000000000000000000000000000000000000000106123ea5761237d6103f05f61138e565b73ffffffffffffffffffffffffffffffffffffffff8316036123a6576103a19150611d6b611367565b6123b381611d1884612e53565b7f0000000000000000000000000000000000000000000000000000000000000000106123e2576103a1916138b4565b604051612141565b6040516120e1565b906103a1916122dd565b61240461141e565b6103a1612413565b1561039057565b61241c3061157a565b5f6124bf823161243561242e846115f9565b821161240c565b6124817f000000000000000000000000000000000000000000000000000000000000000061248761247061246a6103b66115f9565b856116f0565b916124816103e8936117ec856115f9565b9061250f565b6117ec6124b97f0000000000000000000000000000000000000000000000000000000000000000946117db60326115f9565b916115f9565b6124cd6117468331926115f9565b116124d55750565b6103a1906124e1611367565b90319061250f565b6103a16123fc565b3d1561250a576125003d6108c6565b903d5f602084013e565b606090565b5f80916125339361251f60405190565b90818003925af161252e6124f1565b501590565b61253957565b6040517f90b8ec18000000000000000000000000000000000000000000000000000000008152600490fd5b6125776103b76103b79263ffffffff1690565b67ffffffffffffffff1690565b6125906103a192612564565b9061300b565b6103b7906125a76117466103b79490565b901b90565b6125776103b76103b79290565b6125d69067ffffffffffffffff165b9167ffffffffffffffff1690565b019067ffffffffffffffff821161170e57565b61259061261361260e6103a19461260961260360206115f9565b91611df1565b612596565b6125ac565b61262461261f84612df6565b612564565b906125b9565b1561263157565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b6103b790546110f0565b6103b75f6108c6565b6103b76126c0565b80545f9392916126e76126e3836110f0565b9390565b9160018116908115612735575060011461270057505050565b61271191929394505f5260205f2090565b5f905b8382106127215750500190565b600181602092548486015201910190612714565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001683525050811515909102019150565b61277661279f916103b7936126d1565b7f68696464656e0000000000000000000000000000000000000000000000000000815260060190565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000815260050190565b6104d76127e0926020926127da815190565b94859290565b93849101610482565b916127fa6103b79361279f936126d1565b906127c8565b916127fa6103b79361279f936127c8565b61282261281d826133c6565b61262a565b7f000000000000000000000000000000000000000000000000000000000000000081116128b55761285b6128576103b7610964565b5190565b6128676117465f6115f9565b11156128ac576128a06103b76103b792612888612882610964565b91612983565b9061289260405190565b938492602084019283612800565b9081038252038261086e565b506103b76126c9565b6128bf600d611934565b5f906128ca82611b38565b1461292257600c906128e76117466128e1846126b6565b926115f9565b1115612918576103b76128a0916129006103b794612983565b9061290a60405190565b9384926020840192836127e9565b50506103b76126c9565b600c91506129356117466128e1846126b6565b11156128ac576103b7906103b761294b60405190565b80926128a0602083019182612766565b369037565b906103a1612976612970846108c6565b936108a9565b601f19016020840161295b565b61298c81612a14565b9061299c6001926104d7846115f9565b91806129a784612960565b936020018401905b6129ba575b50505090565b6129f4905f1901927f3031323334353637383961626364656600000000000000000000000000000000600a82061a84536117ec600a6115f9565b9081612a026117465f6115f9565b14612a0f579091816129af565b6129b4565b612a1d5f6115f9565b907a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000612a43816115f9565b821015612b95575b506d04ee2d6d415b85acef8100000000612a64816115f9565b821015612b73575b50662386f26fc10000612a7e816115f9565b821015612b51575b506305f5e100612a95816115f9565b821015612b2f575b50612710612aaa816115f9565b821015612b0d575b506064612abe816115f9565b821015612aeb575b50612ad4611746600a6115f9565b1015612add5790565b6103b7906104d760016115f9565b612b06916117ec612afb926115f9565b916104d760026115f9565b905f612ac6565b612b28916117ec612b1d926115f9565b916104d760046115f9565b905f612ab2565b612b4a916117ec612b3f926115f9565b916104d760086115f9565b905f612a9d565b612b6c916117ec612b61926115f9565b916104d760106115f9565b905f612a86565b612b8e916117ec612b83926115f9565b916104d760206115f9565b905f612a6c565b612bb0916117ec612ba5926115f9565b916104d760406115f9565b905f612a4b565b90612bc56103f0600b61135d565b73ffffffffffffffffffffffffffffffffffffffff821614612bea576103b7916133a7565b5050600190565b6103ba9073ffffffffffffffffffffffffffffffffffffffff1660601b90565b6104d781601493612bf1565b67ffffffffffffffff81116108905760208091020190565b90929192612c456108d382612c1d565b938185526020808601920283019281841161039057915b838310612c695750505050565b60208091612c778486610519565b815201920191612c5c565b6103b7913691612c35565b90612cf56103b79392612c9d5f90565b50612cba612caa60405190565b80926128a0602083019182612c11565b612ccc612cc5825190565b9160200190565b20927f000000000000000000000000000000000000000000000000000000000000000092612c82565b6116f7611900929361174692612d085f90565b50612d68565b5f19811461170e5760010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b90612d52825190565b811015612d63576020809102010190565b612d1c565b612d715f6115f9565b915b612d7e6103b7835190565b831015612db057612da4612daa91612d9e612d998686612d49565b612857565b90612db6565b92612d0e565b91612d73565b91505090565b81811015612dcf57906103b7915f5260205260405f2090565b6103b7915f5260205260405f2090565b611ce96103b76103b79267ffffffffffffffff1690565b612e0a6103b791612e045f90565b50612fae565b612ddf565b61257790612e206125c86103b79490565b901c90565b612e0a612e366103b792612e045f90565b612e4060206115f9565b90612e0f565b9190820391821161170e57565b6103b790612e75611eed612e7b612e6984612f7d565b612e75611eed86612df6565b90612e46565b92612e25565b6103b7600a611921565b612e943061157a565b3190565b6103b79081565b6103b79054612e98565b6103b7612ec7612eb85f612e9f565b612ec26001612e9f565b900390565b612ec25b6103b760016115f9565b906116109061157a565b6103b767ffffffffffffffff6115f9565b612efc6103f05f61138e565b73ffffffffffffffffffffffffffffffffffffffff821614612f3757612f26612f2b916005612ed5565b612e9f565b612f33612edf565b1690565b6040517f8f4eb604000000000000000000000000000000000000000000000000000000008152600490fd5b6103b760406115f9565b6103b790612e206117466103b79490565b612f96612f26612f2b92612f8e5f90565b506005612ed5565b612f9e612f62565b90612f6c565b6103b760c06115f9565b61260e612fc2612f266103b793612f8e5f90565b612f9e612fa4565b6103b777ffffffffffffffffffffffffffffffffffffffffffffffff6115f9565b905f1990611544565b906130046103b761159a926115f9565b8254612feb565b906130456103a19260059261303e613026612f268487612ed5565b61302e612fca565b1691613038612fa4565b90612596565b1792612ed5565b612ff4565b61305d6130576103b79290565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61308f6301ffc9a761304a565b7fffffffff000000000000000000000000000000000000000000000000000000008216149081156130d7575b81156130c5575090565b90506119006118da635b5e139f61304a565b90506130e66380ac58cd61304a565b7fffffffff00000000000000000000000000000000000000000000000000000000821614906130bb565b6103b7906111a4565b6103b76002613110565b6103b76003613110565b6131496131446103b79261313e5f90565b50613174565b611381565b611571565b6103b77c01000000000000000000000000000000000000000000000000000000006115f9565b90819061317f612ecb565b8310156131b2575b6040517fdf2d9b42000000000000000000000000000000000000000000000000000000008152600490fd5b6131be6103b75f612e9f565b831015613187576131d4612f2660049485611606565b806131dd61314e565b165f906131ec611746836115f9565b146131f8575050613187565b92905b613204846115f9565b810361322957505f19019161320461321f612f268587611606565b91939190506131fb565b925050915090565b9061323b8161312d565b913373ffffffffffffffffffffffffffffffffffffffff841681036132b7575b50613272815f61326c856006611606565b01611583565b6132a86128e16132a27f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259561157a565b9261157a565b926132b260405190565b5f90a4565b611db56132c49185612bb7565b6132ce575f61325b565b6040517fcfb3b942000000000000000000000000000000000000000000000000000000008152600490fd5b613305611db5826133c6565b61331e575f6133186103b7926006611606565b0161135d565b6040517fcf4700e4000000000000000000000000000000000000000000000000000000008152600490fd5b33613367836133628461335d856007612ed5565b612ed5565b611947565b6115f461339d6133977f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319361157a565b9361157a565b936103dd60405190565b6103b79161335d6133c1926133b95f90565b506007612ed5565b611934565b6133ce612ecb565b8110159081613406575b816133e1575090565b6133f19150612f26906004611606565b6133f961314e565b166119006117465f6115f9565b90506134146103b75f612e9f565b8110906133d8565b6103b77c02000000000000000000000000000000000000000000000000000000006115f9565b919061344d82613174565b61345961314982611381565b61347873ffffffffffffffffffffffffffffffffffffffff8616611435565b0361367d57613486836136d5565b90919033613498611db58289856136a8565b61363b575b505f926134ac6103f08561138e565b73ffffffffffffffffffffffffffffffffffffffff861614613610578391613608575b50506135116134ff84600561335d6134e78a83612ed5565b6134f96134f382612e9f565b5f190190565b90612ff4565b6134f961350b82612e9f565b60010190565b61351961341c565b61354a613527838689613a96565b82178573ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b9061355b6004926130458885611606565b8216613569611746856115f9565b146135a2575b5050506132a86128e16132a27fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9561157a565b6135b46135af60016115f9565b860190565b926135c2612f268584611606565b6135ce611746836115f9565b146135da575b5061356f565b6103b76135e691612e9f565b83036135f3575b806135d4565b6136009261304591611606565b5f80806135ed565b55815f6134cf565b6040517fea553b34000000000000000000000000000000000000000000000000000000008152600490fd5b611db56136489188612bb7565b613652575f61349d565b6040517f59c896be000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fa1148100000000000000000000000000000000000000000000000000000000008152600490fd5b919073ffffffffffffffffffffffffffffffffffffffff80916136c85f90565b5016911691821491141790565b6103b76136eb916136e35f90565b506006611606565b90815490565b90916103a1926136ff6126c9565b925b91929092613710818585613442565b833b61371e6117465f6115f9565b0361372a575b50505050565b61373793611db5936137e2565b613744575f808080613724565b6040515b7fd1a57ed6000000000000000000000000000000000000000000000000000000008152600490fd5b905051906103a182610365565b90602082820312610390576103b791613770565b73ffffffffffffffffffffffffffffffffffffffff91821681529116602082015260408101919091526080606082018190526103b7929101906104a3565b61305d6130576103b79263ffffffff1690565b909392916020906137fb6137f65f9761157a565b61157a565b63150b7a02935f3361382b61380f60405190565b988996879586946138208c60e01b90565b865260048601613791565b03925af15f9281613884575b50613871575050600161384657565b61384e6124f1565b805161385c6117465f6115f9565b0361386957604051613748565b805190602001fd5b6119009192935061305d6118da916137cf565b6138a691935060203d81116138ad575b61389e818361086e565b81019061377d565b915f613837565b503d613894565b9190916138c05f612e9f565b925f906138cc826115f9565b8114613a3a578461398e849273ffffffffffffffffffffffffffffffffffffffff6001928392613931613919613900612f62565b61391361390c886115f9565b9182612596565b17830290565b6134f96139278a6005612ed5565b916104d783612e9f565b61398961397d6001831460e11b61395b61394a8c61138e565b6139538d6115f9565b9b8c91613a96565b178b73ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b61304560049d8e611606565b850190565b9616928084877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4015b858103613a0b575050146139d3576103a1929350612ff4565b61141a846139e060405190565b7f2e076300000000000000000000000000000000000000000000000000000000008152918291820190565b80829184877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4016139ba565b6040517fb562e8dd000000000000000000000000000000000000000000000000000000008152600490fd5b6103b760e86115f9565b613a7c6103b76103b79290565b62ffffff1690565b6103b76103b76103b79262ffffff1690565b613aca612609916103b79493613aa95f90565b50613ac4613abf613ab8613a65565b8097612f6c565b613a6f565b91613acf565b613a84565b5050506103b75f90565b6103b76080610895565b613aeb613ad9565b5f8082526020820181905260408201819052606082015290565b6103b7613ae3565b613b15613b05565b50613b1e613b05565b613b296103b7612ecb565b82108015613b65575b613b605750613b4081613b96565b90613b4e6040830151151590565b613b5c576103b79150613b82565b5090565b905090565b50613b716103b7613b79565b821015613b32565b6103b75f612e9f565b613b916103b79161313e613b05565b613bba565b613b91612f266103b792613ba8613b05565b506004611606565b6103b760a06115f9565b906103a1613bc6613b05565b6060613c4b613abf8396613bf9613bdf61314983611381565b73ffffffffffffffffffffffffffffffffffffffff168652565b613c21613c1061260e613c0a613bb0565b84612f6c565b67ffffffffffffffff166020870152565b613c43613c2c61314e565b8216613c3a6117465f6115f9565b14156040870152565b612f9e613a65565b62ffffff16910152565b906108d86108d383612c1d565b5f5b828110613c7057505050565b602090613c7b613b05565b8184015201613c64565b906103a1613c9b613c9584613c55565b93612c1d565b601f190160208401613c62565b9190811015612d63576020020190565b356103b781610513565b91908092613ccf84613c85565b925f5b855b8114613d1a57613d1381613cf7611032613cf2613cd4958989613ca8565b613cb8565b613d018289612d49565b52613d0c8188612d49565b5060010190565b9050613cd2565b509350505090565b906103a1612976613c9584613c55565b9082811015613f17575f91613d45613b79565b613d4d612ecb565b808410613f0f575b50808511613f07575b50613d6881612ef0565b84831015613ef857828503818110613ef0575b505b613d8681613d22565b955f91613d92836115f9565b8114613ee757613da185613b0d565b945f95613db4611db56040830151151590565b613ec4575b505b875b81141580613eba575b15613ead5783613dd582613b96565b6040810151613e9e5701805173ffffffffffffffffffffffffffffffffffffffff16613e066114356103f08861138e565b03613e7f575b508873ffffffffffffffffffffffffffffffffffffffff861673ffffffffffffffffffffffffffffffffffffffff881614613e52575b50613dbd906001015b9050613dbb565b9681613e76613dbd93613e7384613e6d613e4b969160010190565b9c612d49565b52565b91505088613e42565b5173ffffffffffffffffffffffffffffffffffffffff1695505f613e0c565b5050613e4b613dbd9160010190565b5050959450505050815290565b5081871415613dc6565b84015173ffffffffffffffffffffffffffffffffffffffff169550613dbd613db9565b50945050505050565b90505f613d7b565b50613f025f6115f9565b613d7d565b93505f613d5e565b92505f613d55565b6040517f32c1995a000000000000000000000000000000000000000000000000000000008152600490fd5b5f80613f4d83612ef0565b92613f5784613d22565b94613f60613b05565b50613f69612ecb565b855b851461404657613f7a81613b96565b604081015161403957805173ffffffffffffffffffffffffffffffffffffffff16905f91613fad6114356103f08561138e565b03614014575b5050613ffb613f6b91613fd98573ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8716146140025760010190565b9050613f69565b61350b81613e7360018a01998c612d49565b015173ffffffffffffffffffffffffffffffffffffffff169350613ffb613f6b613fb3565b50613f6b90600101613ffb565b50935050505056fea2646970667358221220a0b8a61156ebd00d3d4fb6c03cd84ea8e435ec72b5b6173d211eaaebe55d09d764736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a714610360578063051bcd691461035b57806306fdde0314610356578063081812fc14610351578063095ea7b31461034c5780630a887cda146103475780630c3f6acf1461034257806318160ddd1461033d5780631dee5cd91461033857806322ad06701461033357806323b872dd1461032e578063271047bc146103295780632a55205a14610324578063314843131461031f57806342842e0e1461031a57806347992844146103155780634c2612471461031057806351e75e8b1461030b57806354214f69146103065780635a23dd99146103015780635bbb2177146102fc5780636352211e146102f757806370a08231146102f2578063715018a6146102ed578063763f8d12146102e85780638462151c146102e3578063853828b6146102de57806385660e00146102d95780638b7afe2e146102d45780638da5cb5b146102cf5780638ecff037146102ca57806391245736146102c557806395d89b41146102c05780639845047b146102bb57806399a2557a146102b65780639b398f84146102b1578063a22cb465146102ac578063a8550e7e146102a7578063b00741cb146102a2578063b3ab66b01461029d578063b88d4fde14610298578063c19d93fb14610293578063c23dc68f1461028e578063c87b56dd14610289578063db4bfb6414610284578063dbddb26a1461027f578063e0cad9b11461027a578063e985e9c514610275578063f2fde38b14610270578063f41388971461026b578063f47c84c514610266578063f5b0b808146102615763fa260355036103905761131b565b611302565b6112c9565b611290565b611278565b61125c565b611200565b6111e5565b61105e565b611043565b61101c565b610fac565b610f89565b610f26565b610f0e565b610ed5565b610ebc565b610e69565b610e4d565b610ded565b610dd2565b610d99565b610d7e565b610d2c565b610d11565b610cd8565b610cc0565b610c99565b610c12565b610bfa565b610bdf565b610bc4565b610b9c565b610aad565b610a7b565b610a1d565b610a05565b610974565b61082d565b610814565b6107e5565b610786565b610772565b610729565b6106f0565b6106c5565b61069e565b610622565b61059f565b61053a565b6104ec565b610446565b6103be565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361039057565b5f80fd5b905035906103a182610365565b565b90602082820312610390576103b791610394565b90565b9052565b34610390576103ec6103d96103d43660046103a3565b611847565b6040515b91829182901515815260200190565b0390f35b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116610389565b905035906103a182610409565b90602082820312610390576103b791610425565b34610390576103ec61046161045c366004610432565b612e25565b6040519182918263ffffffff909116815260200190565b5f91031261039057565b5f5b8381106104935750505f910152565b8181015183820152602001610484565b6104c46104cd6020936104d7936104b8815190565b80835293849260200190565b95869101610482565b601f01601f191690565b0190565b60208082526103b7929101906104a3565b34610390576104fc366004610478565b6103ec610507613119565b604051918291826104db565b80610389565b905035906103a182610513565b90602082820312610390576103b791610519565b34610390576103ec610555610550366004610526565b6132f9565b6040519182918273ffffffffffffffffffffffffffffffffffffffff909116815260200190565b9190604083820312610390576103b7906105968185610425565b93602001610519565b6105b36105ad36600461057c565b90613231565b604051005b909182601f830112156103905781359167ffffffffffffffff831161039057602001926020830284011161039057565b919091604081840312610390576105ff8382610519565b92602082013567ffffffffffffffff81116103905761061e92016105b8565b9091565b6105b36106303660046105e8565b91611fc0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003111561066d57565b610636565b906103a182610663565b6103b790610672565b6103ba9061067c565b6020810192916103a19190610685565b34610390576106ae366004610478565b6103ec6106b9612e81565b6040519182918261068e565b34610390576106d5366004610478565b6103ec6106e0612ea9565b6040519182918290815260200190565b3461039057610700366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b34610390576105b361073c36600461057c565b90611d9b565b9091606082840312610390576103b761075b8484610425565b936107698160208601610425565b93604001610519565b6105b3610780366004610742565b91613442565b34610390576103ec61046161079c366004610432565b612df6565b9190604083820312610390576103b7906105968185610519565b73ffffffffffffffffffffffffffffffffffffffff90911681526040810192916103a19160200152565b34610390576107fe6107f83660046107a1565b9061175a565b906103ec61080b60405190565b928392836107bb565b34610390576105b361082736600461057c565b906123f2565b6105b361083b366004610742565b916136f1565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f01601f1916810190811067ffffffffffffffff82111761089057604052565b610841565b906103a16108a260405190565b928361086e565b67ffffffffffffffff811161089057602090601f01601f19160190565b906108d86108d3836108a9565b610895565b918252565b6108e760436108c6565b7f697066733a2f2f6261667962656967356d6269696e69726e6464366d34336c3260208201527f6e6f3261343677636e6e7369686f64346f6f32687a6f6972356679786b6c777560408201527f63692f0000000000000000000000000000000000000000000000000000000000606082015290565b6103b76108dd565b6103b761095c565b6103b7610964565b3461039057610984366004610478565b6103ec61050761096c565b90825f939282370152565b909291926109aa6108d3826108a9565b93818552602085019082840111610390576103a19261098f565b9080601f83011215610390578160206103b79335910161099a565b9060208282031261039057813567ffffffffffffffff8111610390576103b792016109c4565b34610390576105b3610a183660046109df565b611b85565b3461039057610a2d366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b6103b7916008021c5b60ff1690565b906103b79154610a56565b6103b75f600d610a65565b3461039057610a8b366004610478565b6103ec6103d9610a70565b919091604081840312610390576105ff8382610425565b34610390576103ec6103d9610ac3366004610a96565b91612c8d565b9060208282031261039057813567ffffffffffffffff81116103905761061e92016105b8565b90610b0f610b08610afe845190565b8084529260200190565b9260200190565b905f5b818110610b1f5750505090565b909192610b83610b7c6001928651805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff169082015260800190565b9460200190565b929101610b12565b60208082526103b792910190610aef565b34610390576103ec610bb8610bb2366004610ac9565b90613cc2565b60405191829182610b8b565b34610390576103ec610555610bda366004610526565b61312d565b34610390576103ec6106e0610bf5366004610432565b612ef0565b3461039057610c0a366004610478565b6105b36113a8565b3461039057610c22366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b90610c5a610b08610afe845190565b905f5b818110610c6a5750505090565b909192610c80610b7c6001928651815260200190565b929101610c5d565b60208082526103b792910190610c4b565b34610390576103ec610cb4610caf366004610432565b613f42565b60405191829182610c88565b3461039057610cd0366004610478565b6105b36124e9565b3461039057610ce8366004610478565b6103ec7f0000000000000000000000000000000000000000000000000000000000000000610555565b3461039057610d21366004610478565b6103ec6106e0612e8b565b3461039057610d3c366004610478565b6103ec610555611367565b6103b7916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b906103b79154610d47565b6103b75f600b610d68565b3461039057610d8e366004610478565b6103ec610555610d73565b3461039057610da9366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b3461039057610de2366004610478565b6103ec610507613123565b3461039057610dfd366004610478565b6103ec7f0000000000000000000000000000000000000000000000000000000000000000610555565b9091606082840312610390576103b7610e3f8484610425565b936107698160208601610519565b34610390576103ec610cb4610e63366004610e26565b91613d32565b34610390576103ec6106e0610e7f366004610432565b612e53565b801515610389565b905035906103a182610e84565b9190604083820312610390576103b790610eb38185610425565b93602001610e8c565b34610390576105b3610ecf366004610e99565b90613349565b3461039057610ee5366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b34610390576105b3610f21366004610526565b611cb4565b6105b3610f34366004610526565b6121a9565b9060808282031261039057610f4e8183610425565b92610f5c8260208501610425565b92610f6a8360408301610519565b92606082013567ffffffffffffffff8111610390576103b792016109c4565b6105b3610f97366004610f39565b92919091613701565b6103b76014600a610a65565b3461039057610fbc366004610478565b6103ec6106b9610fa0565b6080810192916103a19190805173ffffffffffffffffffffffffffffffffffffffff16825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff16910152565b34610390576103ec611037611032366004610526565b613b0d565b60405191829182610fc7565b34610390576103ec610507611059366004610526565b612811565b346103905761106e366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b9060016002830492168015611110575b602083101461110b57565b6110c3565b91607f1691611100565b80545f93929161113661112c836110f0565b8085529360200190565b9160018116908115611185575060011461114f57505050565b61116091929394505f5260205f2090565b915f925b8184106111715750500190565b805484840152602090930192600101611164565b92949550505060ff1916825215156020020190565b906103b79161111a565b906103a16111be926111b560405190565b9384809261119a565b038361086e565b905f106111d5576103b7906111a4565b611097565b6103b75f600c6111c5565b34610390576111f5366004610478565b6103ec6105076111da565b3461039057611210366004610478565b6103ec7f0000000000000000000000000000000000000000000000000000000000000000610555565b9190604083820312610390576103b7906112538185610425565b93602001610425565b34610390576103ec6103d9611272366004611239565b90612bb7565b34610390576105b361128b366004610432565b611523565b34610390576112a0366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b34610390576112d9366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b34610390576105b361131536600461057c565b906122d3565b346103905761132b366004610478565b6103ec7f00000000000000000000000000000000000000000000000000000000000000006106e0565b6103b7906103f0565b6103b79054611354565b6103b7600a61135d565b61137961141e565b6103a1611397565b6103f06103b76103b79290565b6103b790611381565b6103a16113a35f61138e565b61159e565b6103a1611371565b156113b757565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081528061141a600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6103a1611429611367565b61144f611435336103f0565b9173ffffffffffffffffffffffffffffffffffffffff1690565b146113b0565b6103a19061146161141e565b6114f2565b1561146d57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b6103a1906113a36115056103f05f61138e565b73ffffffffffffffffffffffffffffffffffffffff83161415611466565b6103a190611455565b9073ffffffffffffffffffffffffffffffffffffffff905b9181191691161790565b6103f06103b76103b79273ffffffffffffffffffffffffffffffffffffffff1690565b6103b79061154e565b6103b790611571565b906115936103b761159a9261157a565b825461152c565b9055565b6115a8600a61135d565b906115b481600a611583565b6115e76115e17f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361157a565b9161157a565b916115f160405190565b80805b0390a3565b6103b76103b76103b79290565b90611610906115f9565b5f5260205260405f2090565b6103b79060a01c5b6bffffffffffffffffffffffff1690565b6103b7905461161c565b6103b76040610895565b906103a161168a5f61165961163f565b9461168461166883830161135d565b73ffffffffffffffffffffffffffffffffffffffff1687840152565b01611635565b6bffffffffffffffffffffffff166020840152565b6103b790611649565b6103b76103b76103b7926bffffffffffffffffffffffff1690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b91906116fb565b9290565b9180830292818404149015171561170e57565b6116c3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b9061174a565b9190565b908115611755570490565b611713565b6117736117789193929361176b5f90565b506009611606565b61169f565b91611797835173ffffffffffffffffffffffffffffffffffffffff1690565b905f916117a96114356103f08561138e565b1461180e575b906117f26117e1611746936117db6117d660208901516bffffffffffffffffffffffff1690565b6116a8565b906116f0565b6117ec6117d661183c565b90611740565b93015173ffffffffffffffffffffffffffffffffffffffff1690565b9250611746906117f26117e1611824600861169f565b9592935050506117af565b6116246103b76103b79290565b6103b761271061182f565b61185081613082565b90811561185b575090565b6103b791507f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216149081156118b0575090565b6103b791506119007f01ffc9a7000000000000000000000000000000000000000000000000000000005b917fffffffff000000000000000000000000000000000000000000000000000000001690565b1490565b6103a19061191061141e565b611adb565b6103b79060a01c610a5f565b6103b79054611915565b6103b790610a5f565b6103b7905461192b565b9060ff90611544565b906119576103b761159a92151590565b825461193e565b919060086115449102916119725f19841b90565b921b90565b91906119886103b761159a936115f9565b90835461195e565b6103a1915f91611977565b8181106119a6575050565b806119b35f600193611990565b0161199b565b9190601f81116119c857505050565b6119d86103a1935f5260205f2090565b906020601f8401819004830193106119fa575b6020601f90910104019061199b565b90915081906119eb565b90611a0d815190565b9067ffffffffffffffff821161089057611a3182611a2b85546110f0565b856119b9565b602090601f8311600114611a6a5761159a92915f9183611a5f575b50505f19600883021c1916906002021790565b015190505f80611a4c565b601f19831691611a7d855f5260205f2090565b925f5b818110611ab957509160029391856001969410611aa1575b50505002019055565b01515f196008601f8516021c191690555f8080611a98565b91936020600181928787015181550195019201611a80565b906103a191611a04565b611ae5600a611921565b611af8611af26002610672565b91610672565b14611b28576040517fede69771000000000000000000000000000000000000000000000000000000008152600490fd5b611b32600d611934565b611b3e60015b91151590565b14611b5a576103a190611b536001600d611947565b600c611ad1565b6040517fa89ac151000000000000000000000000000000000000000000000000000000008152600490fd5b6103a190611904565b6103a190611b9a61141e565b611bd6565b9074ff00000000000000000000000000000000000000009060a01b611544565b90611bcf6103b761159a9261067c565b8254611b9f565b611bde612ea9565b7f000000000000000000000000000000000000000000000000000000000000000011611c89575f611c0e816115f9565b8203611c20576103a19150600a611bbf565b506001611c2c816115f9565b8203611c3e576103a19150600a611bbf565b50600290611c4e611746836115f9565b03611c5e576103a190600a611bbf565b6040517fb4fa3fb3000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fec2c6727000000000000000000000000000000000000000000000000000000008152600490fd5b6103a190611b8e565b906103a191611cca61141e565b611d0b565b9190820180921161170e57565b611ce96103b76103b79290565b63ffffffff1690565b63ffffffff9081169116019063ffffffff821161170e57565b90611d1d81611d18612ea9565b611ccf565b7f000000000000000000000000000000000000000000000000000000000000000010611d705781611d6b611d65611d566103a195612df6565b611d5f85611cdc565b90611cf2565b82612584565b6138b4565b6040517fca586aa8000000000000000000000000000000000000000000000000000000008152600490fd5b906103a191611cbd565b9190611db9611db5838333612c8d565b1590565b611dc6576103a192611e04565b6040517f48df50e8000000000000000000000000000000000000000000000000000000008152600490fd5b6103b76103b76103b79263ffffffff1690565b915050611e11600a611921565b611e1e611af26001610672565b14611e4f576040515b7f5b77ceac000000000000000000000000000000000000000000000000000000008152600490fd5b611e5b81611d18612ea9565b611eab6117466103b77f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611ccf565b1115611edd576040515b7fde42be6c000000000000000000000000000000000000000000000000000000008152600490fd5b611ef281611d18611eed33612e25565b611df1565b7f00000000000000000000000000000000000000000000000000000000000000001015611f45576040515b7f37ac80a2000000000000000000000000000000000000000000000000000000008152600490fd5b34611f766117466103b77f0000000000000000000000000000000000000000000000000000000000000000856116f0565b10611f95576103a19033611d6b611f8f611d5683612e25565b826125e9565b6040517f6a12f104000000000000000000000000000000000000000000000000000000008152600490fd5b906103a19291611da5565b33611fd532611435565b03611fe3576103a19061200e565b6040517fea8370b0000000000000000000000000000000000000000000000000000000008152600490fd5b612018600a611921565b612025611af26002610672565b14612056576040515b7faf1fd675000000000000000000000000000000000000000000000000000000008152600490fd5b7f00000000000000000000000000000000000000000000000000000000000000008111156120aa576040515b7f6b350169000000000000000000000000000000000000000000000000000000008152600490fd5b6120b681611d18612ea9565b7f00000000000000000000000000000000000000000000000000000000000000001015612109576040515b7f8a164f63000000000000000000000000000000000000000000000000000000008152600490fd5b61211681611d1833612e53565b7f00000000000000000000000000000000000000000000000000000000000000001015612169576040515b7f2fa72bd8000000000000000000000000000000000000000000000000000000008152600490fd5b3461219a6117466103b77f0000000000000000000000000000000000000000000000000000000000000000856116f0565b10611f95576103a190336138b4565b6103a190611fcb565b906103a1916121bf61141e565b906121ca600a611921565b6121d7611af26001610672565b146121e457604051611e27565b6121f081611d18612ea9565b6122406117466103b77f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611ccf565b116122cb576122516103f05f61138e565b73ffffffffffffffffffffffffffffffffffffffff83160361227a576103a19150611d6b611367565b61228a81611d18611eed85612e25565b7f0000000000000000000000000000000000000000000000000000000000000000106122c35781611d6b611f8f611d566103a195612e25565b604051611f1d565b604051611eb5565b906103a1916121b2565b906103a1916122ea61141e565b906122f5600a611921565b612302611af26002610672565b1461230f5760405161202e565b7f000000000000000000000000000000000000000000000000000000000000000081111561233f57604051612082565b61234b81611d18612ea9565b7f0000000000000000000000000000000000000000000000000000000000000000106123ea5761237d6103f05f61138e565b73ffffffffffffffffffffffffffffffffffffffff8316036123a6576103a19150611d6b611367565b6123b381611d1884612e53565b7f0000000000000000000000000000000000000000000000000000000000000000106123e2576103a1916138b4565b604051612141565b6040516120e1565b906103a1916122dd565b61240461141e565b6103a1612413565b1561039057565b61241c3061157a565b5f6124bf823161243561242e846115f9565b821161240c565b6124817f000000000000000000000000000000000000000000000000000000000000000061248761247061246a6103b66115f9565b856116f0565b916124816103e8936117ec856115f9565b9061250f565b6117ec6124b97f0000000000000000000000000000000000000000000000000000000000000000946117db60326115f9565b916115f9565b6124cd6117468331926115f9565b116124d55750565b6103a1906124e1611367565b90319061250f565b6103a16123fc565b3d1561250a576125003d6108c6565b903d5f602084013e565b606090565b5f80916125339361251f60405190565b90818003925af161252e6124f1565b501590565b61253957565b6040517f90b8ec18000000000000000000000000000000000000000000000000000000008152600490fd5b6125776103b76103b79263ffffffff1690565b67ffffffffffffffff1690565b6125906103a192612564565b9061300b565b6103b7906125a76117466103b79490565b901b90565b6125776103b76103b79290565b6125d69067ffffffffffffffff165b9167ffffffffffffffff1690565b019067ffffffffffffffff821161170e57565b61259061261361260e6103a19461260961260360206115f9565b91611df1565b612596565b6125ac565b61262461261f84612df6565b612564565b906125b9565b1561263157565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b6103b790546110f0565b6103b75f6108c6565b6103b76126c0565b80545f9392916126e76126e3836110f0565b9390565b9160018116908115612735575060011461270057505050565b61271191929394505f5260205f2090565b5f905b8382106127215750500190565b600181602092548486015201910190612714565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001683525050811515909102019150565b61277661279f916103b7936126d1565b7f68696464656e0000000000000000000000000000000000000000000000000000815260060190565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000815260050190565b6104d76127e0926020926127da815190565b94859290565b93849101610482565b916127fa6103b79361279f936126d1565b906127c8565b916127fa6103b79361279f936127c8565b61282261281d826133c6565b61262a565b7f000000000000000000000000000000000000000000000000000000000000000081116128b55761285b6128576103b7610964565b5190565b6128676117465f6115f9565b11156128ac576128a06103b76103b792612888612882610964565b91612983565b9061289260405190565b938492602084019283612800565b9081038252038261086e565b506103b76126c9565b6128bf600d611934565b5f906128ca82611b38565b1461292257600c906128e76117466128e1846126b6565b926115f9565b1115612918576103b76128a0916129006103b794612983565b9061290a60405190565b9384926020840192836127e9565b50506103b76126c9565b600c91506129356117466128e1846126b6565b11156128ac576103b7906103b761294b60405190565b80926128a0602083019182612766565b369037565b906103a1612976612970846108c6565b936108a9565b601f19016020840161295b565b61298c81612a14565b9061299c6001926104d7846115f9565b91806129a784612960565b936020018401905b6129ba575b50505090565b6129f4905f1901927f3031323334353637383961626364656600000000000000000000000000000000600a82061a84536117ec600a6115f9565b9081612a026117465f6115f9565b14612a0f579091816129af565b6129b4565b612a1d5f6115f9565b907a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000612a43816115f9565b821015612b95575b506d04ee2d6d415b85acef8100000000612a64816115f9565b821015612b73575b50662386f26fc10000612a7e816115f9565b821015612b51575b506305f5e100612a95816115f9565b821015612b2f575b50612710612aaa816115f9565b821015612b0d575b506064612abe816115f9565b821015612aeb575b50612ad4611746600a6115f9565b1015612add5790565b6103b7906104d760016115f9565b612b06916117ec612afb926115f9565b916104d760026115f9565b905f612ac6565b612b28916117ec612b1d926115f9565b916104d760046115f9565b905f612ab2565b612b4a916117ec612b3f926115f9565b916104d760086115f9565b905f612a9d565b612b6c916117ec612b61926115f9565b916104d760106115f9565b905f612a86565b612b8e916117ec612b83926115f9565b916104d760206115f9565b905f612a6c565b612bb0916117ec612ba5926115f9565b916104d760406115f9565b905f612a4b565b90612bc56103f0600b61135d565b73ffffffffffffffffffffffffffffffffffffffff821614612bea576103b7916133a7565b5050600190565b6103ba9073ffffffffffffffffffffffffffffffffffffffff1660601b90565b6104d781601493612bf1565b67ffffffffffffffff81116108905760208091020190565b90929192612c456108d382612c1d565b938185526020808601920283019281841161039057915b838310612c695750505050565b60208091612c778486610519565b815201920191612c5c565b6103b7913691612c35565b90612cf56103b79392612c9d5f90565b50612cba612caa60405190565b80926128a0602083019182612c11565b612ccc612cc5825190565b9160200190565b20927f000000000000000000000000000000000000000000000000000000000000000092612c82565b6116f7611900929361174692612d085f90565b50612d68565b5f19811461170e5760010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b90612d52825190565b811015612d63576020809102010190565b612d1c565b612d715f6115f9565b915b612d7e6103b7835190565b831015612db057612da4612daa91612d9e612d998686612d49565b612857565b90612db6565b92612d0e565b91612d73565b91505090565b81811015612dcf57906103b7915f5260205260405f2090565b6103b7915f5260205260405f2090565b611ce96103b76103b79267ffffffffffffffff1690565b612e0a6103b791612e045f90565b50612fae565b612ddf565b61257790612e206125c86103b79490565b901c90565b612e0a612e366103b792612e045f90565b612e4060206115f9565b90612e0f565b9190820391821161170e57565b6103b790612e75611eed612e7b612e6984612f7d565b612e75611eed86612df6565b90612e46565b92612e25565b6103b7600a611921565b612e943061157a565b3190565b6103b79081565b6103b79054612e98565b6103b7612ec7612eb85f612e9f565b612ec26001612e9f565b900390565b612ec25b6103b760016115f9565b906116109061157a565b6103b767ffffffffffffffff6115f9565b612efc6103f05f61138e565b73ffffffffffffffffffffffffffffffffffffffff821614612f3757612f26612f2b916005612ed5565b612e9f565b612f33612edf565b1690565b6040517f8f4eb604000000000000000000000000000000000000000000000000000000008152600490fd5b6103b760406115f9565b6103b790612e206117466103b79490565b612f96612f26612f2b92612f8e5f90565b506005612ed5565b612f9e612f62565b90612f6c565b6103b760c06115f9565b61260e612fc2612f266103b793612f8e5f90565b612f9e612fa4565b6103b777ffffffffffffffffffffffffffffffffffffffffffffffff6115f9565b905f1990611544565b906130046103b761159a926115f9565b8254612feb565b906130456103a19260059261303e613026612f268487612ed5565b61302e612fca565b1691613038612fa4565b90612596565b1792612ed5565b612ff4565b61305d6130576103b79290565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61308f6301ffc9a761304a565b7fffffffff000000000000000000000000000000000000000000000000000000008216149081156130d7575b81156130c5575090565b90506119006118da635b5e139f61304a565b90506130e66380ac58cd61304a565b7fffffffff00000000000000000000000000000000000000000000000000000000821614906130bb565b6103b7906111a4565b6103b76002613110565b6103b76003613110565b6131496131446103b79261313e5f90565b50613174565b611381565b611571565b6103b77c01000000000000000000000000000000000000000000000000000000006115f9565b90819061317f612ecb565b8310156131b2575b6040517fdf2d9b42000000000000000000000000000000000000000000000000000000008152600490fd5b6131be6103b75f612e9f565b831015613187576131d4612f2660049485611606565b806131dd61314e565b165f906131ec611746836115f9565b146131f8575050613187565b92905b613204846115f9565b810361322957505f19019161320461321f612f268587611606565b91939190506131fb565b925050915090565b9061323b8161312d565b913373ffffffffffffffffffffffffffffffffffffffff841681036132b7575b50613272815f61326c856006611606565b01611583565b6132a86128e16132a27f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259561157a565b9261157a565b926132b260405190565b5f90a4565b611db56132c49185612bb7565b6132ce575f61325b565b6040517fcfb3b942000000000000000000000000000000000000000000000000000000008152600490fd5b613305611db5826133c6565b61331e575f6133186103b7926006611606565b0161135d565b6040517fcf4700e4000000000000000000000000000000000000000000000000000000008152600490fd5b33613367836133628461335d856007612ed5565b612ed5565b611947565b6115f461339d6133977f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319361157a565b9361157a565b936103dd60405190565b6103b79161335d6133c1926133b95f90565b506007612ed5565b611934565b6133ce612ecb565b8110159081613406575b816133e1575090565b6133f19150612f26906004611606565b6133f961314e565b166119006117465f6115f9565b90506134146103b75f612e9f565b8110906133d8565b6103b77c02000000000000000000000000000000000000000000000000000000006115f9565b919061344d82613174565b61345961314982611381565b61347873ffffffffffffffffffffffffffffffffffffffff8616611435565b0361367d57613486836136d5565b90919033613498611db58289856136a8565b61363b575b505f926134ac6103f08561138e565b73ffffffffffffffffffffffffffffffffffffffff861614613610578391613608575b50506135116134ff84600561335d6134e78a83612ed5565b6134f96134f382612e9f565b5f190190565b90612ff4565b6134f961350b82612e9f565b60010190565b61351961341c565b61354a613527838689613a96565b82178573ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b9061355b6004926130458885611606565b8216613569611746856115f9565b146135a2575b5050506132a86128e16132a27fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9561157a565b6135b46135af60016115f9565b860190565b926135c2612f268584611606565b6135ce611746836115f9565b146135da575b5061356f565b6103b76135e691612e9f565b83036135f3575b806135d4565b6136009261304591611606565b5f80806135ed565b55815f6134cf565b6040517fea553b34000000000000000000000000000000000000000000000000000000008152600490fd5b611db56136489188612bb7565b613652575f61349d565b6040517f59c896be000000000000000000000000000000000000000000000000000000008152600490fd5b6040517fa1148100000000000000000000000000000000000000000000000000000000008152600490fd5b919073ffffffffffffffffffffffffffffffffffffffff80916136c85f90565b5016911691821491141790565b6103b76136eb916136e35f90565b506006611606565b90815490565b90916103a1926136ff6126c9565b925b91929092613710818585613442565b833b61371e6117465f6115f9565b0361372a575b50505050565b61373793611db5936137e2565b613744575f808080613724565b6040515b7fd1a57ed6000000000000000000000000000000000000000000000000000000008152600490fd5b905051906103a182610365565b90602082820312610390576103b791613770565b73ffffffffffffffffffffffffffffffffffffffff91821681529116602082015260408101919091526080606082018190526103b7929101906104a3565b61305d6130576103b79263ffffffff1690565b909392916020906137fb6137f65f9761157a565b61157a565b63150b7a02935f3361382b61380f60405190565b988996879586946138208c60e01b90565b865260048601613791565b03925af15f9281613884575b50613871575050600161384657565b61384e6124f1565b805161385c6117465f6115f9565b0361386957604051613748565b805190602001fd5b6119009192935061305d6118da916137cf565b6138a691935060203d81116138ad575b61389e818361086e565b81019061377d565b915f613837565b503d613894565b9190916138c05f612e9f565b925f906138cc826115f9565b8114613a3a578461398e849273ffffffffffffffffffffffffffffffffffffffff6001928392613931613919613900612f62565b61391361390c886115f9565b9182612596565b17830290565b6134f96139278a6005612ed5565b916104d783612e9f565b61398961397d6001831460e11b61395b61394a8c61138e565b6139538d6115f9565b9b8c91613a96565b178b73ffffffffffffffffffffffffffffffffffffffff16904260a01b171790565b61304560049d8e611606565b850190565b9616928084877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4015b858103613a0b575050146139d3576103a1929350612ff4565b61141a846139e060405190565b7f2e076300000000000000000000000000000000000000000000000000000000008152918291820190565b80829184877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4016139ba565b6040517fb562e8dd000000000000000000000000000000000000000000000000000000008152600490fd5b6103b760e86115f9565b613a7c6103b76103b79290565b62ffffff1690565b6103b76103b76103b79262ffffff1690565b613aca612609916103b79493613aa95f90565b50613ac4613abf613ab8613a65565b8097612f6c565b613a6f565b91613acf565b613a84565b5050506103b75f90565b6103b76080610895565b613aeb613ad9565b5f8082526020820181905260408201819052606082015290565b6103b7613ae3565b613b15613b05565b50613b1e613b05565b613b296103b7612ecb565b82108015613b65575b613b605750613b4081613b96565b90613b4e6040830151151590565b613b5c576103b79150613b82565b5090565b905090565b50613b716103b7613b79565b821015613b32565b6103b75f612e9f565b613b916103b79161313e613b05565b613bba565b613b91612f266103b792613ba8613b05565b506004611606565b6103b760a06115f9565b906103a1613bc6613b05565b6060613c4b613abf8396613bf9613bdf61314983611381565b73ffffffffffffffffffffffffffffffffffffffff168652565b613c21613c1061260e613c0a613bb0565b84612f6c565b67ffffffffffffffff166020870152565b613c43613c2c61314e565b8216613c3a6117465f6115f9565b14156040870152565b612f9e613a65565b62ffffff16910152565b906108d86108d383612c1d565b5f5b828110613c7057505050565b602090613c7b613b05565b8184015201613c64565b906103a1613c9b613c9584613c55565b93612c1d565b601f190160208401613c62565b9190811015612d63576020020190565b356103b781610513565b91908092613ccf84613c85565b925f5b855b8114613d1a57613d1381613cf7611032613cf2613cd4958989613ca8565b613cb8565b613d018289612d49565b52613d0c8188612d49565b5060010190565b9050613cd2565b509350505090565b906103a1612976613c9584613c55565b9082811015613f17575f91613d45613b79565b613d4d612ecb565b808410613f0f575b50808511613f07575b50613d6881612ef0565b84831015613ef857828503818110613ef0575b505b613d8681613d22565b955f91613d92836115f9565b8114613ee757613da185613b0d565b945f95613db4611db56040830151151590565b613ec4575b505b875b81141580613eba575b15613ead5783613dd582613b96565b6040810151613e9e5701805173ffffffffffffffffffffffffffffffffffffffff16613e066114356103f08861138e565b03613e7f575b508873ffffffffffffffffffffffffffffffffffffffff861673ffffffffffffffffffffffffffffffffffffffff881614613e52575b50613dbd906001015b9050613dbb565b9681613e76613dbd93613e7384613e6d613e4b969160010190565b9c612d49565b52565b91505088613e42565b5173ffffffffffffffffffffffffffffffffffffffff1695505f613e0c565b5050613e4b613dbd9160010190565b5050959450505050815290565b5081871415613dc6565b84015173ffffffffffffffffffffffffffffffffffffffff169550613dbd613db9565b50945050505050565b90505f613d7b565b50613f025f6115f9565b613d7d565b93505f613d5e565b92505f613d55565b6040517f32c1995a000000000000000000000000000000000000000000000000000000008152600490fd5b5f80613f4d83612ef0565b92613f5784613d22565b94613f60613b05565b50613f69612ecb565b855b851461404657613f7a81613b96565b604081015161403957805173ffffffffffffffffffffffffffffffffffffffff16905f91613fad6114356103f08561138e565b03614014575b5050613ffb613f6b91613fd98573ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8716146140025760010190565b9050613f69565b61350b81613e7360018a01998c612d49565b015173ffffffffffffffffffffffffffffffffffffffff169350613ffb613f6b613fb3565b50613f6b90600101613ffb565b50935050505056fea2646970667358221220a0b8a61156ebd00d3d4fb6c03cd84ea8e435ec72b5b6173d211eaaebe55d09d764736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ConsecutiveTransfer(uint256,uint256,address,address)": {
        "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "airdropMint(address,uint256)": {
        "details": "caller is owner but minter is '_to''_setAirdropMintCounter' increases number of minted tokens of owner in airdrop mint as auxiliary data",
        "params": {
          "_amount": "token amount of airdrop",
          "_to": "airdrop recipient"
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "changeState(uint256)": {
        "details": "airdrop phase must be finished to change the state",
        "params": {
          "_index": "index of state (0: closed, 1: whitelist, 2: public)"
        }
      },
      "explicitOwnershipOf(uint256)": {
        "details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"
      },
      "explicitOwnershipsOf(uint256[])": {
        "details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
      },
      "externalPublicSaleMint(address,uint256)": {
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "externalWhitelistSaleMint(address,uint256)": {
        "details": "'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data",
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "getAirdropMintCounter(address)": {
        "details": "returns [0..31] bits of '_auxData' ([192..223] bits of '_packedAddressData')",
        "params": {
          "_account": "querying address"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getPublicMintCounter(address)": {
        "details": "(total minted) - (minted in whitelist sale) - (minted in airdrop)"
      },
      "getWhitelistMintCounter(address)": {
        "details": "returns [32..63] bits of '_auxData' ([224..255] bits of '_packedAddressData')",
        "params": {
          "_account": "querying address"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "inherits from ERC721A and bypass approval requests from rarible",
        "returns": {
          "_0": "true if the operator is rarible"
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "publicSaleMint(uint256)": {
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "reveal(string)": {
        "params": {
          "_newBaseUri": "actual URI"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "params": {
          "_tokenId": "querying token id"
        },
        "returns": {
          "_0": "token URI"
        }
      },
      "tokensOfOwner(address)": {
        "details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."
      },
      "tokensOfOwnerIn(address,uint256,uint256)": {
        "details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "whitelistSaleMint(uint256,bytes32[])": {
        "details": "'_setWhitelistMintCounter' increases number of minted tokens of owner in whitelist sale as auxiliary data",
        "params": {
          "_amount": "token amount to mint"
        }
      },
      "withdrawAll()": {
        "details": "calls _withdraw function to withdraw assets"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "InvalidQueryRange()": [
        {
          "notice": "Invalid query range (`start` >= `stop`)."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "airdropMint(address,uint256)": {
        "notice": "owner can mint the tokens for airdrop before sale phases"
      },
      "changeState(uint256)": {
        "notice": "owner can changes the sale state"
      },
      "constructor": {
        "notice": "state variables are defined and royalty is set in constructor"
      },
      "contractBalance()": {
        "notice": "returns contract balance"
      },
      "currentState()": {
        "notice": "returns current state of sale"
      },
      "externalPublicSaleMint(address,uint256)": {
        "notice": "any EOA address can mint tokens for a certain ETH within a certain limit during public sale"
      },
      "externalWhitelistSaleMint(address,uint256)": {
        "notice": "whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale"
      },
      "getAirdropMintCounter(address)": {
        "notice": "returns total airdrop amount of an address"
      },
      "getPublicMintCounter(address)": {
        "notice": "returns mint amounts during public sale of addresses"
      },
      "getWhitelistMintCounter(address)": {
        "notice": "returns total airdrop amount of an address"
      },
      "isWhitelisted(address,bytes32[])": {
        "notice": "returns if an address whitelisted or not by verifying merkle proof"
      },
      "publicSaleMint(uint256)": {
        "notice": "any EOA address can mint tokens for a certain ETH within a certain limit during public sale"
      },
      "reveal(string)": {
        "notice": "owner should reveal the metadata after sale phase only for once"
      },
      "whitelistSaleMint(uint256,bytes32[])": {
        "notice": "whitelisted addressses can mint tokens for a certain ETH within a certain limit during whitelist sale"
      },
      "withdrawAll()": {
        "notice": "owner can withdraw the all balance to associated accounts at any time"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3592,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3594,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3596,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3598,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3602,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3606,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3611,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)3524_storage)"
      },
      {
        "astId": 3617,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 264,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(RoyaltyInfo)261_storage"
      },
      {
        "astId": 269,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)261_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2301,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "state",
        "offset": 20,
        "slot": "10",
        "type": "t_enum(STATE)2296"
      },
      {
        "astId": 2303,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "raribleTransferProxy",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2306,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "BASE_URI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2312,
        "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
        "label": "isRevealed",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(STATE)2296": {
        "encoding": "inplace",
        "label": "enum IlkelBenlik.STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)261_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)261_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)3524_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)3524_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)261_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 258,
            "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 260,
            "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenApprovalRef)3524_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 3523,
            "contract": "contracts/IlkelBenlik.sol:IlkelBenlik",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}