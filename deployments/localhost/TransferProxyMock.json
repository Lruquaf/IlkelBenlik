{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "listToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "receiveBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenInterface",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x036ee1cc08cc9e6867e689a4aeeef6f09f24c5c6fd8113c6dde1be3bbba36920",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "340266",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1ad9bf72d9333b2ca5b1b11967adbfbdceba157b4c3d180c2127f332a0fb0c1f",
    "transactionHash": "0x036ee1cc08cc9e6867e689a4aeeef6f09f24c5c6fd8113c6dde1be3bbba36920",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "340266",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a48abf186e46731288e0f4e75ab90650",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"listToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"receiveBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInterface\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TransferProxyMock.sol\":\"TransferProxyMock\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u:fDnTOc\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/test/TransferProxyMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ncontract TransferProxyMock {\\r\\n    IERC721 public tokenInterface;\\r\\n\\r\\n    function listToken(address _tokenAddress, uint256 _tokenId) public {\\r\\n        tokenInterface = IERC721(_tokenAddress);\\r\\n        tokenInterface.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _tokenId,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function receiveBack(address _tokenAddress, uint256 _tokenId) public {\\r\\n        tokenInterface = IERC721(_tokenAddress);\\r\\n        tokenInterface.safeTransferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            _tokenId,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9dc78c825b01ca78e44b5d110bc008e30da6812fee540162d4170606e9a8b1e6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523461001a5760405161053761001f823961053790f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80630717d7c314610050578063150b7a021461004b578063729a0bd5146100465763f343d683036100905761027c565b6101d5565b610183565b6100d9565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff81165b0361009057565b5f80fd5b905035906100a182610071565b565b80610089565b905035906100a1826100a3565b91906040838203126100905761006e906100d08185610094565b936020016100a9565b34610090576100f26100ec3660046100b6565b906103cf565b604051005b0390f35b909182601f830112156100905781359167ffffffffffffffff831161009057602001926001830284011161009057565b90608082820312610090576101408183610094565b9261014e8260208501610094565b9261015c83604083016100a9565b92606082013567ffffffffffffffff81116100905761017b92016100fb565b9091565b9052565b34610090576100f76101a261019936600461012b565b939290926104e7565b604051918291827fffffffff00000000000000000000000000000000000000000000000000000000909116815260200190565b34610090576100f26101e83660046100b6565b90610464565b5f91031261009057565b61006e916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b9061006e91546101f8565b61006e5f80610219565b61005561006e61006e9273ffffffffffffffffffffffffffffffffffffffff1690565b61006e9061022e565b61006e90610251565b61017f9061025a565b6020810192916100a19190610263565b346100905761028c3660046101ee565b6100f7610297610224565b6040519182918261026c565b906102b361006e6102f49261025a565b82547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff919091161790565b9055565b61006e90610055565b61006e90546102f8565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761037857604052565b61030b565b73ffffffffffffffffffffffffffffffffffffffff91821681529116602082015261006e916080820191906103b3906040830152565b60608183039101525f815260200190565b6040513d5f823e3d90fd5b6103db6103e19161025a565b5f6102a3565b6103f26103ed5f610301565b61025a565b9063b88d4fde9133906104043061025a565b93813b15610090575f61042c91610437829661041f60405190565b9889978896879560e01b90565b85526004850161037d565b03925af1801561045f576104485750565b6100a1905f6104578183610338565b8101906101ee565b6103c4565b6103db6104709161025a565b61047c6103ed5f610301565b9063b88d4fde9161048c3061025a565b903393813b15610090575f61042c91610437829661041f60405190565b6104c26104bc61006e9263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b50505050506104f35f90565b5061006e63150b7a026104a956fea2646970667358221220f7dc82d403b4458eadcda25bc8e6dbbb95084d356a94528b0f03db6d35f5c71a64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361015610011575f80fd5b5f3560e01c80630717d7c314610050578063150b7a021461004b578063729a0bd5146100465763f343d683036100905761027c565b6101d5565b610183565b6100d9565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff81165b0361009057565b5f80fd5b905035906100a182610071565b565b80610089565b905035906100a1826100a3565b91906040838203126100905761006e906100d08185610094565b936020016100a9565b34610090576100f26100ec3660046100b6565b906103cf565b604051005b0390f35b909182601f830112156100905781359167ffffffffffffffff831161009057602001926001830284011161009057565b90608082820312610090576101408183610094565b9261014e8260208501610094565b9261015c83604083016100a9565b92606082013567ffffffffffffffff81116100905761017b92016100fb565b9091565b9052565b34610090576100f76101a261019936600461012b565b939290926104e7565b604051918291827fffffffff00000000000000000000000000000000000000000000000000000000909116815260200190565b34610090576100f26101e83660046100b6565b90610464565b5f91031261009057565b61006e916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b9061006e91546101f8565b61006e5f80610219565b61005561006e61006e9273ffffffffffffffffffffffffffffffffffffffff1690565b61006e9061022e565b61006e90610251565b61017f9061025a565b6020810192916100a19190610263565b346100905761028c3660046101ee565b6100f7610297610224565b6040519182918261026c565b906102b361006e6102f49261025a565b82547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff919091161790565b9055565b61006e90610055565b61006e90546102f8565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761037857604052565b61030b565b73ffffffffffffffffffffffffffffffffffffffff91821681529116602082015261006e916080820191906103b3906040830152565b60608183039101525f815260200190565b6040513d5f823e3d90fd5b6103db6103e19161025a565b5f6102a3565b6103f26103ed5f610301565b61025a565b9063b88d4fde9133906104043061025a565b93813b15610090575f61042c91610437829661041f60405190565b9889978896879560e01b90565b85526004850161037d565b03925af1801561045f576104485750565b6100a1905f6104578183610338565b8101906101ee565b6103c4565b6103db6104709161025a565b61047c6103ed5f610301565b9063b88d4fde9161048c3061025a565b903393813b15610090575f61042c91610437829661041f60405190565b6104c26104bc61006e9263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b50505050506104f35f90565b5061006e63150b7a026104a956fea2646970667358221220f7dc82d403b4458eadcda25bc8e6dbbb95084d356a94528b0f03db6d35f5c71a64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3276,
        "contract": "contracts/test/TransferProxyMock.sol:TransferProxyMock",
        "label": "tokenInterface",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC721)247"
      }
    ],
    "types": {
      "t_contract(IERC721)247": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      }
    }
  }
}