{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mintingContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "listToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "receiveBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenInterface",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbe954e94c6256e7df6ff7208584fae3269632736596bef96d68e59539f5a3754",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "576384",
    "logsBloom": "0x
    "blockHash": "0x7df98d9f479a7025fdfdba1a2164e3178296e8190db41d1622e03bf16475e780",
    "transactionHash": "0xbe954e94c6256e7df6ff7208584fae3269632736596bef96d68e59539f5a3754",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xbe954e94c6256e7df6ff7208584fae3269632736596bef96d68e59539f5a3754",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7df98d9f479a7025fdfdba1a2164e3178296e8190db41d1622e03bf16475e780"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "576384",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "411af97c853dfc9cd3a716f22267ebd9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintingContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"listToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"receiveBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInterface\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MinterContract.sol\":\"MinterContract\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u:fDnTOc\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MinterContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ncontract MinterContract is Ownable {\\r\\n    address public immutable mintingContract;\\r\\n    IERC721 public tokenInterface;\\r\\n\\r\\n    constructor(address _mintingContract) {\\r\\n        mintingContract = _mintingContract;\\r\\n    }\\r\\n\\r\\n    function mintToken(uint256 _amount) public payable onlyOwner {\\r\\n        (bool success, ) = payable(mintingContract).call{value: msg.value}(\\r\\n            abi.encodeWithSignature(\\\"publicSaleMint(uint256)\\\", _amount)\\r\\n        );\\r\\n        require(success, \\\"Low-level call failed!\\\");\\r\\n    }\\r\\n\\r\\n    function listToken(address _tokenAddress, uint256 _tokenId) public {\\r\\n        tokenInterface = IERC721(_tokenAddress);\\r\\n        tokenInterface.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _tokenId,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function receiveBack(address _tokenAddress, uint256 _tokenId) public {\\r\\n        tokenInterface = IERC721(_tokenAddress);\\r\\n        tokenInterface.safeTransferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            _tokenId,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x82cc04e4b86afc4adb5dc163b8626b68b259547318345d613e5916bdc4fe1ade\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523462000040576200001e62000018620000e0565b62000103565b6040516108f1620001ea82396080518181816101f801526106f401526108f190f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90601f01601f191681019081106001600160401b038211176200007a57604052565b62000044565b90620000976200008f60405190565b928362000058565b565b6001600160a01b031690565b90565b6001600160a01b038116036200004057565b905051906200009782620000a8565b906020828203126200004057620000a591620000ba565b620000a562000adb80380380620000f78162000080565b928339810190620000c9565b6200010d62000112565b608052565b62000097336200018a565b546001600160a01b031690565b620000a59062000099906001600160a01b031682565b620000a5906200012a565b620000a59062000140565b906200016a620000a562000186926200014b565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b620001955f6200011d565b90620001a2815f62000156565b620001d9620001d27f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936200014b565b916200014b565b91620001e460405190565b5f90a356fe60806040526004361015610011575f80fd5b5f3560e01c80630717d7c314610090578063715018a61461008b578063729a0bd5146100865780638da5cb5b14610081578063c634d0321461007c578063d2f6f67d14610077578063f2fde38b146100725763f343d683036100d0576102cd565b610230565b6101e3565b6101d0565b61017a565b61015d565b610145565b610119565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff81165b036100d057565b5f80fd5b905035906100e1826100b1565b565b806100c9565b905035906100e1826100e3565b91906040838203126100d0576100ae9061011081856100d4565b936020016100e9565b346100d05761013261012c3660046100f6565b906107e3565b604051005b0390f35b5f9103126100d057565b346100d05761015536600461013b565b610132610347565b346100d0576101326101703660046100f6565b90610875565b9052565b346100d05761018a36600461013b565b610137610195610307565b6040519182918273ffffffffffffffffffffffffffffffffffffffff909116815260200190565b906020828203126100d0576100ae916100e9565b6101326101de3660046101bc565b610788565b346100d0576101f336600461013b565b6101377f0000000000000000000000000000000000000000000000000000000000000000610195565b906020828203126100d0576100ae916100d4565b346100d05761013261024336600461021c565b6104c2565b6100ae916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b906100ae9154610248565b6100ae5f6001610269565b6100956100ae6100ae9273ffffffffffffffffffffffffffffffffffffffff1690565b6100ae9061027f565b6100ae906102a2565b610176906102ab565b6020810192916100e191906102b4565b346100d0576102dd36600461013b565b6101376102e8610274565b604051918291826102bd565b6100ae90610095565b6100ae90546102f4565b6100ae5f6102fd565b6103186103bd565b6100e1610336565b6100956100ae6100ae9290565b6100ae90610320565b6100e16103425f61032d565b610520565b6100e1610310565b1561035657565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152806103b9600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6100e16103c8610307565b6103ee6103d433610095565b9173ffffffffffffffffffffffffffffffffffffffff1690565b1461034f565b6100e1906104006103bd565b610491565b1561040c57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b6100e1906103426104a46100955f61032d565b73ffffffffffffffffffffffffffffffffffffffff83161415610405565b6100e1906103f4565b906104db6100ae61051c926102ab565b82547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff919091161790565b9055565b6105295f6102fd565b90610534815f6104cb565b6105676105617f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936102ab565b916102ab565b9161057160405190565b5f90a3565b6100e1906105826103bd565b6106e3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff8211176105f457604052565b610587565b906100e161060660405190565b92836105b4565b67ffffffffffffffff81116105f457602090601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b9061065a6106558361060d565b6105f9565b918252565b3d156106785761066e3d610648565b903d5f602084013e565b606090565b1561068457565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4c6f772d6c6576656c2063616c6c206661696c656421000000000000000000006044820152606490fd5b5f806100e19261076261071d6107187f00000000000000000000000000000000000000000000000000000000000000006102ab565b6102ab565b91610771349161072c60405190565b9384916004602084017fb3ab66b00000000000000000000000000000000000000000000000000000000081520190815260200190565b602082018103825203836105b4565b602082019151925af161078261065f565b5061067d565b6100e190610576565b73ffffffffffffffffffffffffffffffffffffffff9182168152911660208201526100ae916080820191906107c7906040830152565b60608183039101525f815260200190565b6040513d5f823e3d90fd5b6107ef6107f6916102ab565b60016104cb565b61080361071860016102fd565b9063b88d4fde913390610815306102ab565b93813b156100d0575f61083d91610848829661083060405190565b9889978896879560e01b90565b855260048501610791565b03925af18015610870576108595750565b6100e1905f61086881836105b4565b81019061013b565b6107d8565b6107ef610881916102ab565b61088e61071860016102fd565b9063b88d4fde9161089e306102ab565b903393813b156100d0575f61083d9161084882966108306040519056fea26469706673582212205bbef0234fc6f5b3a9f5e27caef2a770aae3e02a28b503b1adcb93dff3cc1ab564736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361015610011575f80fd5b5f3560e01c80630717d7c314610090578063715018a61461008b578063729a0bd5146100865780638da5cb5b14610081578063c634d0321461007c578063d2f6f67d14610077578063f2fde38b146100725763f343d683036100d0576102cd565b610230565b6101e3565b6101d0565b61017a565b61015d565b610145565b610119565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff81165b036100d057565b5f80fd5b905035906100e1826100b1565b565b806100c9565b905035906100e1826100e3565b91906040838203126100d0576100ae9061011081856100d4565b936020016100e9565b346100d05761013261012c3660046100f6565b906107e3565b604051005b0390f35b5f9103126100d057565b346100d05761015536600461013b565b610132610347565b346100d0576101326101703660046100f6565b90610875565b9052565b346100d05761018a36600461013b565b610137610195610307565b6040519182918273ffffffffffffffffffffffffffffffffffffffff909116815260200190565b906020828203126100d0576100ae916100e9565b6101326101de3660046101bc565b610788565b346100d0576101f336600461013b565b6101377f0000000000000000000000000000000000000000000000000000000000000000610195565b906020828203126100d0576100ae916100d4565b346100d05761013261024336600461021c565b6104c2565b6100ae916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b906100ae9154610248565b6100ae5f6001610269565b6100956100ae6100ae9273ffffffffffffffffffffffffffffffffffffffff1690565b6100ae9061027f565b6100ae906102a2565b610176906102ab565b6020810192916100e191906102b4565b346100d0576102dd36600461013b565b6101376102e8610274565b604051918291826102bd565b6100ae90610095565b6100ae90546102f4565b6100ae5f6102fd565b6103186103bd565b6100e1610336565b6100956100ae6100ae9290565b6100ae90610320565b6100e16103425f61032d565b610520565b6100e1610310565b1561035657565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152806103b9600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6100e16103c8610307565b6103ee6103d433610095565b9173ffffffffffffffffffffffffffffffffffffffff1690565b1461034f565b6100e1906104006103bd565b610491565b1561040c57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b6100e1906103426104a46100955f61032d565b73ffffffffffffffffffffffffffffffffffffffff83161415610405565b6100e1906103f4565b906104db6100ae61051c926102ab565b82547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff919091161790565b9055565b6105295f6102fd565b90610534815f6104cb565b6105676105617f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936102ab565b916102ab565b9161057160405190565b5f90a3565b6100e1906105826103bd565b6106e3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff8211176105f457604052565b610587565b906100e161060660405190565b92836105b4565b67ffffffffffffffff81116105f457602090601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b9061065a6106558361060d565b6105f9565b918252565b3d156106785761066e3d610648565b903d5f602084013e565b606090565b1561068457565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4c6f772d6c6576656c2063616c6c206661696c656421000000000000000000006044820152606490fd5b5f806100e19261076261071d6107187f00000000000000000000000000000000000000000000000000000000000000006102ab565b6102ab565b91610771349161072c60405190565b9384916004602084017fb3ab66b00000000000000000000000000000000000000000000000000000000081520190815260200190565b602082018103825203836105b4565b602082019151925af161078261065f565b5061067d565b6100e190610576565b73ffffffffffffffffffffffffffffffffffffffff9182168152911660208201526100ae916080820191906107c7906040830152565b60608183039101525f815260200190565b6040513d5f823e3d90fd5b6107ef6107f6916102ab565b60016104cb565b61080361071860016102fd565b9063b88d4fde913390610815306102ab565b93813b156100d0575f61083d91610848829661083060405190565b9889978896879560e01b90565b855260048501610791565b03925af18015610870576108595750565b6100e1905f61086881836105b4565b81019061013b565b6107d8565b6107ef610881916102ab565b61088e61071860016102fd565b9063b88d4fde9161089e306102ab565b903393813b156100d0575f61083d9161084882966108306040519056fea26469706673582212205bbef0234fc6f5b3a9f5e27caef2a770aae3e02a28b503b1adcb93dff3cc1ab564736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MinterContract.sol:MinterContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3326,
        "contract": "contracts/MinterContract.sol:MinterContract",
        "label": "tokenInterface",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC721)247"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)247": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      }
    }
  }
}